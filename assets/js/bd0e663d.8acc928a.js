"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[7801],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=p(t),f=r,h=d["".concat(l,".").concat(f)]||d[f]||u[f]||i;return t?o.createElement(h,s(s({ref:n},c),{},{components:t})):o.createElement(h,s({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=d;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var p=2;p<i;p++)s[p]=t[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3366:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return u}});var o=t(3117),r=t(102),i=(t(7294),t(3905)),s=["components"],a={},l="no-confusing-void-expression",p={unversionedId:"no-confusing-void-expression",id:"no-confusing-void-expression",title:"no-confusing-void-expression",description:"Requires expressions of type void to appear in statement position.",source:"@site/rules/no-confusing-void-expression.md",sourceDirName:".",slug:"/no-confusing-void-expression",permalink:"/typescript-eslint-chinese/rules/no-confusing-void-expression",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"no-confusing-non-null-assertion",permalink:"/typescript-eslint-chinese/rules/no-confusing-non-null-assertion"},next:{title:"no-dupe-class-members",permalink:"/typescript-eslint-chinese/rules/no-dupe-class-members"}},c={},u=[{value:"Examples",id:"examples",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"<code>ignoreArrowShorthand</code>",id:"ignorearrowshorthand",level:3},{value:"<code>ignoreVoidOperator</code>",id:"ignorevoidoperator",level:3},{value:"When Not To Use It",id:"when-not-to-use-it",level:2},{value:"Related To",id:"related-to",level:2}],d={toc:u};function f(e){var n=e.components,t=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"no-confusing-void-expression"},(0,i.kt)("inlineCode",{parentName:"h1"},"no-confusing-void-expression")),(0,i.kt)("p",null,"Requires expressions of type void to appear in statement position."),(0,i.kt)("p",null,"Returning the results of an expression whose type is void can be misleading.\nAttempting to do so is likely a symptom of expecting a different return type from a function.\nEven if used correctly, it can be misleading for other developers,\nwho don't know what a particular function does and if its result matters."),(0,i.kt)("p",null,"This rule provides automatic fixes for most common cases."),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// somebody forgot that `alert` doesn\'t return anything\nconst response = alert("Are you sure?");\nconsole.log(alert("Are you sure?"));\n\n// it\'s not obvious whether the chained promise will contain the response (fixable)\npromise.then((value) => window.postMessage(value));\n\n// it looks like we are returning the result of `console.error` (fixable)\nfunction doSomething() {\n  if (!somethingToDo) {\n    return console.error("Nothing to do!");\n  }\n\n  console.log("Doing a thing...");\n}\n')),(0,i.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// just a regular void function in a statement position\nalert("Hello, world!");\n\n// this function returns a boolean value so it\'s ok\nconst response = confirm("Are you sure?");\nconsole.log(confirm("Are you sure?"));\n\n// now it\'s obvious that `postMessage` doesn\'t return any response\npromise.then((value) => {\n  window.postMessage(value);\n});\n\n// now it\'s explicit that we want to log the error and return early\nfunction doSomething() {\n  if (!somethingToDo) {\n    console.error("Nothing to do!");\n    return;\n  }\n\n  console.log("Doing a thing...");\n}\n\n// using logical expressions for their side effects is fine\ncond && console.log("true");\ncond || console.error("false");\ncond ? console.log("true") : console.error("false");\n')),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("p",null,"An object option can be specified. Each boolean flag makes the rule less strict."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type Options = {\n  ignoreArrowShorthand?: boolean;\n  ignoreVoidOperator?: boolean;\n};\n\nconst defaults: Options = {\n  ignoreArrowShorthand: false,\n  ignoreVoidOperator: false,\n};\n")),(0,i.kt)("h3",{id:"ignorearrowshorthand"},(0,i.kt)("inlineCode",{parentName:"h3"},"ignoreArrowShorthand")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "@typescript-eslint/no-confusing-void-expression": [\n    "error",\n    { "ignoreArrowShorthand": true }\n  ]\n}\n')),(0,i.kt)("p",null,"It might be undesirable to wrap every arrow function shorthand expression with braces.\nEspecially when using Prettier formatter, which spreads such code across 3 lines instead of 1."),(0,i.kt)("p",null,"Examples of additional ",(0,i.kt)("strong",{parentName:"p"},"correct")," code with this option enabled:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"promise.then((value) => window.postMessage(value));\n")),(0,i.kt)("h3",{id:"ignorevoidoperator"},(0,i.kt)("inlineCode",{parentName:"h3"},"ignoreVoidOperator")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "@typescript-eslint/no-confusing-void-expression": [\n    "error",\n    { "ignoreVoidOperator": true }\n  ]\n}\n')),(0,i.kt)("p",null,"It might be preferable to only use some distinct syntax\nto explicitly mark the confusing but valid usage of void expressions.\nThis option allows void expressions which are explicitly wrapped in the ",(0,i.kt)("inlineCode",{parentName:"p"},"void")," operator.\nThis can help avoid confusion among other developers as long as they are made aware of this code style."),(0,i.kt)("p",null,"This option also changes the automatic fixes for common cases to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"void")," operator.\nIt also enables a suggestion fix to wrap the void expression with ",(0,i.kt)("inlineCode",{parentName:"p"},"void")," operator for every problem reported."),(0,i.kt)("p",null,"Examples of additional ",(0,i.kt)("strong",{parentName:"p"},"correct")," code with this option enabled:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// now it\'s obvious that we don\'t expect any response\npromise.then((value) => void window.postMessage(value));\n\n// now it\'s explicit that we don\'t want to return anything\nfunction doSomething() {\n  if (!somethingToDo) {\n    return void console.error("Nothing to do!");\n  }\n\n  console.log("Doing a thing...");\n}\n\n// we are sure that we want to always log `undefined`\nconsole.log(void alert("Hello, world!"));\n')),(0,i.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,i.kt)("p",null,"The return type of a function can be inspected by going to its definition or hovering over it in an IDE.\nIf you don't care about being explicit about the void type in actual code then don't use this rule.\nAlso, if you prefer concise coding style then also don't use it."),(0,i.kt)("h2",{id:"related-to"},"Related To"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"TSLint: ",(0,i.kt)("a",{parentName:"li",href:"https://palantir.github.io/tslint/rules/no-void-expression/"},"'no-void-expression'"))))}f.isMDXComponent=!0}}]);