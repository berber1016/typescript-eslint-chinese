"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[5885],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),y=p(t),f=r,m=y["".concat(l,".").concat(f)]||y[f]||u[f]||i;return t?a.createElement(m,s(s({ref:n},c),{},{components:t})):a.createElement(m,s({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=y;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},5014:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var a=t(3117),r=t(102),i=(t(7294),t(3905)),s=["components"],o={},l="no-unsafe-assignment",p={unversionedId:"no-unsafe-assignment",id:"no-unsafe-assignment",title:"no-unsafe-assignment",description:"Disallows assigning a value with type any to variables and properties.",source:"@site/rules/no-unsafe-assignment.md",sourceDirName:".",slug:"/no-unsafe-assignment",permalink:"/typescript-eslint-chinese/rules/no-unsafe-assignment",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657186506,formattedLastUpdatedAt:"2022\u5e747\u67087\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"no-unsafe-argument",permalink:"/typescript-eslint-chinese/rules/no-unsafe-argument"},next:{title:"no-unsafe-call",permalink:"/typescript-eslint-chinese/rules/no-unsafe-call"}},c={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"Related To",id:"related-to",level:2}],y={toc:u};function f(e){var n=e.components,t=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"no-unsafe-assignment"},(0,i.kt)("inlineCode",{parentName:"h1"},"no-unsafe-assignment")),(0,i.kt)("p",null,"Disallows assigning a value with type ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," to variables and properties."),(0,i.kt)("p",null,"Despite your best intentions, the ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," type can sometimes leak into your codebase.\nAssigning an ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," typed value to a variable can be hard to pick up on, particularly if it leaks in from an external library. Operations on the variable will not be checked at all by TypeScript, so it creates a potential safety hole, and source of bugs in your codebase."),(0,i.kt)("h2",{id:"rule-details"},"Rule Details"),(0,i.kt)("p",null,"This rule disallows assigning ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," to a variable, and assigning ",(0,i.kt)("inlineCode",{parentName:"p"},"any[]")," to an array destructuring.\nThis rule also compares the assigned type to the variable's type to ensure you don't assign an unsafe ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," in a generic position to a receiver that's expecting a specific type. For example, it will error if you assign ",(0,i.kt)("inlineCode",{parentName:"p"},"Set<any>")," to a variable declared as ",(0,i.kt)("inlineCode",{parentName:"p"},"Set<string>"),"."),(0,i.kt)("p",null,"Examples of code for this rule:"),(0,i.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const x = 1 as any,\n  y = 1 as any;\nconst [x] = 1 as any;\nconst [x] = [] as any[];\nconst [x] = [1 as any];\n[x] = [1] as [any];\n\nfunction foo(a = 1 as any) {}\nclass Foo {\n  constructor(private a = 1 as any) {}\n}\nclass Foo {\n  private a = 1 as any;\n}\n\n// generic position examples\nconst x: Set<string> = new Set<any>();\nconst x: Map<string, string> = new Map<string, any>();\nconst x: Set<string[]> = new Set<any[]>();\nconst x: Set<Set<Set<string>>> = new Set<Set<Set<any>>>();\n")),(0,i.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const x = 1,\n  y = 1;\nconst [x] = [1];\n[x] = [1] as [number];\n\nfunction foo(a = 1) {}\nclass Foo {\n  constructor(private a = 1) {}\n}\nclass Foo {\n  private a = 1;\n}\n\n// generic position examples\nconst x: Set<string> = new Set<string>();\nconst x: Map<string, string> = new Map<string, string>();\nconst x: Set<string[]> = new Set<string[]>();\nconst x: Set<Set<Set<string>>> = new Set<Set<Set<string>>>();\n")),(0,i.kt)("p",null,"There are cases where the rule allows assignment of ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"unknown"),"."),(0,i.kt)("p",null,"Example of ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"unknown")," assignment that are allowed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const x: unknown = y as any;\nconst x: unknown[] = y as any[];\nconst x: Set<unknown> = y as Set<any>;\n")),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsonc"},'// .eslintrc.json\n{\n  "rules": {\n    "@typescript-eslint/no-unsafe-assignment": "error"\n  }\n}\n')),(0,i.kt)("p",null,"This rule is not configurable."),(0,i.kt)("h2",{id:"related-to"},"Related To"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/typescript-eslint-chinese/rules/no-explicit-any"},(0,i.kt)("inlineCode",{parentName:"a"},"no-explicit-any"))),(0,i.kt)("li",{parentName:"ul"},"TSLint: ",(0,i.kt)("a",{parentName:"li",href:"https://palantir.github.io/tslint/rules/no-unsafe-any/"},(0,i.kt)("inlineCode",{parentName:"a"},"no-unsafe-any")))))}f.isMDXComponent=!0}}]);