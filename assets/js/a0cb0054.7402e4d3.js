"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[4302],{3905:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return y}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),p=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),y=a,m=d["".concat(s,".").concat(y)]||d[y]||u[y]||o;return r?t.createElement(m,i(i({ref:n},c),{},{components:r})):t.createElement(m,i({ref:n},c))}));function y(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9283:function(e,n,r){r.r(n),r.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return y},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var t=r(3117),a=r(102),o=(r(7294),r(3905)),i=["components"],l={},s="prefer-readonly-parameter-types",p={unversionedId:"prefer-readonly-parameter-types",id:"prefer-readonly-parameter-types",title:"prefer-readonly-parameter-types",description:"Requires function parameters to be typed as readonly to prevent accidental mutation of inputs.",source:"@site/rules/prefer-readonly-parameter-types.md",sourceDirName:".",slug:"/prefer-readonly-parameter-types",permalink:"/typescript-eslint-chinese/rules/prefer-readonly-parameter-types",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"prefer-optional-chain",permalink:"/typescript-eslint-chinese/rules/prefer-optional-chain"},next:{title:"prefer-readonly",permalink:"/typescript-eslint-chinese/rules/prefer-readonly"}},c={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"<code>checkParameterProperties</code>",id:"checkparameterproperties",level:3},{value:"\u274c Incorrect",id:"-incorrect-1",level:4},{value:"\u2705 Correct",id:"-correct-1",level:4},{value:"<code>ignoreInferredTypes</code>",id:"ignoreinferredtypes",level:3},{value:"\u274c Incorrect",id:"-incorrect-2",level:4},{value:"\u2705 Correct",id:"-correct-2",level:4},{value:"<code>treatMethodsAsReadonly</code>",id:"treatmethodsasreadonly",level:3},{value:"\u274c Incorrect",id:"-incorrect-3",level:4},{value:"\u2705 Correct",id:"-correct-3",level:4}],d={toc:u};function y(e){var n=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"prefer-readonly-parameter-types"},(0,o.kt)("inlineCode",{parentName:"h1"},"prefer-readonly-parameter-types")),(0,o.kt)("p",null,"Requires function parameters to be typed as ",(0,o.kt)("inlineCode",{parentName:"p"},"readonly")," to prevent accidental mutation of inputs."),(0,o.kt)("p",null,"Mutating function arguments can lead to confusing, hard to debug behavior.\nWhilst it's easy to implicitly remember to not modify function arguments, explicitly typing arguments as readonly provides clear contract to consumers.\nThis contract makes it easier for a consumer to reason about if a function has side-effects."),(0,o.kt)("h2",{id:"rule-details"},"Rule Details"),(0,o.kt)("p",null,"This rule allows you to enforce that function parameters resolve to readonly types.\nA type is considered readonly if:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"it is a primitive type (",(0,o.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"number"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"boolean"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"symbol"),", or an enum),"),(0,o.kt)("li",{parentName:"ul"},"it is a function signature type,"),(0,o.kt)("li",{parentName:"ul"},"it is a readonly array type whose element type is considered readonly."),(0,o.kt)("li",{parentName:"ul"},"it is a readonly tuple type whose elements are all considered readonly."),(0,o.kt)("li",{parentName:"ul"},"it is an object type whose properties are all marked as readonly, and whose values are all considered readonly.")),(0,o.kt)("p",null,"Examples of code for this rule:"),(0,o.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function array1(arg: string[]) {} // array is not readonly\nfunction array2(arg: readonly string[][]) {} // array element is not readonly\nfunction array3(arg: [string, number]) {} // tuple is not readonly\nfunction array4(arg: readonly [string[], number]) {} // tuple element is not readonly\n// the above examples work the same if you use ReadonlyArray<T> instead\n\nfunction object1(arg: { prop: string }) {} // property is not readonly\nfunction object2(arg: { readonly prop: string; prop2: string }) {} // not all properties are readonly\nfunction object3(arg: { readonly prop: { prop2: string } }) {} // nested property is not readonly\n// the above examples work the same if you use Readonly<T> instead\n\ninterface CustomArrayType extends ReadonlyArray<string> {\n  prop: string; // note: this property is mutable\n}\nfunction custom1(arg: CustomArrayType) {}\n\ninterface CustomFunction {\n  (): void;\n  prop: string; // note: this property is mutable\n}\nfunction custom2(arg: CustomFunction) {}\n\nfunction union(arg: string[] | ReadonlyArray<number[]>) {} // not all types are readonly\n\n// rule also checks function types\ninterface Foo {\n  (arg: string[]): void;\n}\ninterface Foo {\n  new (arg: string[]): void;\n}\nconst x = { foo(arg: string[]): void; };\nfunction foo(arg: string[]);\ntype Foo = (arg: string[]) => void;\ninterface Foo {\n  foo(arg: string[]): void;\n}\n")),(0,o.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function array1(arg: readonly string[]) {}\nfunction array2(arg: readonly (readonly string[])[]) {}\nfunction array3(arg: readonly [string, number]) {}\nfunction array4(arg: readonly [readonly string[], number]) {}\n// the above examples work the same if you use ReadonlyArray<T> instead\n\nfunction object1(arg: { readonly prop: string }) {}\nfunction object2(arg: { readonly prop: string; readonly prop2: string }) {}\nfunction object3(arg: { readonly prop: { readonly prop2: string } }) {}\n// the above examples work the same if you use Readonly<T> instead\n\ninterface CustomArrayType extends ReadonlyArray<string> {\n  readonly prop: string;\n}\nfunction custom1(arg: Readonly<CustomArrayType>) {}\n// interfaces that extend the array types are not considered arrays, and thus must be made readonly.\n\ninterface CustomFunction {\n  (): void;\n  readonly prop: string;\n}\nfunction custom2(arg: CustomFunction) {}\n\nfunction union(arg: readonly string[] | ReadonlyArray<number[]>) {}\n\nfunction primitive1(arg: string) {}\nfunction primitive2(arg: number) {}\nfunction primitive3(arg: boolean) {}\nfunction primitive4(arg: unknown) {}\nfunction primitive5(arg: null) {}\nfunction primitive6(arg: undefined) {}\nfunction primitive7(arg: any) {}\nfunction primitive8(arg: never) {}\nfunction primitive9(arg: string | number | undefined) {}\n\nfunction fnSig(arg: () => void) {}\n\nenum Foo { a, b }\nfunction enum(arg: Foo) {}\n\nfunction symb1(arg: symbol) {}\nconst customSymbol = Symbol('a');\nfunction symb2(arg: typeof customSymbol) {}\n\n// function types\ninterface Foo {\n  (arg: readonly string[]): void;\n}\ninterface Foo {\n  new (arg: readonly string[]): void;\n}\nconst x = { foo(arg: readonly string[]): void; };\nfunction foo(arg: readonly string[]);\ntype Foo = (arg: readonly string[]) => void;\ninterface Foo {\n  foo(arg: readonly string[]): void;\n}\n")),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface Options {\n  checkParameterProperties?: boolean;\n  ignoreInferredTypes?: boolean;\n}\n\nconst defaultOptions: Options = {\n  checkParameterProperties: true,\n  ignoreInferredTypes: false,\n  treatMethodsAsReadonly: false,\n};\n")),(0,o.kt)("h3",{id:"checkparameterproperties"},(0,o.kt)("inlineCode",{parentName:"h3"},"checkParameterProperties")),(0,o.kt)("p",null,"This option allows you to enable or disable the checking of parameter properties.\nBecause parameter properties create properties on the class, it may be undesirable to force them to be readonly."),(0,o.kt)("p",null,"Examples of code for this rule with ",(0,o.kt)("inlineCode",{parentName:"p"},"{checkParameterProperties: true}"),":"),(0,o.kt)("h4",{id:"-incorrect-1"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  constructor(private paramProp: string[]) {}\n}\n")),(0,o.kt)("h4",{id:"-correct-1"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  constructor(private paramProp: readonly string[]) {}\n}\n")),(0,o.kt)("p",null,"Examples of ",(0,o.kt)("strong",{parentName:"p"},"correct")," code for this rule with ",(0,o.kt)("inlineCode",{parentName:"p"},"{checkParameterProperties: false}"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  constructor(\n    private paramProp1: string[],\n    private paramProp2: readonly string[]\n  ) {}\n}\n")),(0,o.kt)("h3",{id:"ignoreinferredtypes"},(0,o.kt)("inlineCode",{parentName:"h3"},"ignoreInferredTypes")),(0,o.kt)("p",null,"This option allows you to ignore parameters which don't explicitly specify a type. This may be desirable in cases where an external dependency specifies a callback with mutable parameters, and manually annotating the callback's parameters is undesirable."),(0,o.kt)("p",null,"Examples of code for this rule with ",(0,o.kt)("inlineCode",{parentName:"p"},"{ignoreInferredTypes: true}"),":"),(0,o.kt)("h4",{id:"-incorrect-2"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { acceptsCallback, CallbackOptions } from "external-dependency";\n\nacceptsCallback((options: CallbackOptions) => {});\n')),(0,o.kt)("details",null,(0,o.kt)("summary",null,"external-dependency.d.ts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export interface CallbackOptions {\n  prop: string;\n}\ntype Callback = (options: CallbackOptions) => void;\ntype AcceptsCallback = (callback: Callback) => void;\n\nexport const acceptsCallback: AcceptsCallback;\n"))),(0,o.kt)("h4",{id:"-correct-2"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { acceptsCallback } from "external-dependency";\n\nacceptsCallback((options) => {});\n')),(0,o.kt)("details",null,(0,o.kt)("summary",null,"external-dependency.d.ts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export interface CallbackOptions {\n  prop: string;\n}\ntype Callback = (options: CallbackOptions) => void;\ntype AcceptsCallback = (callback: Callback) => void;\n\nexport const acceptsCallback: AcceptsCallback;\n"))),(0,o.kt)("h3",{id:"treatmethodsasreadonly"},(0,o.kt)("inlineCode",{parentName:"h3"},"treatMethodsAsReadonly")),(0,o.kt)("p",null,"This option allows you to treat all mutable methods as though they were readonly. This may be desirable when you are never reassigning methods."),(0,o.kt)("p",null,"Examples of code for this rule with ",(0,o.kt)("inlineCode",{parentName:"p"},"{treatMethodsAsReadonly: false}"),":"),(0,o.kt)("h4",{id:"-incorrect-3"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type MyType = {\n  readonly prop: string;\n  method(): string; // note: this method is mutable\n};\nfunction foo(arg: MyType) {}\n")),(0,o.kt)("h4",{id:"-correct-3"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type MyType = Readonly<{\n  prop: string;\n  method(): string;\n}>;\nfunction foo(arg: MyType) {}\n\ntype MyOtherType = {\n  readonly prop: string;\n  readonly method: () => string;\n};\nfunction bar(arg: MyOtherType) {}\n")),(0,o.kt)("p",null,"Examples of ",(0,o.kt)("strong",{parentName:"p"},"correct")," code for this rule with ",(0,o.kt)("inlineCode",{parentName:"p"},"{treatMethodsAsReadonly: true}"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type MyType = {\n  readonly prop: string;\n  method(): string; // note: this method is mutable\n};\nfunction foo(arg: MyType) {}\n")))}y.isMDXComponent=!0}}]);