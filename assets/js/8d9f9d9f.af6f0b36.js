"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[6591],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=s(n),m=a,d=f["".concat(c,".").concat(m)]||f[m]||u[m]||i;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9845:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],l={},c="no-empty-interface",s={unversionedId:"no-empty-interface",id:"no-empty-interface",title:"no-empty-interface",description:"Disallows the declaration of empty interfaces.",source:"@site/rules/no-empty-interface.md",sourceDirName:".",slug:"/no-empty-interface",permalink:"/typescript-eslint-chinese/rules/no-empty-interface",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657186506,formattedLastUpdatedAt:"2022\u5e747\u67087\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"no-empty-function",permalink:"/typescript-eslint-chinese/rules/no-empty-function"},next:{title:"no-explicit-any",permalink:"/typescript-eslint-chinese/rules/no-explicit-any"}},p={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:3},{value:"When Not To Use It",id:"when-not-to-use-it",level:2},{value:"Related To",id:"related-to",level:2}],f={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"no-empty-interface"},(0,i.kt)("inlineCode",{parentName:"h1"},"no-empty-interface")),(0,i.kt)("p",null,"Disallows the declaration of empty interfaces."),(0,i.kt)("p",null,"An empty interface is equivalent to its supertype. If the interface does not implement a supertype, then\nthe interface is equivalent to an empty object (",(0,i.kt)("inlineCode",{parentName:"p"},"{}"),"). In both cases it can be omitted."),(0,i.kt)("h2",{id:"rule-details"},"Rule Details"),(0,i.kt)("p",null,"This rule aims to ensure that only meaningful interfaces are declared in the code."),(0,i.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// an empty interface\ninterface Foo {}\n\n// an interface with only one supertype (Bar === Foo)\ninterface Bar extends Foo {}\n\n// an interface with an empty list of supertypes\ninterface Baz {}\n")),(0,i.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// an interface with any number of members\ninterface Foo {\n  name: string;\n}\n\n// same as above\ninterface Bar {\n  age: number;\n}\n\n// an interface with more than one supertype\n// in this case the interface can be used as a replacement of a union type.\ninterface Baz extends Foo, Bar {}\n")),(0,i.kt)("h3",{id:"options"},"Options"),(0,i.kt)("p",null,"This rule accepts a single object option with the following default configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "@typescript-eslint/no-empty-interface": [\n    "error",\n    {\n      "allowSingleExtends": false\n    }\n  ]\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allowSingleExtends: true")," will silence warnings about extending a single interface without adding additional members")),(0,i.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,i.kt)("p",null,"If you don't care about having empty/meaningless interfaces, then you will not need this rule."),(0,i.kt)("h2",{id:"related-to"},"Related To"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"TSLint: ",(0,i.kt)("a",{parentName:"li",href:"https://palantir.github.io/tslint/rules/no-empty-interface/"},"no-empty-interface"))))}m.isMDXComponent=!0}}]);