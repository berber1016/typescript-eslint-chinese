"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[6412],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),f=a,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9514:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=t(3117),a=t(102),o=(t(7294),t(3905)),i=["components"],l={},s="no-inferrable-types",c={unversionedId:"no-inferrable-types",id:"no-inferrable-types",title:"no-inferrable-types",description:"Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean.",source:"@site/rules/no-inferrable-types.md",sourceDirName:".",slug:"/no-inferrable-types",permalink:"/typescript-eslint-chinese/rules/no-inferrable-types",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"no-implied-eval",permalink:"/typescript-eslint-chinese/rules/no-implied-eval"},next:{title:"no-invalid-this",permalink:"/typescript-eslint-chinese/rules/no-invalid-this"}},p={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"Options",id:"options",level:2},{value:"Default",id:"default",level:3},{value:"\u274c Incorrect",id:"-incorrect",level:4},{value:"\u2705 Correct",id:"-correct",level:4},{value:"<code>ignoreParameters</code>",id:"ignoreparameters",level:3},{value:"<code>ignoreProperties</code>",id:"ignoreproperties",level:3},{value:"When Not To Use It",id:"when-not-to-use-it",level:2},{value:"Further Reading",id:"further-reading",level:2},{value:"Related To",id:"related-to",level:2}],d={toc:u};function f(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"no-inferrable-types"},(0,o.kt)("inlineCode",{parentName:"h1"},"no-inferrable-types")),(0,o.kt)("p",null,"Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean."),(0,o.kt)("p",null,"Explicit types where they can be easily inferred may add unnecessary verbosity."),(0,o.kt)("h2",{id:"rule-details"},"Rule Details"),(0,o.kt)("p",null,"This rule disallows explicit type declarations on parameters, variables\nand properties where the type can be easily inferred from its value."),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("p",null,"This rule accepts the following options:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface Options {\n  ignoreParameters?: boolean;\n  ignoreProperties?: boolean;\n}\n")),(0,o.kt)("h3",{id:"default"},"Default"),(0,o.kt)("p",null,"The default options are:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "ignoreParameters": false,\n  "ignoreProperties": false\n}\n')),(0,o.kt)("p",null,"With these options, the following patterns are:"),(0,o.kt)("h4",{id:"-incorrect"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const a: bigint = 10n;\nconst a: bigint = -10n;\nconst a: bigint = BigInt(10);\nconst a: bigint = -BigInt(10);\nconst a: boolean = false;\nconst a: boolean = true;\nconst a: boolean = Boolean(null);\nconst a: boolean = !0;\nconst a: number = 10;\nconst a: number = +10;\nconst a: number = -10;\nconst a: number = Number("1");\nconst a: number = +Number("1");\nconst a: number = -Number("1");\nconst a: number = Infinity;\nconst a: number = +Infinity;\nconst a: number = -Infinity;\nconst a: number = NaN;\nconst a: number = +NaN;\nconst a: number = -NaN;\nconst a: null = null;\nconst a: RegExp = /a/;\nconst a: RegExp = RegExp("a");\nconst a: RegExp = new RegExp("a");\nconst a: string = "str";\nconst a: string = `str`;\nconst a: string = String(1);\nconst a: symbol = Symbol("a");\nconst a: undefined = undefined;\nconst a: undefined = void someValue;\n\nclass Foo {\n  prop: number = 5;\n}\n\nfunction fn(a: number = 5, b: boolean = true) {}\n')),(0,o.kt)("h4",{id:"-correct"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const a = 10n;\nconst a = -10n;\nconst a = BigInt(10);\nconst a = -BigInt(10);\nconst a = false;\nconst a = true;\nconst a = Boolean(null);\nconst a = !0;\nconst a = 10;\nconst a = +10;\nconst a = -10;\nconst a = Number("1");\nconst a = +Number("1");\nconst a = -Number("1");\nconst a = Infinity;\nconst a = +Infinity;\nconst a = -Infinity;\nconst a = NaN;\nconst a = +NaN;\nconst a = -NaN;\nconst a = null;\nconst a = /a/;\nconst a = RegExp("a");\nconst a = new RegExp("a");\nconst a = "str";\nconst a = `str`;\nconst a = String(1);\nconst a = Symbol("a");\nconst a = undefined;\nconst a = void someValue;\n\nclass Foo {\n  prop = 5;\n}\n\nfunction fn(a = 5, b = true) {}\n\nfunction fn(a: number, b: boolean, c: string) {}\n')),(0,o.kt)("h3",{id:"ignoreparameters"},(0,o.kt)("inlineCode",{parentName:"h3"},"ignoreParameters")),(0,o.kt)("p",null,"When set to true, the following pattern is considered valid:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function foo(a: number = 5, b: boolean = true) {\n  // ...\n}\n")),(0,o.kt)("h3",{id:"ignoreproperties"},(0,o.kt)("inlineCode",{parentName:"h3"},"ignoreProperties")),(0,o.kt)("p",null,"When set to true, the following pattern is considered valid:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  prop: number = 5;\n}\n")),(0,o.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,o.kt)("p",null,"If you do not want to enforce inferred types."),(0,o.kt)("h2",{id:"further-reading"},"Further Reading"),(0,o.kt)("p",null,"TypeScript ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/type-inference.html"},"Inference")),(0,o.kt)("h2",{id:"related-to"},"Related To"),(0,o.kt)("p",null,"TSLint: ",(0,o.kt)("a",{parentName:"p",href:"https://palantir.github.io/tslint/rules/no-inferrable-types/"},"no-inferrable-types")))}f.isMDXComponent=!0}}]);