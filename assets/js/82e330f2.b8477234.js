"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[9307],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,y=d["".concat(i,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(y,l(l({ref:t},u),{},{components:n})):a.createElement(y,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7252:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var a=n(3117),r=n(102),o=(n(7294),n(3905)),l=["components"],s={},i="no-extraneous-class",c={unversionedId:"no-extraneous-class",id:"no-extraneous-class",title:"no-extraneous-class",description:"Disallows classes used as namespaces.",source:"@site/rules/no-extraneous-class.md",sourceDirName:".",slug:"/no-extraneous-class",permalink:"/typescript-eslint-chinese/rules/no-extraneous-class",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"no-extra-semi",permalink:"/typescript-eslint-chinese/rules/no-extra-semi"},next:{title:"no-floating-promises",permalink:"/typescript-eslint-chinese/rules/no-floating-promises"}},u={},p=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Alternatives",id:"alternatives",level:2},{value:"Individual Exports (Recommended)",id:"individual-exports-recommended",level:3},{value:"\u274c Incorrect",id:"-incorrect-1",level:4},{value:"\u2705 Correct",id:"-correct-1",level:4},{value:"Namespace Imports (Not Recommended)",id:"namespace-imports-not-recommended",level:3},{value:"\u274c Incorrect",id:"-incorrect-2",level:4},{value:"\u26a0\ufe0f Namespace Imports",id:"\ufe0f-namespace-imports",level:4},{value:"\u2705 Standalone Imports",id:"-standalone-imports",level:4},{value:"Notes on Mutating Variables",id:"notes-on-mutating-variables",level:3},{value:"\u274c Incorrect",id:"-incorrect-3",level:4},{value:"\u2705 Correct",id:"-correct-2",level:4},{value:"Options",id:"options",level:2},{value:"<code>allowConstructorOnly</code>",id:"allowconstructoronly",level:3},{value:"\u274c Incorrect",id:"-incorrect-4",level:4},{value:"\u2705 Correct",id:"-correct-3",level:4},{value:"<code>allowEmpty</code>",id:"allowempty",level:3},{value:"\u274c Incorrect",id:"-incorrect-5",level:4},{value:"\u2705 Correct",id:"-correct-4",level:4},{value:"<code>allowStaticOnly</code>",id:"allowstaticonly",level:3},{value:"\u274c Incorrect",id:"-incorrect-6",level:4},{value:"\u2705 Correct",id:"-correct-5",level:4},{value:"<code>allowWithDecorator</code>",id:"allowwithdecorator",level:3},{value:"\u274c Incorrect",id:"-incorrect-7",level:4},{value:"\u2705 Correct",id:"-correct-6",level:4},{value:"When Not To Use It",id:"when-not-to-use-it",level:2},{value:"Related To",id:"related-to",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"no-extraneous-class"},(0,o.kt)("inlineCode",{parentName:"h1"},"no-extraneous-class")),(0,o.kt)("p",null,"Disallows classes used as namespaces."),(0,o.kt)("p",null,"This rule warns when a class has no non-static members, such as for a class used exclusively as a static namespace."),(0,o.kt)("h2",{id:"rule-details"},"Rule Details"),(0,o.kt)("p",null,"Users who come from a ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Object-oriented_programming"},"OOP")," paradigm may wrap their utility functions in an extra class, instead of putting them at the top level of an ECMAScript module.\nDoing so is generally unnecessary in JavaScript and TypeScript projects."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Wrapper classes add extra cognitive complexity to code without adding any structural improvements",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Whatever would be put on them, such as utility functions, are already organized by virtue of being in a module."),(0,o.kt)("li",{parentName:"ul"},"As an alternative, you can always ",(0,o.kt)("inlineCode",{parentName:"li"},"import * as ...")," the module to get all of them in a single object."))),(0,o.kt)("li",{parentName:"ul"},"IDEs can't provide as good suggestions for static class or namespace imported properties when you start typing property names"),(0,o.kt)("li",{parentName:"ul"},"It's more difficult to statically analyze code for unused variables, etc. when they're all on the class (see: ",(0,o.kt)("a",{parentName:"li",href:"https://effectivetypescript.com/2020/10/20/tsprune"},"Finding dead code (and dead types) in TypeScript"),").")),(0,o.kt)("p",null,"This rule also flags classes that have only a constructor and no fields.\nThose classes can generally be replaced with a standalone function."),(0,o.kt)("p",null,"Examples of code for this rule:"),(0,o.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'class StaticConstants {\n  static readonly version = 42;\n\n  static isProduction() {\n    return process.env.NODE_ENV === "production";\n  }\n}\n\nclass HelloWorldLogger {\n  constructor() {\n    console.log("Hello, world!");\n  }\n}\n')),(0,o.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'export const version = 42;\n\nexport function isProduction() {\n  return process.env.NODE_ENV === "production";\n}\n\nfunction logHelloWorld() {\n  console.log("Hello, world!");\n}\n')),(0,o.kt)("h2",{id:"alternatives"},"Alternatives"),(0,o.kt)("h3",{id:"individual-exports-recommended"},"Individual Exports (Recommended)"),(0,o.kt)("p",null,"Instead of using a static utility class we recommend you individually export the utilities from your module."),(0,o.kt)("h4",{id:"-incorrect-1"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class Utilities {\n  static util1() {\n    return Utilities.util3();\n  }\n\n  static util2() {\n    /* ... */\n  }\n\n  static util3() {\n    /* ... */\n  }\n}\n")),(0,o.kt)("h4",{id:"-correct-1"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export function util1() {\n  return util3();\n}\n\nexport function util2() {\n  /* ... */\n}\n\nexport function util3() {\n  /* ... */\n}\n")),(0,o.kt)("h3",{id:"namespace-imports-not-recommended"},"Namespace Imports (Not Recommended)"),(0,o.kt)("p",null,"If you strongly prefer to have all constructs from a module available as properties of a single object, you can ",(0,o.kt)("inlineCode",{parentName:"p"},"import * as"),' the module.\nThis is known as a "namespace import".\nNamespace imports are sometimes preferable because they keep all properties nested and don\'t need to be changed as you start or stop using various properties from the module.'),(0,o.kt)("p",null,"However, namespace imports are impacted by these downsides:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"They also don't play as well with tree shaking in modern bundlers"),(0,o.kt)("li",{parentName:"ul"},"They require a name prefix before each property's usage")),(0,o.kt)("h4",{id:"-incorrect-2"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// utilities.ts\nexport class Utilities {\n  static sayHello() {\n    console.log("Hello, world!");\n  }\n}\n\n// consumers.ts\nimport { Utilities } from "./utilities";\n\nUtilities.sayHello();\n')),(0,o.kt)("h4",{id:"\ufe0f-namespace-imports"},"\u26a0\ufe0f Namespace Imports"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// utilities.ts\nexport function sayHello() {\n  console.log("Hello, world!");\n}\n\n// consumers.ts\nimport * as utilities from "./utilities";\n\nutilities.sayHello();\n')),(0,o.kt)("h4",{id:"-standalone-imports"},"\u2705 Standalone Imports"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// utilities.ts\nexport function sayHello() {\n  console.log("Hello, world!");\n}\n\n// consumers.ts\nimport { sayHello } from "./utilities";\n\nsayHello();\n')),(0,o.kt)("h3",{id:"notes-on-mutating-variables"},"Notes on Mutating Variables"),(0,o.kt)("p",null,"One case you need to be careful of is exporting mutable variables.\nWhile class properties can be mutated externally, exported variables are always constant.\nThis means that importers can only ever read the first value they are assigned and cannot write to the variables."),(0,o.kt)("p",null,"Needing to write to an exported variable is very rare and is generally considered a code smell.\nIf you do need it you can accomplish it using getter and setter functions:"),(0,o.kt)("h4",{id:"-incorrect-3"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class Utilities {\n  static mutableCount = 1;\n\n  static incrementCount() {\n    Utilities.mutableCount += 1;\n  }\n}\n")),(0,o.kt)("h4",{id:"-correct-2"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"let mutableCount = 1;\n\nexport function getMutableCount() {\n  return mutableField;\n}\n\nexport function incrementCount() {\n  mutableField += 1;\n}\n")),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("p",null,"This rule accepts a single object option."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type Options = {\n  // allow extraneous classes if they only contain a constructor\n  allowConstructorOnly?: boolean;\n  // allow extraneous classes if they have no body (i.e. are empty)\n  allowEmpty?: boolean;\n  // allow extraneous classes if they only contain static members\n  allowStaticOnly?: boolean;\n  // allow extraneous classes if they have a decorator\n  allowWithDecorator?: boolean;\n};\n\nconst defaultOptions: Options = {\n  allowConstructorOnly: false,\n  allowEmpty: false,\n  allowStaticOnly: false,\n  allowWithDecorator: false,\n};\n")),(0,o.kt)("p",null,"This rule normally bans classes that are empty (have no constructor or fields).\nThe rule's options each add an exemption for a specific type of class."),(0,o.kt)("h3",{id:"allowconstructoronly"},(0,o.kt)("inlineCode",{parentName:"h3"},"allowConstructorOnly")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"allowConstructorOnly")," adds an exemption for classes that have only a constructor and no fields."),(0,o.kt)("h4",{id:"-incorrect-4"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class NoFields {}\n")),(0,o.kt)("h4",{id:"-correct-3"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'class NoFields {\n  constructor() {\n    console.log("Hello, world!");\n  }\n}\n')),(0,o.kt)("h3",{id:"allowempty"},(0,o.kt)("inlineCode",{parentName:"h3"},"allowEmpty")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"allowEmpty")," option adds an exemption for classes that are entirely empty."),(0,o.kt)("h4",{id:"-incorrect-5"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'class NoFields {\n  constructor() {\n    console.log("Hello, world!");\n  }\n}\n')),(0,o.kt)("h4",{id:"-correct-4"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class NoFields {}\n")),(0,o.kt)("h3",{id:"allowstaticonly"},(0,o.kt)("inlineCode",{parentName:"h3"},"allowStaticOnly")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"allowStaticOnly")," option adds an exemption for classes that only contain static members."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"We strongly recommend against the ",(0,o.kt)("inlineCode",{parentName:"p"},"allowStaticOnly")," exemption.\nIt works against this rule's primary purpose of discouraging classes used only for static members.")),(0,o.kt)("h4",{id:"-incorrect-6"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class EmptyClass {}\n")),(0,o.kt)("h4",{id:"-correct-5"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class NotEmptyClass {\n  static version = 42;\n}\n")),(0,o.kt)("h3",{id:"allowwithdecorator"},(0,o.kt)("inlineCode",{parentName:"h3"},"allowWithDecorator")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"allowWithDecorator")," option adds an exemption for classes that contain a member decorated with a ",(0,o.kt)("inlineCode",{parentName:"p"},"@")," decorator."),(0,o.kt)("h4",{id:"-incorrect-7"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Constants {\n  static readonly version = 42;\n}\n")),(0,o.kt)("h4",{id:"-correct-6"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Constants {\n  @logOnRead()\n  static readonly version = 42;\n}\n")),(0,o.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,o.kt)("p",null,"You can disable this rule if you are unable -or unwilling- to switch off using classes as namespaces."),(0,o.kt)("h2",{id:"related-to"},"Related To"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://palantir.github.io/tslint/rules/no-unnecessary-class/"},(0,o.kt)("inlineCode",{parentName:"a"},"no-unnecessary-class"))," from TSLint"))}m.isMDXComponent=!0}}]);