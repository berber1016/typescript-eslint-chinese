"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[9507],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return y}});var n=r(7294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var o=n.createContext({}),c=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,l=e.mdxType,a=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),y=l,m=u["".concat(o,".").concat(y)]||u[y]||d[y]||a;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function y(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=r.length,i=new Array(a);i[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:l,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},950:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return y},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var n=r(3117),l=r(102),a=(r(7294),r(3905)),i=["components"],s={},o="class-literal-property-style",c={unversionedId:"class-literal-property-style",id:"class-literal-property-style",title:"class-literal-property-style",description:"Enforces that literals on classes are exposed in a consistent style.",source:"@site/rules/class-literal-property-style.md",sourceDirName:".",slug:"/class-literal-property-style",permalink:"/typescript-eslint-chinese/rules/class-literal-property-style",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"camelcase",permalink:"/typescript-eslint-chinese/rules/camelcase"},next:{title:"comma-dangle",permalink:"/typescript-eslint-chinese/rules/comma-dangle"}},p={},d=[{value:"Rule Details",id:"rule-details",level:2},{value:"The <code>fields</code> style",id:"the-fields-style",level:3},{value:"\u274c Incorrect",id:"-incorrect",level:4},{value:"\u2705 Correct",id:"-correct",level:4},{value:"The <code>getters</code> style",id:"the-getters-style",level:3},{value:"\u274c Incorrect",id:"-incorrect-1",level:4},{value:"\u2705 Correct",id:"-correct-1",level:4},{value:"When Not To Use It",id:"when-not-to-use-it",level:2}],u={toc:d};function y(e){var t=e.components,r=(0,l.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"class-literal-property-style"},(0,a.kt)("inlineCode",{parentName:"h1"},"class-literal-property-style")),(0,a.kt)("p",null,"Enforces that literals on classes are exposed in a consistent style."),(0,a.kt)("p",null,"When writing TypeScript applications, it's typically safe to store literal values on classes using fields with the ",(0,a.kt)("inlineCode",{parentName:"p"},"readonly")," modifier to prevent them from being reassigned.\nWhen writing TypeScript libraries that could be used by JavaScript users however, it's typically safer to expose these literals using ",(0,a.kt)("inlineCode",{parentName:"p"},"getter"),"s, since the ",(0,a.kt)("inlineCode",{parentName:"p"},"readonly")," modifier is enforced at compile type."),(0,a.kt)("h2",{id:"rule-details"},"Rule Details"),(0,a.kt)("p",null,"This rule aims to ensure that literals exposed by classes are done so consistently, in one of the two style described above.\nBy default this rule prefers the ",(0,a.kt)("inlineCode",{parentName:"p"},"fields")," style as it means JS doesn't have to setup & teardown a function closure."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"This rule only checks for constant ",(0,a.kt)("em",{parentName:"p"},"literal")," values (string, template string, number, bigint, boolean, regexp, null). It does not check objects or arrays, because a readonly field behaves differently to a getter in those cases. It also does not check functions, as it is a common pattern to use readonly fields with arrow function values as auto-bound methods.\nThis is because these types can be mutated and carry with them more complex implications about their usage.")),(0,a.kt)("h3",{id:"the-fields-style"},"The ",(0,a.kt)("inlineCode",{parentName:"h3"},"fields")," style"),(0,a.kt)("p",null,"This style checks for any getter methods that return literal values, and requires them to be defined using fields with the ",(0,a.kt)("inlineCode",{parentName:"p"},"readonly")," modifier instead."),(0,a.kt)("p",null,"Examples of code with the ",(0,a.kt)("inlineCode",{parentName:"p"},"fields")," style:"),(0,a.kt)("h4",{id:"-incorrect"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/* eslint @typescript-eslint/class-literal-property-style: ["error", "fields"] */\n\nclass Mx {\n  public static get myField1() {\n    return 1;\n  }\n\n  private get ["myField2"]() {\n    return "hello world";\n  }\n}\n')),(0,a.kt)("h4",{id:"-correct"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/* eslint @typescript-eslint/class-literal-property-style: ["error", "fields"] */\n\nclass Mx {\n  public readonly myField1 = 1;\n\n  // not a literal\n  public readonly myField2 = [1, 2, 3];\n\n  private readonly ["myField3"] = "hello world";\n\n  public get myField4() {\n    return `hello from ${window.location.href}`;\n  }\n}\n')),(0,a.kt)("h3",{id:"the-getters-style"},"The ",(0,a.kt)("inlineCode",{parentName:"h3"},"getters")," style"),(0,a.kt)("p",null,"This style checks for any ",(0,a.kt)("inlineCode",{parentName:"p"},"readonly")," fields that are assigned literal values, and requires them to be defined as getters instead.\nThis style pairs well with the ",(0,a.kt)("a",{parentName:"p",href:"/typescript-eslint-chinese/rules/prefer-readonly"},(0,a.kt)("inlineCode",{parentName:"a"},"@typescript-eslint/prefer-readonly"))," rule,\nas it will identify fields that can be ",(0,a.kt)("inlineCode",{parentName:"p"},"readonly"),", and thus should be made into getters."),(0,a.kt)("p",null,"Examples of code with the ",(0,a.kt)("inlineCode",{parentName:"p"},"getters")," style:"),(0,a.kt)("h4",{id:"-incorrect-1"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/* eslint @typescript-eslint/class-literal-property-style: ["error", "getters"] */\n\nclass Mx {\n  readonly myField1 = 1;\n  readonly myField2 = `hello world`;\n  private readonly myField3 = "hello world";\n}\n')),(0,a.kt)("h4",{id:"-correct-1"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/* eslint @typescript-eslint/class-literal-property-style: ["error", "getters"] */\n\nclass Mx {\n  // no readonly modifier\n  public myField1 = "hello";\n\n  // not a literal\n  public readonly myField2 = [1, 2, 3];\n\n  public static get myField3() {\n    return 1;\n  }\n\n  private get ["myField4"]() {\n    return "hello world";\n  }\n}\n')),(0,a.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,a.kt)("p",null,"When you have no strong preference, or do not wish to enforce a particular style\nfor how literal values are exposed by your classes."))}y.isMDXComponent=!0}}]);