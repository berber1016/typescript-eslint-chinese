"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[2071],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(g,a(a({ref:t},c),{},{components:n})):r.createElement(g,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8256:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=n(3117),o=n(102),i=(n(7294),n(3905)),a=["components"],l={},s="no-base-to-string",p={unversionedId:"no-base-to-string",id:"no-base-to-string",title:"no-base-to-string",description:"Requires .toString() to only be called on objects which provide useful information when stringified.",source:"@site/rules/no-base-to-string.md",sourceDirName:".",slug:"/no-base-to-string",permalink:"/typescript-eslint-chinese/rules/no-base-to-string",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"no-array-constructor",permalink:"/typescript-eslint-chinese/rules/no-array-constructor"},next:{title:"no-confusing-non-null-assertion",permalink:"/typescript-eslint-chinese/rules/no-confusing-non-null-assertion"}},c={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"<code>ignoredTypeNames</code>",id:"ignoredtypenames",level:3},{value:"When Not To Use It",id:"when-not-to-use-it",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"no-base-to-string"},(0,i.kt)("inlineCode",{parentName:"h1"},"no-base-to-string")),(0,i.kt)("p",null,"Requires ",(0,i.kt)("inlineCode",{parentName:"p"},".toString()")," to only be called on objects which provide useful information when stringified."),(0,i.kt)("p",null,"JavaScript will call ",(0,i.kt)("inlineCode",{parentName:"p"},"toString()")," on an object when it is converted to a string, such as when ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," adding to a string or in ",(0,i.kt)("inlineCode",{parentName:"p"},"${}")," template literals."),(0,i.kt)("p",null,"The default Object ",(0,i.kt)("inlineCode",{parentName:"p"},".toString()")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},'"[object Object]"'),", so this rule requires stringified objects define a more useful ",(0,i.kt)("inlineCode",{parentName:"p"},".toString()")," method."),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"Function")," provides its own ",(0,i.kt)("inlineCode",{parentName:"p"},".toString()")," that returns the function's code.\nFunctions are not flagged by this rule."),(0,i.kt)("p",null,"This rule has some overlap with ",(0,i.kt)("a",{parentName:"p",href:"/typescript-eslint-chinese/rules/restrict-plus-operands"},(0,i.kt)("inlineCode",{parentName:"a"},"restrict-plus-operands"))," and ",(0,i.kt)("a",{parentName:"p",href:"/typescript-eslint-chinese/rules/restrict-template-expressions"},(0,i.kt)("inlineCode",{parentName:"a"},"restrict-template-expressions")),"."),(0,i.kt)("h2",{id:"rule-details"},"Rule Details"),(0,i.kt)("p",null,"This rule prevents accidentally defaulting to the base Object ",(0,i.kt)("inlineCode",{parentName:"p"},".toString()")," method."),(0,i.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// Passing an object or class instance to string concatenation:\n"" + {};\n\nclass MyClass {}\nconst value = new MyClass();\nvalue + "";\n\n// Interpolation and manual .toString() calls too:\n`Value: ${value}`;\n({}.toString());\n')),(0,i.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// These types all have useful .toString()s\n"Text" + true;\n`Value: ${123}`;\n`Arrays too: ${[1, 2, 3]}`;\n(() => {}).toString();\n\n// Defining a custom .toString class is considered acceptable\nclass CustomToString {\n  toString() {\n    return "Hello, world!";\n  }\n}\n`Value: ${new CustomToString()}`;\n\nconst literalWithToString = {\n  toString: () => "Hello, world!",\n};\n\n`Value: ${literalWithToString}`;\n')),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'type Options = {\n  ignoredTypeNames?: string[];\n};\n\nconst defaultOptions: Options = {\n  ignoredTypeNames: ["RegExp"],\n};\n')),(0,i.kt)("h3",{id:"ignoredtypenames"},(0,i.kt)("inlineCode",{parentName:"h3"},"ignoredTypeNames")),(0,i.kt)("p",null,"A string array of type names to ignore, this is useful for types missing ",(0,i.kt)("inlineCode",{parentName:"p"},"toString()")," (but actually has ",(0,i.kt)("inlineCode",{parentName:"p"},"toString()"),").\nThere are some types missing ",(0,i.kt)("inlineCode",{parentName:"p"},"toString()")," in old version TypeScript, like ",(0,i.kt)("inlineCode",{parentName:"p"},"RegExp"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"URL"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"URLSearchParams")," etc."),(0,i.kt)("p",null,"The following patterns are considered correct with the default options ",(0,i.kt)("inlineCode",{parentName:"p"},'{ ignoredTypeNames: ["RegExp"] }'),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'`${/regex/}`;\n"" + /regex/;\n/regex/.toString();\nlet value = /regex/;\nvalue.toString();\nlet text = `${value}`;\n')),(0,i.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,i.kt)("p",null,"If you don't mind ",(0,i.kt)("inlineCode",{parentName:"p"},'"[object Object]"')," in your strings, then you will not need this rule."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString"},(0,i.kt)("inlineCode",{parentName:"a"},"Object.prototype.toString()")," MDN documentation"))))}m.isMDXComponent=!0}}]);