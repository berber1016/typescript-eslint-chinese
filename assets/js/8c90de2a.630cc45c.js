"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[3062],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,m=p["".concat(s,".").concat(h)]||p[h]||d[h]||i;return n?o.createElement(m,a(a({ref:t},u),{},{components:n})):o.createElement(m,a({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2867:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var o=n(3117),r=n(102),i=(n(7294),n(3905)),a=["components"],l={},s="unbound-method",c={unversionedId:"unbound-method",id:"unbound-method",title:"unbound-method",description:"Enforces unbound methods are called with their expected scope.",source:"@site/rules/unbound-method.md",sourceDirName:".",slug:"/unbound-method",permalink:"/typescript-eslint-chinese/rules/unbound-method",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657186506,formattedLastUpdatedAt:"2022\u5e747\u67087\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"typedef",permalink:"/typescript-eslint-chinese/rules/typedef"},next:{title:"unified-signatures",permalink:"/typescript-eslint-chinese/rules/unified-signatures"}},u={},d=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"<code>ignoreStatic</code>",id:"ignorestatic",level:3},{value:"Example",id:"example",level:2},{value:"When Not To Use It",id:"when-not-to-use-it",level:2},{value:"Related To",id:"related-to",level:2}],p={toc:d};function h(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"unbound-method"},(0,i.kt)("inlineCode",{parentName:"h1"},"unbound-method")),(0,i.kt)("p",null,"Enforces unbound methods are called with their expected scope."),(0,i.kt)("p",null,"Warns when a method is used outside of a method call."),(0,i.kt)("p",null,"Class functions don't preserve the class scope when passed as standalone variables."),(0,i.kt)("p",null,"If your function does not access ",(0,i.kt)("inlineCode",{parentName:"p"},"this"),", ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/functions.html#declaring-this-in-a-function"},"you can annotate it with ",(0,i.kt)("inlineCode",{parentName:"a"},"this: void")),", or consider using an arrow function instead."),(0,i.kt)("p",null,"If you're working with ",(0,i.kt)("inlineCode",{parentName:"p"},"jest"),", you can use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jest-community/eslint-plugin-jest/blob/main/docs/rules/unbound-method.md"},(0,i.kt)("inlineCode",{parentName:"a"},"eslint-plugin-jest"),"'s version of this rule")," to lint your test files, which knows when it's ok to pass an unbound method to ",(0,i.kt)("inlineCode",{parentName:"p"},"expect")," calls."),(0,i.kt)("h2",{id:"rule-details"},"Rule Details"),(0,i.kt)("p",null,"Examples of code for this rule"),(0,i.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class MyClass {\n  public log(): void {\n    console.log(this);\n  }\n}\n\nconst instance = new MyClass();\n\n// This logs the global scope (`window`/`global`), not the class instance\nconst myLog = instance.log;\nmyLog();\n\n// This log might later be called with an incorrect scope\nconst { log } = instance;\n\n// arith.double may refer to `this` internally\nconst arith = {\n  double(x: number): number {\n    return x * 2;\n  },\n};\nconst { double } = arith;\n")),(0,i.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class MyClass {\n  public logUnbound(): void {\n    console.log(this);\n  }\n\n  public logBound = () => console.log(this);\n}\n\nconst instance = new MyClass();\n\n// logBound will always be bound with the correct scope\nconst { logBound } = instance;\nlogBound();\n\n// .bind and lambdas will also add a correct scope\nconst dotBindLog = instance.logBound.bind(instance);\nconst innerLog = () => instance.logBound();\n\n// arith.double explicitly declares that it does not refer to `this` internally\nconst arith = {\n  double(this: void, x: number): number {\n    return x * 2;\n  },\n};\nconst { double } = arith;\n")),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("p",null,"The rule accepts an options object with the following property:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ignoreStatic")," to not check whether ",(0,i.kt)("inlineCode",{parentName:"li"},"static")," methods are correctly bound")),(0,i.kt)("h3",{id:"ignorestatic"},(0,i.kt)("inlineCode",{parentName:"h3"},"ignoreStatic")),(0,i.kt)("p",null,"Examples of ",(0,i.kt)("strong",{parentName:"p"},"correct")," code for this rule with ",(0,i.kt)("inlineCode",{parentName:"p"},"{ ignoreStatic: true }"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class OtherClass {\n  static log() {\n    console.log(OtherClass);\n  }\n}\n\n// With `ignoreStatic`, statics are assumed to not rely on a particular scope\nconst { log } = OtherClass;\n\nlog();\n")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "@typescript-eslint/unbound-method": [\n    "error",\n    {\n      "ignoreStatic": true\n    }\n  ]\n}\n')),(0,i.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,i.kt)("p",null,"If your code intentionally waits to bind methods after use, such as by passing a ",(0,i.kt)("inlineCode",{parentName:"p"},"scope: this")," along with the method, you can disable this rule."),(0,i.kt)("p",null,"If you're wanting to use ",(0,i.kt)("inlineCode",{parentName:"p"},"toBeCalled")," and similar matches in ",(0,i.kt)("inlineCode",{parentName:"p"},"jest")," tests, you can disable this rule for your test files in favor of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jest-community/eslint-plugin-jest/blob/main/docs/rules/unbound-method.md"},(0,i.kt)("inlineCode",{parentName:"a"},"eslint-plugin-jest"),"'s version of this rule"),"."),(0,i.kt)("h2",{id:"related-to"},"Related To"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"TSLint: ",(0,i.kt)("a",{parentName:"li",href:"https://palantir.github.io/tslint/rules/no-unbound-method/"},"no-unbound-method"))))}h.isMDXComponent=!0}}]);