"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[8373],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,l(l({ref:t},p),{},{components:n})):r.createElement(h,l({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,l[1]=a;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7354:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return u}});var r=n(3117),i=n(102),o=(n(7294),n(3905)),l=["components"],a={},c="ban-ts-comment",s={unversionedId:"ban-ts-comment",id:"ban-ts-comment",title:"ban-ts-comment",description:"Disallows @ts- comments or requires descriptions after directive.",source:"@site/rules/ban-ts-comment.md",sourceDirName:".",slug:"/ban-ts-comment",permalink:"/typescript-eslint-chinese/rules/ban-ts-comment",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"await-thenable",permalink:"/typescript-eslint-chinese/rules/await-thenable"},next:{title:"ban-tslint-comment",permalink:"/typescript-eslint-chinese/rules/ban-tslint-comment"}},p={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"<code>ts-expect-error</code>, <code>ts-ignore</code>, <code>ts-nocheck</code>, <code>ts-check</code> directives",id:"ts-expect-error-ts-ignore-ts-nocheck-ts-check-directives",level:3},{value:"\u274c Incorrect",id:"-incorrect",level:4},{value:"\u2705 Correct",id:"-correct",level:4},{value:"<code>allow-with-description</code>",id:"allow-with-description",level:3},{value:"\u274c Incorrect",id:"-incorrect-1",level:4},{value:"\u2705 Correct",id:"-correct-1",level:4},{value:"<code>minimumDescriptionLength</code>",id:"minimumdescriptionlength",level:3},{value:"\u274c Incorrect",id:"-incorrect-2",level:4},{value:"\u2705 Correct",id:"-correct-2",level:4},{value:"When Not To Use It",id:"when-not-to-use-it",level:2},{value:"Further Reading",id:"further-reading",level:2},{value:"Related To",id:"related-to",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ban-ts-comment"},(0,o.kt)("inlineCode",{parentName:"h1"},"ban-ts-comment")),(0,o.kt)("p",null,"Disallows ",(0,o.kt)("inlineCode",{parentName:"p"},"@ts-<directive>")," comments or requires descriptions after directive."),(0,o.kt)("p",null,"TypeScript provides several directive comments that can be used to alter how it processes files.\nUsing these to suppress TypeScript Compiler Errors reduces the effectiveness of TypeScript overall."),(0,o.kt)("p",null,"The directive comments supported by TypeScript are:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// @ts-expect-error\n// @ts-ignore\n// @ts-nocheck\n// @ts-check\n")),(0,o.kt)("h2",{id:"rule-details"},"Rule Details"),(0,o.kt)("p",null,"This rule lets you set which directive comments you want to allow in your codebase.\nBy default, only ",(0,o.kt)("inlineCode",{parentName:"p"},"@ts-check")," is allowed, as it enables rather than suppresses errors."),(0,o.kt)("p",null,"The configuration looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface Options {\n  "ts-expect-error"?: boolean | "allow-with-description";\n  "ts-ignore"?: boolean | "allow-with-description";\n  "ts-nocheck"?: boolean | "allow-with-description";\n  "ts-check"?: boolean | "allow-with-description";\n  minimumDescriptionLength?: number;\n}\n\nconst defaultOptions: Options = {\n  "ts-expect-error": "allow-with-description",\n  "ts-ignore": true,\n  "ts-nocheck": true,\n  "ts-check": false,\n  minimumDescriptionLength: 3,\n};\n')),(0,o.kt)("h3",{id:"ts-expect-error-ts-ignore-ts-nocheck-ts-check-directives"},(0,o.kt)("inlineCode",{parentName:"h3"},"ts-expect-error"),", ",(0,o.kt)("inlineCode",{parentName:"h3"},"ts-ignore"),", ",(0,o.kt)("inlineCode",{parentName:"h3"},"ts-nocheck"),", ",(0,o.kt)("inlineCode",{parentName:"h3"},"ts-check")," directives"),(0,o.kt)("p",null,"A value of ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," for a particular directive means that this rule will report if it finds any usage of said directive."),(0,o.kt)("h4",{id:"-incorrect"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'if (false) {\n  // @ts-ignore: Unreachable code error\n  console.log("hello");\n}\nif (false) {\n  /*\n  @ts-ignore: Unreachable code error\n  */\n  console.log("hello");\n}\n')),(0,o.kt)("h4",{id:"-correct"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'if (false) {\n  // Compiler warns about unreachable code error\n  console.log("hello");\n}\n')),(0,o.kt)("h3",{id:"allow-with-description"},(0,o.kt)("inlineCode",{parentName:"h3"},"allow-with-description")),(0,o.kt)("p",null,"A value of ",(0,o.kt)("inlineCode",{parentName:"p"},"'allow-with-description'")," for a particular directive means that this rule will report if it finds a directive that does not have a description following the directive (on the same line)."),(0,o.kt)("p",null,"For example, with ",(0,o.kt)("inlineCode",{parentName:"p"},"{ 'ts-expect-error': 'allow-with-description' }"),":"),(0,o.kt)("h4",{id:"-incorrect-1"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'if (false) {\n  // @ts-expect-error\n  console.log("hello");\n}\nif (false) {\n  /* @ts-expect-error */\n  console.log("hello");\n}\n')),(0,o.kt)("h4",{id:"-correct-1"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'if (false) {\n  // @ts-expect-error: Unreachable code error\n  console.log("hello");\n}\nif (false) {\n  /*\n  @ts-expect-error: Unreachable code error\n  */\n  console.log("hello");\n}\n')),(0,o.kt)("h3",{id:"minimumdescriptionlength"},(0,o.kt)("inlineCode",{parentName:"h3"},"minimumDescriptionLength")),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"minimumDescriptionLength")," to set a minimum length for descriptions when using the ",(0,o.kt)("inlineCode",{parentName:"p"},"allow-with-description")," option for a directive."),(0,o.kt)("p",null,"For example, with ",(0,o.kt)("inlineCode",{parentName:"p"},"{ 'ts-expect-error': 'allow-with-description', minimumDescriptionLength: 10 }")," the following pattern is:"),(0,o.kt)("h4",{id:"-incorrect-2"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'if (false) {\n  // @ts-expect-error: TODO\n  console.log("hello");\n}\n')),(0,o.kt)("h4",{id:"-correct-2"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'if (false) {\n  // @ts-expect-error The rationale for this override is described in issue #1337 on GitLab\n  console.log("hello");\n}\n')),(0,o.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,o.kt)("p",null,"If you want to use all of the TypeScript directives."),(0,o.kt)("h2",{id:"further-reading"},"Further Reading"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"TypeScript ",(0,o.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html"},"Type Checking JavaScript Files"))),(0,o.kt)("h2",{id:"related-to"},"Related To"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"TSLint: ",(0,o.kt)("a",{parentName:"li",href:"https://palantir.github.io/tslint/rules/ban-ts-ignore/"},"ban-ts-ignore"))))}m.isMDXComponent=!0}}]);