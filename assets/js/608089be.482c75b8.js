"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[9352],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return t?r.createElement(f,l(l({ref:n},p),{},{components:t})):r.createElement(f,l({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6208:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=t(3117),a=t(102),o=(t(7294),t(3905)),l=["components"],i={},s="no-redeclare",c={unversionedId:"no-redeclare",id:"no-redeclare",title:"no-redeclare",description:"Disallows variable redeclaration.",source:"@site/rules/no-redeclare.md",sourceDirName:".",slug:"/no-redeclare",permalink:"/typescript-eslint-chinese/rules/no-redeclare",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657186506,formattedLastUpdatedAt:"2022\u5e747\u67087\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"no-parameter-properties",permalink:"/typescript-eslint-chinese/rules/no-parameter-properties"},next:{title:"no-redundant-type-constituents",permalink:"/typescript-eslint-chinese/rules/no-redundant-type-constituents"}},p={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"How to Use",id:"how-to-use",level:2},{value:"Options",id:"options",level:2},{value:"<code>ignoreDeclarationMerge</code>",id:"ignoredeclarationmerge",level:3}],d={toc:u};function m(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"no-redeclare"},(0,o.kt)("inlineCode",{parentName:"h1"},"no-redeclare")),(0,o.kt)("p",null,"Disallows variable redeclaration."),(0,o.kt)("h2",{id:"rule-details"},"Rule Details"),(0,o.kt)("p",null,"This rule extends the base ",(0,o.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-redeclare"},(0,o.kt)("inlineCode",{parentName:"a"},"eslint/no-redeclare"))," rule.\nIt adds support for TypeScript function overloads, and declaration merging."),(0,o.kt)("h2",{id:"how-to-use"},"How to Use"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  // note you must disable the base rule as it can report incorrect errors\n  "no-redeclare": "off",\n  "@typescript-eslint/no-redeclare": ["error"]\n}\n')),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-redeclare#options"},(0,o.kt)("inlineCode",{parentName:"a"},"eslint/no-redeclare")," options"),".\nThis rule adds the following options:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface Options extends BaseNoRedeclareOptions {\n  ignoreDeclarationMerge?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseNoRedeclareDefaultOptions,\n  ignoreDeclarationMerge: true,\n};\n")),(0,o.kt)("h3",{id:"ignoredeclarationmerge"},(0,o.kt)("inlineCode",{parentName:"h3"},"ignoreDeclarationMerge")),(0,o.kt)("p",null,"When set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", the rule will ignore declaration merges between the following sets:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"interface + interface"),(0,o.kt)("li",{parentName:"ul"},"namespace + namespace"),(0,o.kt)("li",{parentName:"ul"},"class + interface"),(0,o.kt)("li",{parentName:"ul"},"class + namespace"),(0,o.kt)("li",{parentName:"ul"},"class + interface + namespace"),(0,o.kt)("li",{parentName:"ul"},"function + namespace"),(0,o.kt)("li",{parentName:"ul"},"enum + namespace")),(0,o.kt)("p",null,"Examples of ",(0,o.kt)("strong",{parentName:"p"},"correct")," code with ",(0,o.kt)("inlineCode",{parentName:"p"},"{ ignoreDeclarationMerge: true }"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface A {\n  prop1: 1;\n}\ninterface A {\n  prop2: 2;\n}\n\nnamespace Foo {\n  export const a = 1;\n}\nnamespace Foo {\n  export const b = 2;\n}\n\nclass Bar {}\nnamespace Bar {}\n\nfunction Baz() {}\nnamespace Baz {}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," Even with this option set to true, this rule will report if you name a type and a variable the same name. ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"This is intentional")),".\nDeclaring a variable and a type and a variable the same is usually an accident, and it can lead to hard-to-understand code.\nIf you have a rare case where you're intentionally naming a type the same name as a variable, use a disable comment. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type something = string;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- intentionally naming the variable the same as the type\nconst something = 2;\n")),(0,o.kt)("sup",null,(0,o.kt)("p",null,"Taken with \u2764\ufe0f ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/eslint/eslint/blob/main/docs/rules/no-redeclare.md"},"from ESLint core"))))}m.isMDXComponent=!0}}]);