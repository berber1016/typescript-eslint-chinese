"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[2580],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),l=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=i,g=u["".concat(o,".").concat(m)]||u[m]||p[m]||a;return n?r.createElement(g,s(s({ref:t},d),{},{components:n})):r.createElement(g,s({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=u;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:i,s[1]=c;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9e3:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return p}});var r=n(3117),i=n(102),a=(n(7294),n(3905)),s=["components"],c={},o="member-ordering",l={unversionedId:"member-ordering",id:"member-ordering",title:"member-ordering",description:"Requires a consistent member declaration order.",source:"@site/rules/member-ordering.md",sourceDirName:".",slug:"/member-ordering",permalink:"/typescript-eslint-chinese/rules/member-ordering",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"member-delimiter-style",permalink:"/typescript-eslint-chinese/rules/member-delimiter-style"},next:{title:"method-signature-style",permalink:"/typescript-eslint-chinese/rules/method-signature-style"}},d={},p=[{value:"Rule Details",id:"rule-details",level:2},{value:"Options",id:"options",level:2},{value:"Groups",id:"groups",level:3},{value:"Default configuration",id:"default-configuration",level:3},{value:"Examples",id:"examples",level:2},{value:"General Order on All Constructs",id:"general-order-on-all-constructs",level:3},{value:"\u274c Incorrect",id:"-incorrect",level:4},{value:"\u2705 Correct",id:"-correct",level:4},{value:"Classes",id:"classes",level:3},{value:"Public Instance Methods Before Public Static Fields",id:"public-instance-methods-before-public-static-fields",level:4},{value:"\u274c Incorrect",id:"-incorrect-1",level:5},{value:"\u2705 Correct",id:"-correct-1",level:5},{value:"Static Fields Before Instance Fields",id:"static-fields-before-instance-fields",level:4},{value:"\u274c Incorrect",id:"-incorrect-2",level:5},{value:"\u2705 Correct",id:"-correct-2",level:5},{value:"Class Declarations",id:"class-declarations",level:4},{value:"\u274c Incorrect",id:"-incorrect-3",level:5},{value:"\u2705 Correct",id:"-correct-3",level:5},{value:"Class Expressions",id:"class-expressions",level:4},{value:"\u274c Incorrect",id:"-incorrect-4",level:5},{value:"\u2705 Correct",id:"-correct-4",level:5},{value:"Interfaces",id:"interfaces",level:3},{value:"\u274c Incorrect",id:"-incorrect-5",level:4},{value:"\u2705 Correct",id:"-correct-5",level:4},{value:"Type Literals",id:"type-literals",level:3},{value:"\u274c Incorrect",id:"-incorrect-6",level:4},{value:"\u2705 Correct",id:"-correct-6",level:4},{value:"Sorting Options",id:"sorting-options",level:3},{value:"Sorting Alphabetically Within Member Groups",id:"sorting-alphabetically-within-member-groups",level:4},{value:"\u274c Incorrect",id:"-incorrect-7",level:5},{value:"\u2705 Correct",id:"-correct-7",level:5},{value:"Sorting Alphabetically Case Insensitive Within Member Groups",id:"sorting-alphabetically-case-insensitive-within-member-groups",level:4},{value:"\u274c Incorrect",id:"-incorrect-8",level:5},{value:"\u2705 Correct",id:"-correct-8",level:5},{value:"Sorting Alphabetically Ignoring Member Groups",id:"sorting-alphabetically-ignoring-member-groups",level:4},{value:"\u274c Incorrect",id:"-incorrect-9",level:5},{value:"\u2705 Correct",id:"-correct-9",level:5},{value:"All Supported Options",id:"all-supported-options",level:2},{value:"Member Types (Granular Form)",id:"member-types-granular-form",level:3},{value:"Member Group Types (With Accessibility, Ignoring Scope)",id:"member-group-types-with-accessibility-ignoring-scope",level:3},{value:"Member Group Types (With Accessibility and a Decorator)",id:"member-group-types-with-accessibility-and-a-decorator",level:3},{value:"Member Group Types (With Scope, Ignoring Accessibility)",id:"member-group-types-with-scope-ignoring-accessibility",level:3},{value:"Member Group Types (With Scope and Accessibility)",id:"member-group-types-with-scope-and-accessibility",level:3},{value:"Grouping Different Member Types at the Same Rank",id:"grouping-different-member-types-at-the-same-rank",level:3},{value:"When Not To Use It",id:"when-not-to-use-it",level:2},{value:"Related To",id:"related-to",level:2}],u={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"member-ordering"},(0,a.kt)("inlineCode",{parentName:"h1"},"member-ordering")),(0,a.kt)("p",null,"Requires a consistent member declaration order."),(0,a.kt)("p",null,"A consistent ordering of fields, methods and constructors can make interfaces, type literals, classes and class expressions easier to read, navigate, and edit."),(0,a.kt)("h2",{id:"rule-details"},"Rule Details"),(0,a.kt)("p",null,"This rule aims to standardize the way class declarations, class expressions, interfaces and type literals are structured and ordered."),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'interface Options {\n  default?: OrderConfig;\n  classes?: OrderConfig;\n  classExpressions?: OrderConfig;\n  interfaces?: OrderConfig;\n  typeLiterals?: OrderConfig;\n}\n\ntype OrderConfig = MemberType[] | SortedOrderConfig | "never";\n\ninterface SortedOrderConfig {\n  memberTypes?: MemberType[] | "never";\n  order: "alphabetically" | "alphabetically-case-insensitive" | "as-written";\n}\n\n// See below for the more specific MemberType strings\ntype MemberType = string | string[];\n')),(0,a.kt)("p",null,"You can configure ",(0,a.kt)("inlineCode",{parentName:"p"},"OrderConfig")," options for:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"default")),": all constructs (used as a fallback)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"classes")),"?: override ordering specifically for classes"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"classExpressions")),"?: override ordering specifically for class expressions"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"interfaces")),"?: override ordering specifically for interfaces"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"typeLiterals")),"?: override ordering specifically for type literals")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"OrderConfig")," settings for each kind of construct may configure sorting on one or both two levels:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"memberType")),": organizing on member type groups such as methods vs. properties"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"order")),": organizing based on member names, such as alphabetically")),(0,a.kt)("h3",{id:"groups"},"Groups"),(0,a.kt)("p",null,"You can define many different groups based on different attributes of members.\nThe supported member attributes are, in order:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Accessibility")," (",(0,a.kt)("inlineCode",{parentName:"li"},"'public' | 'protected' | 'private'"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Decoration")," (",(0,a.kt)("inlineCode",{parentName:"li"},"'decorated'"),"): Whether the member has an explicit accessibility decorator"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Kind")," (",(0,a.kt)("inlineCode",{parentName:"li"},"'call-signature' | 'constructor' | 'field' | 'get' | 'method' | 'set' | 'signature'"),")")),(0,a.kt)("p",null,"Member attributes may be joined with a ",(0,a.kt)("inlineCode",{parentName:"p"},"'-'")," to combine into more specific groups.\nFor example, ",(0,a.kt)("inlineCode",{parentName:"p"},"'public-field'")," would come before ",(0,a.kt)("inlineCode",{parentName:"p"},"'private-field'"),"."),(0,a.kt)("h3",{id:"default-configuration"},"Default configuration"),(0,a.kt)("p",null,"The default configuration looks as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "default": [\n    // Index signature\n    "signature",\n\n    // Fields\n    "public-static-field",\n    "protected-static-field",\n    "private-static-field",\n\n    "public-decorated-field",\n    "protected-decorated-field",\n    "private-decorated-field",\n\n    "public-instance-field",\n    "protected-instance-field",\n    "private-instance-field",\n\n    "public-abstract-field",\n    "protected-abstract-field",\n    "private-abstract-field",\n\n    "public-field",\n    "protected-field",\n    "private-field",\n\n    "static-field",\n    "instance-field",\n    "abstract-field",\n\n    "decorated-field",\n\n    "field",\n\n    // Constructors\n    "public-constructor",\n    "protected-constructor",\n    "private-constructor",\n\n    "constructor",\n\n    // Getters\n    "public-static-get",\n    "protected-static-get",\n    "private-static-get",\n\n    "public-decorated-get",\n    "protected-decorated-get",\n    "private-decorated-get",\n\n    "public-instance-get",\n    "protected-instance-get",\n    "private-instance-get",\n\n    "public-abstract-get",\n    "protected-abstract-get",\n    "private-abstract-get",\n\n    "public-get",\n    "protected-get",\n    "private-get",\n\n    "static-get",\n    "instance-get",\n    "abstract-get",\n\n    "decorated-get",\n\n    "get",\n\n    // Setters\n    "public-static-set",\n    "protected-static-set",\n    "private-static-set",\n\n    "public-decorated-set",\n    "protected-decorated-set",\n    "private-decorated-set",\n\n    "public-instance-set",\n    "protected-instance-set",\n    "private-instance-set",\n\n    "public-abstract-set",\n    "protected-abstract-set",\n    "private-abstract-set",\n\n    "public-set",\n    "protected-set",\n    "private-set",\n\n    "static-set",\n    "instance-set",\n    "abstract-set",\n\n    "decorated-set",\n\n    "set",\n\n    // Methods\n    "public-static-method",\n    "protected-static-method",\n    "private-static-method",\n\n    "public-decorated-method",\n    "protected-decorated-method",\n    "private-decorated-method",\n\n    "public-instance-method",\n    "protected-instance-method",\n    "private-instance-method",\n\n    "public-abstract-method",\n    "protected-abstract-method",\n    "private-abstract-method",\n\n    "public-method",\n    "protected-method",\n    "private-method",\n\n    "static-method",\n    "instance-method",\n    "abstract-method",\n\n    "decorated-method",\n\n    "method"\n  ]\n}\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The default configuration contains member group types which contain other member types.\nThis is intentional to provide better error messages.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"By default, the members are not sorted.\nIf you want to sort them alphabetically, you have to provide a custom configuration.")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"general-order-on-all-constructs"},"General Order on All Constructs"),(0,a.kt)("p",null,"This config specifies the order for all constructs.\nIt ignores member types other than signatures, methods, constructors, and fields.\nIt also ignores accessibility and scope."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'// .eslintrc.json\n{\n  "rules": {\n    "@typescript-eslint/member-ordering": [\n      "error",\n      { "default": ["signature", "method", "constructor", "field"] }\n    ]\n  }\n}\n')),(0,a.kt)("h4",{id:"-incorrect"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface Foo {\n  B: string; // -> field\n\n  new (); // -> constructor\n\n  A(): void; // -> method\n\n  [Z: string]: any; // -> signature\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type Foo = {\n  B: string; // -> field\n\n  // no constructor\n\n  A(): void; // -> method\n\n  // no signature\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n\n  constructor() {} // -> constructor\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  [Z: string]: any; // -> signature\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const Foo = class {\n  private C: string; // -> field\n  public D: string; // -> field\n\n  constructor() {} // -> constructor\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  [Z: string]: any; // -> signature\n\n  protected static E: string; // -> field\n};\n")),(0,a.kt)("h4",{id:"-correct"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface Foo {\n  [Z: string]: any; // -> signature\n\n  A(): void; // -> method\n\n  new (); // -> constructor\n\n  B: string; // -> field\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type Foo = {\n  // no signature\n\n  A(): void; // -> method\n\n  // no constructor\n\n  B: string; // -> field\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  [Z: string]: any; // -> signature\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  constructor() {} // -> constructor\n\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const Foo = class {\n  [Z: string]: any; // -> signature\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  constructor() {} // -> constructor\n\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n};\n")),(0,a.kt)("h3",{id:"classes"},"Classes"),(0,a.kt)("h4",{id:"public-instance-methods-before-public-static-fields"},"Public Instance Methods Before Public Static Fields"),(0,a.kt)("p",null,"This config specifies that public instance methods should come first before public static fields.\nEverything else can be placed anywhere.\nIt doesn't apply to interfaces or type literals as accessibility and scope are not part of them."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'// .eslintrc.json\n{\n  "rules": {\n    "@typescript-eslint/member-ordering": [\n      "error",\n      { "default": ["public-instance-method", "public-static-field"] }\n    ]\n  }\n}\n')),(0,a.kt)("h5",{id:"-incorrect-1"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  private C: string; // (irrelevant)\n\n  public D: string; // (irrelevant)\n\n  public static E: string; // -> public static field\n\n  constructor() {} // (irrelevant)\n\n  public static A(): void {} // (irrelevant)\n\n  [Z: string]: any; // (irrelevant)\n\n  public B(): void {} // -> public instance method\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const Foo = class {\n  private C: string; // (irrelevant)\n\n  [Z: string]: any; // (irrelevant)\n\n  public static E: string; // -> public static field\n\n  public D: string; // (irrelevant)\n\n  constructor() {} // (irrelevant)\n\n  public static A(): void {} // (irrelevant)\n\n  public B(): void {} // -> public instance method\n};\n")),(0,a.kt)("h5",{id:"-correct-1"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  public B(): void {} // -> public instance method\n\n  private C: string; // (irrelevant)\n\n  public D: string; // (irrelevant)\n\n  public static E: string; // -> public static field\n\n  constructor() {} // (irrelevant)\n\n  public static A(): void {} // (irrelevant)\n\n  [Z: string]: any; // (irrelevant)\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const Foo = class {\n  public B(): void {} // -> public instance method\n\n  private C: string; // (irrelevant)\n\n  [Z: string]: any; // (irrelevant)\n\n  public D: string; // (irrelevant)\n\n  constructor() {} // (irrelevant)\n\n  public static A(): void {} // (irrelevant)\n\n  public static E: string; // -> public static field\n};\n")),(0,a.kt)("h4",{id:"static-fields-before-instance-fields"},"Static Fields Before Instance Fields"),(0,a.kt)("p",null,"This config specifies that static fields should come before instance fields, with public static fields first.\nIt doesn't apply to interfaces or type literals as accessibility and scope are not part of them."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "rules": {\n    "@typescript-eslint/member-ordering": [\n      "error",\n      { "default": ["public-static-field", "static-field", "instance-field"] }\n    ]\n  }\n}\n')),(0,a.kt)("h5",{id:"-incorrect-2"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  private E: string; // -> instance field\n\n  private static B: string; // -> static field\n  protected static C: string; // -> static field\n  private static D: string; // -> static field\n\n  public static A: string; // -> public static field\n\n  [Z: string]: any; // (irrelevant)\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const foo = class {\n  public T(): void {} // method (irrelevant)\n\n  private static B: string; // -> static field\n\n  constructor() {} // constructor (irrelevant)\n\n  private E: string; // -> instance field\n\n  protected static C: string; // -> static field\n  private static D: string; // -> static field\n\n  [Z: string]: any; // signature (irrelevant)\n\n  public static A: string; // -> public static field\n};\n")),(0,a.kt)("h5",{id:"-correct-2"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  public static A: string; // -> public static field\n\n  private static B: string; // -> static field\n  protected static C: string; // -> static field\n  private static D: string; // -> static field\n\n  private E: string; // -> instance field\n\n  [Z: string]: any; // (irrelevant)\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const foo = class {\n  [Z: string]: any; // -> signature (irrelevant)\n\n  public static A: string; // -> public static field\n\n  constructor() {} // -> constructor (irrelevant)\n\n  private static B: string; // -> static field\n  protected static C: string; // -> static field\n  private static D: string; // -> static field\n\n  private E: string; // -> instance field\n\n  public T(): void {} // -> method (irrelevant)\n};\n")),(0,a.kt)("h4",{id:"class-declarations"},"Class Declarations"),(0,a.kt)("p",null,"This config only specifies an order for classes: methods, then the constructor, then fields.\nIt does not apply to class expressions (use ",(0,a.kt)("inlineCode",{parentName:"p"},"classExpressions")," for them).\nDefault settings will be used for class declarations and all other syntax constructs other than class declarations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'// .eslintrc.json\n{\n  "rules": {\n    "@typescript-eslint/member-ordering": [\n      "error",\n      { "classes": ["method", "constructor", "field"] }\n    ]\n  }\n}\n')),(0,a.kt)("h5",{id:"-incorrect-3"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n\n  constructor() {} // -> constructor\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n}\n")),(0,a.kt)("h5",{id:"-correct-3"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  constructor() {} // -> constructor\n\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n}\n")),(0,a.kt)("h4",{id:"class-expressions"},"Class Expressions"),(0,a.kt)("p",null,"This config only specifies an order for classes expressions: methods, then the constructor, then fields.\nIt does not apply to class declarations (use ",(0,a.kt)("inlineCode",{parentName:"p"},"classes")," for them).\nDefault settings will be used for class declarations and all other syntax constructs other than class expressions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'// .eslintrc.json\n{\n  "rules": {\n    "@typescript-eslint/member-ordering": [\n      "error",\n      { "classExpressions": ["method", "constructor", "field"] }\n    ]\n  }\n}\n')),(0,a.kt)("h5",{id:"-incorrect-4"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const foo = class {\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n\n  constructor() {} // -> constructor\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n};\n")),(0,a.kt)("h5",{id:"-correct-4"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const foo = class {\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  constructor() {} // -> constructor\n\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n};\n")),(0,a.kt)("h3",{id:"interfaces"},"Interfaces"),(0,a.kt)("p",null,"This config only specifies an order for interfaces: signatures, then methods, then constructors, then fields.\nIt does not apply to type literals (use ",(0,a.kt)("inlineCode",{parentName:"p"},"typeLiterals")," for them).\nDefault settings will be used for type literals and all other syntax constructs other than class expressions."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"These member types are the only ones allowed for ",(0,a.kt)("inlineCode",{parentName:"p"},"interfaces"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'// .eslintrc.json\n{\n  "rules": {\n    "@typescript-eslint/member-ordering": [\n      "error",\n      { "interfaces": ["signature", "method", "constructor", "field"] }\n    ]\n  }\n}\n')),(0,a.kt)("h4",{id:"-incorrect-5"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface Foo {\n  B: string; // -> field\n\n  new (); // -> constructor\n\n  A(): void; // -> method\n\n  [Z: string]: any; // -> signature\n}\n")),(0,a.kt)("h4",{id:"-correct-5"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface Foo {\n  [Z: string]: any; // -> signature\n\n  A(): void; // -> method\n\n  new (); // -> constructor\n\n  B: string; // -> field\n}\n")),(0,a.kt)("h3",{id:"type-literals"},"Type Literals"),(0,a.kt)("p",null,"This config only specifies an order for type literals: signatures, then methods, then constructors, then fields.\nIt does not apply to interfaces (use ",(0,a.kt)("inlineCode",{parentName:"p"},"interfaces")," for them).\nDefault settings will be used for interfaces and all other syntax constructs other than class expressions."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"These member types are the only ones allowed for ",(0,a.kt)("inlineCode",{parentName:"p"},"typeLiterals"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'// .eslintrc.json\n{\n  "rules": {\n    "@typescript-eslint/member-ordering": [\n      "error",\n      { "typeLiterals": ["signature", "method", "constructor", "field"] }\n    ]\n  }\n}\n')),(0,a.kt)("h4",{id:"-incorrect-6"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type Foo = {\n  B: string; // -> field\n\n  A(): void; // -> method\n\n  new (); // -> constructor\n\n  [Z: string]: any; // -> signature\n};\n")),(0,a.kt)("h4",{id:"-correct-6"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type Foo = {\n  [Z: string]: any; // -> signature\n\n  A(): void; // -> method\n\n  new (); // -> constructor\n\n  B: string; // -> field\n};\n")),(0,a.kt)("h3",{id:"sorting-options"},"Sorting Options"),(0,a.kt)("h4",{id:"sorting-alphabetically-within-member-groups"},"Sorting Alphabetically Within Member Groups"),(0,a.kt)("p",null,"This config specifies that within each ",(0,a.kt)("inlineCode",{parentName:"p"},"memberTypes")," group, members are in an alphabetic case-sensitive order.\nYou can copy and paste the default order from ",(0,a.kt)("a",{parentName:"p",href:"#default-configuration"},"Default Configuration"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'// .eslintrc.json\n{\n  "rules": {\n    "@typescript-eslint/member-ordering": [\n      "error",\n      {\n        "default": {\n          "memberTypes": [\n            /* <Default Order> */\n          ],\n          "order": "alphabetically"\n        }\n      }\n    ]\n  }\n}\n')),(0,a.kt)("h5",{id:"-incorrect-7"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface Foo {\n  a: x;\n  B: x;\n  c: x;\n\n  B(): void;\n  c(): void;\n  a(): void;\n}\n")),(0,a.kt)("h5",{id:"-correct-7"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface Foo {\n  B: x;\n  a: x;\n  c: x;\n\n  B(): void;\n  a(): void;\n  c(): void;\n}\n")),(0,a.kt)("h4",{id:"sorting-alphabetically-case-insensitive-within-member-groups"},"Sorting Alphabetically Case Insensitive Within Member Groups"),(0,a.kt)("p",null,"This config specifies that within each ",(0,a.kt)("inlineCode",{parentName:"p"},"memberTypes")," group, members are in an alphabetic case-sensitive order.\nYou can copy and paste the default order from ",(0,a.kt)("a",{parentName:"p",href:"#default-configuration"},"Default Configuration"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'// .eslintrc.json\n{\n  "rules": {\n    "@typescript-eslint/member-ordering": [\n      "error",\n      {\n        "default": {\n          "memberTypes": [\n            /* <Default Order> */\n          ],\n          "order": "alphabetically-case-insensitive"\n        }\n      }\n    ]\n  }\n}\n')),(0,a.kt)("h5",{id:"-incorrect-8"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface Foo {\n  B: x;\n  a: x;\n  c: x;\n\n  B(): void;\n  c(): void;\n  a(): void;\n}\n")),(0,a.kt)("h5",{id:"-correct-8"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface Foo {\n  a: x;\n  B: x;\n  c: x;\n\n  a(): void;\n  B(): void;\n  c(): void;\n}\n")),(0,a.kt)("h4",{id:"sorting-alphabetically-ignoring-member-groups"},"Sorting Alphabetically Ignoring Member Groups"),(0,a.kt)("p",null,"This config specifies that members are all sorted in an alphabetic case-sensitive order.\nIt ignores any member group types completely by specifying ",(0,a.kt)("inlineCode",{parentName:"p"},'"never"')," for ",(0,a.kt)("inlineCode",{parentName:"p"},"memberTypes"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'// .eslintrc.json\n{\n  "rules": {\n    "@typescript-eslint/member-ordering": [\n      "error",\n      { "default": { "memberTypes": "never", "order": "alphabetically" } }\n    ]\n  }\n}\n')),(0,a.kt)("h5",{id:"-incorrect-9"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface Foo {\n  static c = 0;\n  b(): void;\n  a: boolean;\n\n  [a: string]: number; // Order doesn't matter (no sortable identifier)\n  new (): Bar; // Order doesn't matter (no sortable identifier)\n  (): Baz; // Order doesn't matter (no sortable identifier)\n}\n")),(0,a.kt)("h5",{id:"-correct-9"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface Foo {\n  a: boolean;\n  b(): void;\n  static c = 0;\n\n  [a: string]: number; // Order doesn't matter (no sortable identifier)\n  new (): Bar; // Order doesn't matter (no sortable identifier)\n  (): Baz; // Order doesn't matter (no sortable identifier)\n}\n")),(0,a.kt)("h2",{id:"all-supported-options"},"All Supported Options"),(0,a.kt)("h3",{id:"member-types-granular-form"},"Member Types (Granular Form)"),(0,a.kt)("p",null,"There are multiple ways to specify the member types.\nThe most explicit and granular form is the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'[\n  // Index signature\n  "signature",\n\n  // Fields\n  "public-static-field",\n  "protected-static-field",\n  "private-static-field",\n  "public-decorated-field",\n  "protected-decorated-field",\n  "private-decorated-field",\n  "public-instance-field",\n  "protected-instance-field",\n  "private-instance-field",\n  "public-abstract-field",\n  "protected-abstract-field",\n  "private-abstract-field",\n\n  // Constructors\n  "public-constructor",\n  "protected-constructor",\n  "private-constructor",\n\n  // Getters\n  "public-static-get",\n  "protected-static-get",\n  "private-static-get",\n\n  "public-decorated-get",\n  "protected-decorated-get",\n  "private-decorated-get",\n\n  "public-instance-get",\n  "protected-instance-get",\n  "private-instance-get",\n\n  "public-abstract-get",\n  "protected-abstract-get",\n  "private-abstract-get",\n\n  "public-get",\n  "protected-get",\n  "private-get",\n\n  "static-get",\n  "instance-get",\n  "abstract-get",\n\n  "decorated-get",\n\n  "get",\n\n  // Setters\n  "public-static-set",\n  "protected-static-set",\n  "private-static-set",\n\n  "public-decorated-set",\n  "protected-decorated-set",\n  "private-decorated-set",\n\n  "public-instance-set",\n  "protected-instance-set",\n  "private-instance-set",\n\n  "public-abstract-set",\n  "protected-abstract-set",\n  "private-abstract-set",\n\n  "public-set",\n  "protected-set",\n  "private-set",\n\n  "static-set",\n  "instance-set",\n  "abstract-set",\n\n  "decorated-set",\n\n  "set",\n\n  // Methods\n  "public-static-method",\n  "protected-static-method",\n  "private-static-method",\n  "public-decorated-method",\n  "protected-decorated-method",\n  "private-decorated-method",\n  "public-instance-method",\n  "protected-instance-method",\n  "private-instance-method",\n  "public-abstract-method",\n  "protected-abstract-method",\n  "private-abstract-method"\n]\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If you only specify some of the possible types, the non-specified ones can have any particular order.\nThis means that they can be placed before, within or after the specified types and the linter won't complain about it.")),(0,a.kt)("h3",{id:"member-group-types-with-accessibility-ignoring-scope"},"Member Group Types (With Accessibility, Ignoring Scope)"),(0,a.kt)("p",null,"It is also possible to group member types by their accessibility (",(0,a.kt)("inlineCode",{parentName:"p"},"static"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"instance"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"abstract"),"), ignoring their scope."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'[\n  // Index signature\n  // No accessibility for index signature.\n\n  // Fields\n  "public-field", // = ["public-static-field", "public-instance-field"]\n  "protected-field", // = ["protected-static-field", "protected-instance-field"]\n  "private-field", // = ["private-static-field", "private-instance-field"]\n\n  // Constructors\n  // Only the accessibility of constructors is configurable. See below.\n\n  // Getters\n  "public-get", // = ["public-static-get", "public-instance-get"]\n  "protected-get", // = ["protected-static-get", "protected-instance-get"]\n  "private-get", // = ["private-static-get", "private-instance-get"]\n\n  // Setters\n  "public-set", // = ["public-static-set", "public-instance-set"]\n  "protected-set", // = ["protected-static-set", "protected-instance-set"]\n  "private-set", // = ["private-static-set", "private-instance-set"]\n\n  // Methods\n  "public-method", // = ["public-static-method", "public-instance-method"]\n  "protected-method", // = ["protected-static-method", "protected-instance-method"]\n  "private-method" // = ["private-static-method", "private-instance-method"]\n]\n')),(0,a.kt)("h3",{id:"member-group-types-with-accessibility-and-a-decorator"},"Member Group Types (With Accessibility and a Decorator)"),(0,a.kt)("p",null,"It is also possible to group methods or fields with a decorator separately, optionally specifying\ntheir accessibility."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'[\n  // Index signature\n  // No decorators for index signature.\n\n  // Fields\n  "public-decorated-field",\n  "protected-decorated-field",\n  "private-decorated-field",\n\n  "decorated-field", // = ["public-decorated-field", "protected-decorated-field", "private-decorated-field"]\n\n  // Constructors\n  // There are no decorators for constructors.\n\n  // Getters\n  "public-decorated-get",\n  "protected-decorated-get",\n  "private-decorated-get",\n\n  "decorated-get" // = ["public-decorated-get", "protected-decorated-get", "private-decorated-get"]\n\n  // Setters\n  "public-decorated-set",\n  "protected-decorated-set",\n  "private-decorated-set",\n\n  "decorated-set" // = ["public-decorated-set", "protected-decorated-set", "private-decorated-set"]\n\n  // Methods\n  "public-decorated-method",\n  "protected-decorated-method",\n  "private-decorated-method",\n\n  "decorated-method" // = ["public-decorated-method", "protected-decorated-method", "private-decorated-method"]\n]\n')),(0,a.kt)("h3",{id:"member-group-types-with-scope-ignoring-accessibility"},"Member Group Types (With Scope, Ignoring Accessibility)"),(0,a.kt)("p",null,"Another option is to group the member types by their scope (",(0,a.kt)("inlineCode",{parentName:"p"},"public"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"protected"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"private"),"), ignoring their accessibility."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'[\n  // Index signature\n  // No scope for index signature.\n\n  // Fields\n  "static-field", // = ["public-static-field", "protected-static-field", "private-static-field"]\n  "instance-field", // = ["public-instance-field", "protected-instance-field", "private-instance-field"]\n  "abstract-field", // = ["public-abstract-field", "protected-abstract-field", "private-abstract-field"]\n\n  // Constructors\n  "constructor", // = ["public-constructor", "protected-constructor", "private-constructor"]\n\n  // Getters\n  "static-get", // = ["public-static-get", "protected-static-get", "private-static-get"]\n  "instance-get", // = ["public-instance-get", "protected-instance-get", "private-instance-get"]\n  "abstract-get" // = ["public-abstract-get", "protected-abstract-get", "private-abstract-get"]\n\n  // Setters\n  "static-set", // = ["public-static-set", "protected-static-set", "private-static-set"]\n  "instance-set", // = ["public-instance-set", "protected-instance-set", "private-instance-set"]\n  "abstract-set" // = ["public-abstract-set", "protected-abstract-set", "private-abstract-set"]\n\n  // Methods\n  "static-method", // = ["public-static-method", "protected-static-method", "private-static-method"]\n  "instance-method", // = ["public-instance-method", "protected-instance-method", "private-instance-method"]\n  "abstract-method" // = ["public-abstract-method", "protected-abstract-method", "private-abstract-method"]\n]\n')),(0,a.kt)("h3",{id:"member-group-types-with-scope-and-accessibility"},"Member Group Types (With Scope and Accessibility)"),(0,a.kt)("p",null,"The third grouping option is to ignore both scope and accessibility."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'[\n  // Index signature\n  // No grouping for index signature.\n\n  // Fields\n  "field", // = ["public-static-field", "protected-static-field", "private-static-field", "public-instance-field", "protected-instance-field", "private-instance-field",\n  //              "public-abstract-field", "protected-abstract-field", private-abstract-field"]\n\n  // Constructors\n  // Only the accessibility of constructors is configurable.\n\n  // Getters\n  "get" // = ["public-static-get", "protected-static-get", "private-static-get", "public-instance-get", "protected-instance-get", "private-instance-get",\n  //                "public-abstract-get", "protected-abstract-get", "private-abstract-get"]\n\n  // Setters\n  "set" // = ["public-static-set", "protected-static-set", "private-static-set", "public-instance-set", "protected-instance-set", "private-instance-set",\n  //                "public-abstract-set", "protected-abstract-set", "private-abstract-set"]\n\n  // Methods\n  "method" // = ["public-static-method", "protected-static-method", "private-static-method", "public-instance-method", "protected-instance-method", "private-instance-method",\n  //                "public-abstract-method", "protected-abstract-method", "private-abstract-method"]\n]\n')),(0,a.kt)("h3",{id:"grouping-different-member-types-at-the-same-rank"},"Grouping Different Member Types at the Same Rank"),(0,a.kt)("p",null,"It is also possible to group different member types at the same rank."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'[\n  // Index signature\n  "signature",\n\n  // Fields\n  "field",\n\n  // Constructors\n  "constructor",\n\n  // Getters and Setters at the same rank\n  ["get", "set"],\n\n  // Methods\n  "method"\n]\n')),(0,a.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,a.kt)("p",null,"If you don't care about the general order of your members, then you will not need this rule."),(0,a.kt)("h2",{id:"related-to"},"Related To"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"TSLint: ",(0,a.kt)("a",{parentName:"li",href:"https://palantir.github.io/tslint/rules/member-ordering/"},"member-ordering"))))}m.isMDXComponent=!0}}]);