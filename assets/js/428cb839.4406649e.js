"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[5305],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=s(n),d=i,y=f["".concat(c,".").concat(d)]||f[d]||u[d]||o;return n?r.createElement(y,a(a({ref:t},p),{},{components:n})):r.createElement(y,a({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2633:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=n(3117),i=n(102),o=(n(7294),n(3905)),a=["components"],l={},c="consistent-type-definitions",s={unversionedId:"consistent-type-definitions",id:"consistent-type-definitions",title:"consistent-type-definitions",description:"Enforces type definitions to consistently use either interface or type.",source:"@site/rules/consistent-type-definitions.md",sourceDirName:".",slug:"/consistent-type-definitions",permalink:"/typescript-eslint-chinese/rules/consistent-type-definitions",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657186506,formattedLastUpdatedAt:"2022\u5e747\u67087\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"consistent-type-assertions",permalink:"/typescript-eslint-chinese/rules/consistent-type-assertions"},next:{title:"consistent-type-exports",permalink:"/typescript-eslint-chinese/rules/consistent-type-exports"}},p={},u=[{value:"Options",id:"options",level:2},{value:"<code>interface</code>",id:"interface",level:3},{value:"\u274c Incorrect",id:"-incorrect",level:4},{value:"\u2705 Correct",id:"-correct",level:4},{value:"<code>type</code>",id:"type",level:3},{value:"\u274c Incorrect",id:"-incorrect-1",level:4},{value:"\u2705 Correct",id:"-correct-1",level:4},{value:"When Not To Use It",id:"when-not-to-use-it",level:2},{value:"Related To",id:"related-to",level:2}],f={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"consistent-type-definitions"},(0,o.kt)("inlineCode",{parentName:"h1"},"consistent-type-definitions")),(0,o.kt)("p",null,"Enforces type definitions to consistently use either ",(0,o.kt)("inlineCode",{parentName:"p"},"interface")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"type"),"."),(0,o.kt)("p",null,"There are two ways to define a type."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// type alias\ntype T1 = {\n  a: string;\n  b: number;\n};\n\n// interface keyword\ninterface T2 {\n  a: string;\n  b: number;\n}\n")),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("p",null,"This rule accepts one string option:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"interface"'),": enforce using ",(0,o.kt)("inlineCode",{parentName:"li"},"interface"),"s for object type definitions."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"type"'),": enforce using ",(0,o.kt)("inlineCode",{parentName:"li"},"type"),"s for object type definitions.")),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  // Use type for object definitions\n  "@typescript-eslint/consistent-type-definitions": ["error", "type"]\n}\n')),(0,o.kt)("h3",{id:"interface"},(0,o.kt)("inlineCode",{parentName:"h3"},"interface")),(0,o.kt)("p",null,"Examples of code with ",(0,o.kt)("inlineCode",{parentName:"p"},"interface")," option."),(0,o.kt)("h4",{id:"-incorrect"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type T = { x: number };\n")),(0,o.kt)("h4",{id:"-correct"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type T = string;\ntype Foo = string | {};\n\ninterface T {\n  x: number;\n}\n")),(0,o.kt)("h3",{id:"type"},(0,o.kt)("inlineCode",{parentName:"h3"},"type")),(0,o.kt)("p",null,"Examples of code with ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," option."),(0,o.kt)("h4",{id:"-incorrect-1"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface T {\n  x: number;\n}\n")),(0,o.kt)("h4",{id:"-correct-1"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type T = { x: number };\n")),(0,o.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,o.kt)("p",null,"If you specifically want to use an interface or type literal for stylistic reasons, you can disable this rule."),(0,o.kt)("h2",{id:"related-to"},"Related To"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"TSLint: ",(0,o.kt)("a",{parentName:"li",href:"https://palantir.github.io/tslint/rules/interface-over-type-literal/"},"interface-over-type-literal"))))}d.isMDXComponent=!0}}]);