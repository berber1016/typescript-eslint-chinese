"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[5631],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(t),d=o,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return t?r.createElement(g,i(i({ref:n},c),{},{components:t})):r.createElement(g,i({ref:n},c))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5252:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=t(3117),o=t(102),a=(t(7294),t(3905)),i=["components"],s={},l="no-magic-numbers",p={unversionedId:"no-magic-numbers",id:"no-magic-numbers",title:"no-magic-numbers",description:"Disallows magic numbers.",source:"@site/rules/no-magic-numbers.md",sourceDirName:".",slug:"/no-magic-numbers",permalink:"/typescript-eslint-chinese/rules/no-magic-numbers",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657186506,formattedLastUpdatedAt:"2022\u5e747\u67087\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"no-loss-of-precision",permalink:"/typescript-eslint-chinese/rules/no-loss-of-precision"},next:{title:"no-meaningless-void-operator",permalink:"/typescript-eslint-chinese/rules/no-meaningless-void-operator"}},c={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"How to Use",id:"how-to-use",level:2},{value:"Options",id:"options",level:2},{value:"<code>ignoreEnums</code>",id:"ignoreenums",level:3},{value:"<code>ignoreNumericLiteralTypes</code>",id:"ignorenumericliteraltypes",level:3},{value:"<code>ignoreReadonlyClassProperties</code>",id:"ignorereadonlyclassproperties",level:3},{value:"<code>ignoreTypeIndexes</code>",id:"ignoretypeindexes",level:3}],m={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"no-magic-numbers"},(0,a.kt)("inlineCode",{parentName:"h1"},"no-magic-numbers")),(0,a.kt)("p",null,"Disallows magic numbers."),(0,a.kt)("h2",{id:"rule-details"},"Rule Details"),(0,a.kt)("p",null,"This rule extends the base ",(0,a.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-magic-numbers"},(0,a.kt)("inlineCode",{parentName:"a"},"eslint/no-magic-numbers"))," rule.\nIt adds support for:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"numeric literal types (",(0,a.kt)("inlineCode",{parentName:"li"},"type T = 1"),"),"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"enum")," members (",(0,a.kt)("inlineCode",{parentName:"li"},"enum Foo { bar = 1 }"),"),"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"readonly")," class properties (",(0,a.kt)("inlineCode",{parentName:"li"},"class Foo { readonly bar = 1 }"),").")),(0,a.kt)("h2",{id:"how-to-use"},"How to Use"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  // note you must disable the base rule as it can report incorrect errors\n  "no-magic-numbers": "off",\n  "@typescript-eslint/no-magic-numbers": [\n    "error",\n    {\n      /* options */\n    }\n  ]\n}\n')),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-magic-numbers#options"},(0,a.kt)("inlineCode",{parentName:"a"},"eslint/no-magic-numbers")," options"),".\nThis rule adds the following options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface Options extends BaseNoMagicNumbersOptions {\n  ignoreEnums?: boolean;\n  ignoreNumericLiteralTypes?: boolean;\n  ignoreReadonlyClassProperties?: boolean;\n  ignoreTypeIndexes?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseNoMagicNumbersDefaultOptions,\n  ignoreEnums: false,\n  ignoreNumericLiteralTypes: false,\n  ignoreReadonlyClassProperties: false,\n  ignoreTypeIndexes: false,\n};\n")),(0,a.kt)("h3",{id:"ignoreenums"},(0,a.kt)("inlineCode",{parentName:"h3"},"ignoreEnums")),(0,a.kt)("p",null,"A boolean to specify if enums used in TypeScript are considered okay. ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.kt)("p",null,"Examples of ",(0,a.kt)("strong",{parentName:"p"},"incorrect")," code for the ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "ignoreEnums": false }')," option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/*eslint @typescript-eslint/no-magic-numbers: ["error", { "ignoreEnums": false }]*/\n\nenum foo {\n  SECOND = 1000,\n}\n')),(0,a.kt)("p",null,"Examples of ",(0,a.kt)("strong",{parentName:"p"},"correct")," code for the ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "ignoreEnums": true }')," option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/*eslint @typescript-eslint/no-magic-numbers: ["error", { "ignoreEnums": true }]*/\n\nenum foo {\n  SECOND = 1000,\n}\n')),(0,a.kt)("h3",{id:"ignorenumericliteraltypes"},(0,a.kt)("inlineCode",{parentName:"h3"},"ignoreNumericLiteralTypes")),(0,a.kt)("p",null,"A boolean to specify if numbers used in TypeScript numeric literal types are considered okay. ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.kt)("p",null,"Examples of ",(0,a.kt)("strong",{parentName:"p"},"incorrect")," code for the ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "ignoreNumericLiteralTypes": false }')," option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/*eslint @typescript-eslint/no-magic-numbers: ["error", { "ignoreNumericLiteralTypes": false }]*/\n\ntype SmallPrimes = 2 | 3 | 5 | 7 | 11;\n')),(0,a.kt)("p",null,"Examples of ",(0,a.kt)("strong",{parentName:"p"},"correct")," code for the ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "ignoreNumericLiteralTypes": true }')," option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/*eslint @typescript-eslint/no-magic-numbers: ["error", { "ignoreNumericLiteralTypes": true }]*/\n\ntype SmallPrimes = 2 | 3 | 5 | 7 | 11;\n')),(0,a.kt)("h3",{id:"ignorereadonlyclassproperties"},(0,a.kt)("inlineCode",{parentName:"h3"},"ignoreReadonlyClassProperties")),(0,a.kt)("p",null,"Examples of ",(0,a.kt)("strong",{parentName:"p"},"incorrect")," code for the ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "ignoreReadonlyClassProperties": false }')," option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/*eslint @typescript-eslint/no-magic-numbers: ["error", { "ignoreReadonlyClassProperties": false }]*/\n\nclass Foo {\n  readonly A = 1;\n  readonly B = 2;\n  public static readonly C = 1;\n  static readonly D = 1;\n}\n')),(0,a.kt)("p",null,"Examples of ",(0,a.kt)("strong",{parentName:"p"},"correct")," code for the ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "ignoreReadonlyClassProperties": true }')," option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/*eslint @typescript-eslint/no-magic-numbers: ["error", { "ignoreReadonlyClassProperties": true }]*/\n\nclass Foo {\n  readonly A = 1;\n  readonly B = 2;\n  public static readonly C = 1;\n  static readonly D = 1;\n}\n')),(0,a.kt)("h3",{id:"ignoretypeindexes"},(0,a.kt)("inlineCode",{parentName:"h3"},"ignoreTypeIndexes")),(0,a.kt)("p",null,"A boolean to specify if numbers used to index types are okay. ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.kt)("p",null,"Examples of ",(0,a.kt)("strong",{parentName:"p"},"incorrect")," code for the ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "ignoreTypeIndexes": false }')," option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/*eslint @typescript-eslint/no-magic-numbers: ["error", { "ignoreTypeIndexes": false }]*/\n\ntype Foo = Bar[0];\ntype Baz = Parameters<Foo>[2];\n')),(0,a.kt)("p",null,"Examples of ",(0,a.kt)("strong",{parentName:"p"},"correct")," code for the ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "ignoreTypeIndexes": true }')," option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/*eslint @typescript-eslint/no-magic-numbers: ["error", { "ignoreTypeIndexes": true }]*/\n\ntype Foo = Bar[0];\ntype Baz = Parameters<Foo>[2];\n')),(0,a.kt)("sup",null,(0,a.kt)("p",null,"Taken with \u2764\ufe0f ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/eslint/eslint/blob/main/docs/rules/no-magic-numbers.md"},"from ESLint core"))))}d.isMDXComponent=!0}}]);