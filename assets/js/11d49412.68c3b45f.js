"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[5996],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=i.createContext({}),s=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=s(e.components);return i.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(t),m=o,v=c["".concat(p,".").concat(m)]||c[m]||u[m]||r;return t?i.createElement(v,a(a({ref:n},d),{},{components:t})):i.createElement(v,a({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<r;s++)a[s]=t[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6175:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var i=t(3117),o=t(102),r=(t(7294),t(3905)),a=["components"],l={},p="no-invalid-void-type",s={unversionedId:"no-invalid-void-type",id:"no-invalid-void-type",title:"no-invalid-void-type",description:"Disallows void type outside of generic or return types.",source:"@site/rules/no-invalid-void-type.md",sourceDirName:".",slug:"/no-invalid-void-type",permalink:"/typescript-eslint-chinese/rules/no-invalid-void-type",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657186506,formattedLastUpdatedAt:"2022\u5e747\u67087\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"no-invalid-this",permalink:"/typescript-eslint-chinese/rules/no-invalid-this"},next:{title:"no-loop-func",permalink:"/typescript-eslint-chinese/rules/no-loop-func"}},d={},u=[{value:"Rationale",id:"rationale",level:2},{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"<code>allowInGenericTypeArguments</code>",id:"allowingenerictypearguments",level:3},{value:"<code>allowAsThisParameter</code>",id:"allowasthisparameter",level:3},{value:"When Not To Use It",id:"when-not-to-use-it",level:2},{value:"Related To",id:"related-to",level:2}],c={toc:u};function m(e){var n=e.components,t=(0,o.Z)(e,a);return(0,r.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"no-invalid-void-type"},(0,r.kt)("inlineCode",{parentName:"h1"},"no-invalid-void-type")),(0,r.kt)("p",null,"Disallows ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," type outside of generic or return types."),(0,r.kt)("p",null,"Disallows usage of ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," type outside of return types or generic type arguments.\nIf ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," is used as return type, it shouldn\u2019t be a part of intersection/union type with most other types."),(0,r.kt)("h2",{id:"rationale"},"Rationale"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," type means \u201cnothing\u201d or that a function does not return any value,\nin contrast with implicit ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," type which means that a function returns a value ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),".\nSo \u201cnothing\u201d cannot be mixed with any other types, other than ",(0,r.kt)("inlineCode",{parentName:"p"},"never"),", which accepts all types.\nIf you need this - use the ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," type instead."),(0,r.kt)("h2",{id:"rule-details"},"Rule Details"),(0,r.kt)("p",null,"This rule aims to ensure that the ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," type is only used in valid places."),(0,r.kt)("p",null,"Examples of code for this rule:"),(0,r.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type PossibleValues = string | number | void;\ntype MorePossibleValues = string | ((number & any) | (string | void));\n\nfunction logSomething(thing: void) {}\nfunction printArg<T = void>(arg: T) {}\n\nlogAndReturn<void>(undefined);\n\ninterface Interface {\n  lambda: () => void;\n  prop: void;\n}\n\nclass MyClass {\n  private readonly propName: void;\n}\n")),(0,r.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type NoOp = () => void;\n\nfunction noop(): void {}\n\nlet trulyUndefined = void 0;\n\nasync function promiseMeSomething(): Promise<void> {}\n\ntype stillVoid = void | never;\n")),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface Options {\n  allowInGenericTypeArguments?: boolean | string[];\n  allowAsThisParameter?: boolean;\n}\n\nconst defaultOptions: Options = {\n  allowInGenericTypeArguments: true,\n  allowAsThisParameter: false,\n};\n")),(0,r.kt)("h3",{id:"allowingenerictypearguments"},(0,r.kt)("inlineCode",{parentName:"h3"},"allowInGenericTypeArguments")),(0,r.kt)("p",null,"This option lets you control if ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," can be used as a valid value for generic type parameters."),(0,r.kt)("p",null,"Alternatively, you can provide an array of strings which whitelist which types may accept ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," as a generic type parameter."),(0,r.kt)("p",null,"Any types considered valid by this option will be considered valid as part of a union type with ",(0,r.kt)("inlineCode",{parentName:"p"},"void"),"."),(0,r.kt)("p",null,"This option is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," by default."),(0,r.kt)("p",null,"The following patterns are considered warnings with ",(0,r.kt)("inlineCode",{parentName:"p"},"{ allowInGenericTypeArguments: false }"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"logAndReturn<void>(undefined);\n\nlet voidPromise: Promise<void> = new Promise<void>(() => {});\nlet voidMap: Map<string, void> = new Map<string, void>();\n")),(0,r.kt)("p",null,"The following patterns are considered warnings with ",(0,r.kt)("inlineCode",{parentName:"p"},"{ allowInGenericTypeArguments: ['Ex.Mx.Tx'] }"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"logAndReturn<void>(undefined);\n\ntype NotAllowedVoid1 = Mx.Tx<void>;\ntype NotAllowedVoid2 = Tx<void>;\ntype NotAllowedVoid3 = Promise<void>;\n")),(0,r.kt)("p",null,"The following patterns are not considered warnings with ",(0,r.kt)("inlineCode",{parentName:"p"},"{ allowInGenericTypeArguments: ['Ex.Mx.Tx'] }"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type AllowedVoid = Ex.Mx.Tx<void>;\ntype AllowedVoidUnion = void | Ex.Mx.Tx<void>;\n")),(0,r.kt)("h3",{id:"allowasthisparameter"},(0,r.kt)("inlineCode",{parentName:"h3"},"allowAsThisParameter")),(0,r.kt)("p",null,"This option allows specifying a ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," parameter of a function to be ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," when set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),".\nThis pattern can be useful to explicitly label function types that do not use a ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," argument. ",(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters-in-callbacks"},"See the TypeScript docs for more information"),"."),(0,r.kt)("p",null,"This option is ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,r.kt)("p",null,"The following patterns are considered warnings with ",(0,r.kt)("inlineCode",{parentName:"p"},"{ allowAsThisParameter: false }")," but valid with ",(0,r.kt)("inlineCode",{parentName:"p"},"{ allowAsThisParameter: true }"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function doThing(this: void) {}\nclass Example {\n  static helper(this: void) {}\n  callback(this: void) {}\n}\n")),(0,r.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,r.kt)("p",null,"If you don't care about if ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," is used with other types,\nor in invalid places, then you don't need this rule."),(0,r.kt)("h2",{id:"related-to"},"Related To"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"TSLint: ",(0,r.kt)("a",{parentName:"li",href:"https://palantir.github.io/tslint/rules/invalid-void/"},"invalid-void"))))}m.isMDXComponent=!0}}]);