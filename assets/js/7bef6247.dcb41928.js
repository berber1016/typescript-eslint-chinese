"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[6418],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return d}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),l=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},u=function(e){var r=l(e.components);return n.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),y=l(t),d=o,f=y["".concat(s,".").concat(d)]||y[d]||p[d]||a;return t?n.createElement(f,c(c({ref:r},u),{},{components:t})):n.createElement(f,c({ref:r},u))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=y;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=t[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},3192:function(e,r,t){t.r(r),t.d(r,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var n=t(3117),o=t(102),a=(t(7294),t(3905)),c=["components"],i={},s="no-array-constructor",l={unversionedId:"no-array-constructor",id:"no-array-constructor",title:"no-array-constructor",description:"Disallows generic Array constructors.",source:"@site/rules/no-array-constructor.md",sourceDirName:".",slug:"/no-array-constructor",permalink:"/typescript-eslint-chinese/rules/no-array-constructor",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657186506,formattedLastUpdatedAt:"2022\u5e747\u67087\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"naming-convention",permalink:"/typescript-eslint-chinese/rules/naming-convention"},next:{title:"no-base-to-string",permalink:"/typescript-eslint-chinese/rules/no-base-to-string"}},u={},p=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"How to Use",id:"how-to-use",level:2},{value:"Options",id:"options",level:2}],y={toc:p};function d(e){var r=e.components,t=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,n.Z)({},y,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"no-array-constructor"},(0,a.kt)("inlineCode",{parentName:"h1"},"no-array-constructor")),(0,a.kt)("p",null,"Disallows generic ",(0,a.kt)("inlineCode",{parentName:"p"},"Array")," constructors."),(0,a.kt)("h2",{id:"rule-details"},"Rule Details"),(0,a.kt)("p",null,"This rule extends the base ",(0,a.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-array-constructor"},(0,a.kt)("inlineCode",{parentName:"a"},"eslint/no-array-constructor"))," rule.\nIt adds support for the generically typed ",(0,a.kt)("inlineCode",{parentName:"p"},"Array")," constructor (",(0,a.kt)("inlineCode",{parentName:"p"},"new Array<Foo>()"),")."),(0,a.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/*eslint no-array-constructor: "error"*/\n\nArray(0, 1, 2);\nnew Array(0, 1, 2);\n')),(0,a.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/*eslint no-array-constructor: "error"*/\n\nArray<number>(0, 1, 2);\nnew Array<Foo>(x, y, z);\n\nArray(500);\nnew Array(someOtherArray.length);\n')),(0,a.kt)("h2",{id:"how-to-use"},"How to Use"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  // note you must disable the base rule as it can report incorrect errors\n  "no-array-constructor": "off",\n  "@typescript-eslint/no-array-constructor": ["error"]\n}\n')),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-array-constructor#options"},(0,a.kt)("inlineCode",{parentName:"a"},"eslint/no-array-constructor")," options"),"."),(0,a.kt)("sup",null,(0,a.kt)("p",null,"Taken with \u2764\ufe0f ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/eslint/eslint/blob/main/docs/rules/no-array-constructor.md"},"from ESLint core"))))}d.isMDXComponent=!0}}]);