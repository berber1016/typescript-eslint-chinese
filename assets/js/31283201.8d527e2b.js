"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[173],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=i,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2059:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=t(3117),i=t(102),a=(t(7294),t(3905)),o=["components"],l={},s="no-implied-eval",p={unversionedId:"no-implied-eval",id:"no-implied-eval",title:"no-implied-eval",description:"Disallows the use of eval()-like methods.",source:"@site/rules/no-implied-eval.md",sourceDirName:".",slug:"/no-implied-eval",permalink:"/typescript-eslint-chinese/rules/no-implied-eval",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"no-implicit-any-catch",permalink:"/typescript-eslint-chinese/rules/no-implicit-any-catch"},next:{title:"no-inferrable-types",permalink:"/typescript-eslint-chinese/rules/no-inferrable-types"}},c={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"How to Use",id:"how-to-use",level:2},{value:"When Not To Use It",id:"when-not-to-use-it",level:2}],m={toc:u};function d(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"no-implied-eval"},(0,a.kt)("inlineCode",{parentName:"h1"},"no-implied-eval")),(0,a.kt)("p",null,"Disallows the use of ",(0,a.kt)("inlineCode",{parentName:"p"},"eval()"),"-like methods."),(0,a.kt)("p",null,"It's considered a good practice to avoid using ",(0,a.kt)("inlineCode",{parentName:"p"},"eval()"),". There are security and performance implications involved with doing so, which is why many linters recommend disallowing ",(0,a.kt)("inlineCode",{parentName:"p"},"eval()"),". However, there are some other ways to pass a string and have it interpreted as JavaScript code that have similar concerns."),(0,a.kt)("p",null,"The first is using ",(0,a.kt)("inlineCode",{parentName:"p"},"setTimeout()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"setInterval()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"setImmediate")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"execScript()")," (Internet Explorer only), all of which can accept a string of code as their first argument"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'setTimeout("alert(`Hi!`);", 100);\n')),(0,a.kt)("p",null,"or using ",(0,a.kt)("inlineCode",{parentName:"p"},"new Function()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const fn = new Function("a", "b", "return a + b");\n')),(0,a.kt)("p",null,"This is considered an implied ",(0,a.kt)("inlineCode",{parentName:"p"},"eval()")," because a string of code is\npassed in to be interpreted. The same can be done with ",(0,a.kt)("inlineCode",{parentName:"p"},"setInterval()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"setImmediate()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"execScript()"),". All interpret the JavaScript code in the global scope."),(0,a.kt)("p",null,"The best practice is to avoid using ",(0,a.kt)("inlineCode",{parentName:"p"},"new Function()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"execScript()")," and always use a function for the first argument of ",(0,a.kt)("inlineCode",{parentName:"p"},"setTimeout()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"setInterval()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"setImmediate()"),"."),(0,a.kt)("h2",{id:"rule-details"},"Rule Details"),(0,a.kt)("p",null,"This rule aims to eliminate implied ",(0,a.kt)("inlineCode",{parentName:"p"},"eval()")," through the use of ",(0,a.kt)("inlineCode",{parentName:"p"},"new Function()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"setTimeout()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"setInterval()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"setImmediate()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"execScript()"),"."),(0,a.kt)("p",null,"Examples of code for this rule:"),(0,a.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/* eslint @typescript-eslint/no-implied-eval: "error" */\n\nsetTimeout("alert(`Hi!`);", 100);\n\nsetInterval("alert(`Hi!`);", 100);\n\nsetImmediate("alert(`Hi!`)");\n\nexecScript("alert(`Hi!`)");\n\nwindow.setTimeout("count = 5", 10);\n\nwindow.setInterval("foo = bar", 10);\n\nconst fn = "() = {}";\nsetTimeout(fn, 100);\n\nconst fn = () => {\n  return "x = 10";\n};\nsetTimeout(fn(), 100);\n\nconst fn = new Function("a", "b", "return a + b");\n')),(0,a.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/* eslint @typescript-eslint/no-implied-eval: "error" */\n\nsetTimeout(function () {\n  alert("Hi!");\n}, 100);\n\nsetInterval(function () {\n  alert("Hi!");\n}, 100);\n\nsetImmediate(function () {\n  alert("Hi!");\n});\n\nexecScript(function () {\n  alert("Hi!");\n});\n\nconst fn = () => {};\nsetTimeout(fn, 100);\n\nconst foo = {\n  fn: function () {},\n};\nsetTimeout(foo.fn, 100);\nsetTimeout(foo.fn.bind(this), 100);\n\nclass Foo {\n  static fn = () => {};\n}\n\nsetTimeout(Foo.fn, 100);\n')),(0,a.kt)("h2",{id:"how-to-use"},"How to Use"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  // note you must disable the base rule as it can report incorrect errors\n  "no-implied-eval": "off",\n  "@typescript-eslint/no-implied-eval": ["error"]\n}\n')),(0,a.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,a.kt)("p",null,"If you want to allow ",(0,a.kt)("inlineCode",{parentName:"p"},"new Function()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"setTimeout()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"setInterval()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"setImmediate()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"execScript()")," with string arguments, then you can safely disable this rule."),(0,a.kt)("sup",null,(0,a.kt)("p",null,"Taken with \u2764\ufe0f ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/eslint/eslint/blob/main/docs/rules/no-implied-eval.md"},"from ESLint core"))))}d.isMDXComponent=!0}}]);