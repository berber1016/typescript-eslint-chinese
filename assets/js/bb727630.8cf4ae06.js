"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[2744],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,i=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,f=d["".concat(i,".").concat(m)]||d[m]||u[m]||c;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,s=new Array(c);s[0]=d;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var l=2;l<c;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7733:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return u}});var r=n(3117),o=n(102),c=(n(7294),n(3905)),s=["components"],a={},i="consistent-generic-constructors",l={unversionedId:"consistent-generic-constructors",id:"consistent-generic-constructors",title:"consistent-generic-constructors",description:"Enforces specifying generic type arguments on type annotation or constructor name of a constructor call.",source:"@site/rules/consistent-generic-constructors.md",sourceDirName:".",slug:"/consistent-generic-constructors",permalink:"/typescript-eslint-chinese/rules/consistent-generic-constructors",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657186506,formattedLastUpdatedAt:"2022\u5e747\u67087\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"comma-spacing",permalink:"/typescript-eslint-chinese/rules/comma-spacing"},next:{title:"consistent-indexed-object-style",permalink:"/typescript-eslint-chinese/rules/consistent-indexed-object-style"}},p={},u=[{value:"Options",id:"options",level:2},{value:"Rule Details",id:"rule-details",level:2},{value:"<code>constructor</code>",id:"constructor",level:3},{value:"\u274c Incorrect",id:"-incorrect",level:4},{value:"\u2705 Correct",id:"-correct",level:4},{value:"<code>type-annotation</code>",id:"type-annotation",level:3},{value:"\u274c Incorrect",id:"-incorrect-1",level:4},{value:"\u2705 Correct",id:"-correct-1",level:4},{value:"When Not To Use It",id:"when-not-to-use-it",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,s);return(0,c.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"consistent-generic-constructors"},(0,c.kt)("inlineCode",{parentName:"h1"},"consistent-generic-constructors")),(0,c.kt)("p",null,"Enforces specifying generic type arguments on type annotation or constructor name of a constructor call."),(0,c.kt)("p",null,"When constructing a generic class, you can specify the type arguments on either the left-hand side (as a type annotation) or the right-hand side (as part of the constructor call):"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"// Left-hand side\nconst map: Map<string, number> = new Map();\n\n// Right-hand side\nconst map = new Map<string, number>();\n")),(0,c.kt)("p",null,"This rule ensures that type arguments appear consistently on one side of the declaration."),(0,c.kt)("h2",{id:"options"},"Options"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "rules": {\n    "@typescript-eslint/consistent-generic-constructors": [\n      "error",\n      "constructor"\n    ]\n  }\n}\n')),(0,c.kt)("p",null,"This rule takes a string option:"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},"If it's set to ",(0,c.kt)("inlineCode",{parentName:"li"},"constructor")," (default), type arguments that ",(0,c.kt)("strong",{parentName:"li"},"only")," appear on the type annotation are disallowed."),(0,c.kt)("li",{parentName:"ul"},"If it's set to ",(0,c.kt)("inlineCode",{parentName:"li"},"type-annotation"),", type arguments that ",(0,c.kt)("strong",{parentName:"li"},"only")," appear on the constructor are disallowed.")),(0,c.kt)("h2",{id:"rule-details"},"Rule Details"),(0,c.kt)("p",null,"The rule never reports when there are type parameters on both sides, or neither sides of the declaration. It also doesn't report if the names of the type annotation and the constructor don't match."),(0,c.kt)("h3",{id:"constructor"},(0,c.kt)("inlineCode",{parentName:"h3"},"constructor")),(0,c.kt)("h4",{id:"-incorrect"},"\u274c Incorrect"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"const map: Map<string, number> = new Map();\nconst set: Set<string> = new Set();\n")),(0,c.kt)("h4",{id:"-correct"},"\u2705 Correct"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"const map = new Map<string, number>();\nconst map: Map<string, number> = new MyMap();\nconst set = new Set<string>();\nconst set = new Set();\nconst set: Set<string> = new Set<string>();\n")),(0,c.kt)("h3",{id:"type-annotation"},(0,c.kt)("inlineCode",{parentName:"h3"},"type-annotation")),(0,c.kt)("h4",{id:"-incorrect-1"},"\u274c Incorrect"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"const map = new Map<string, number>();\nconst set = new Set<string>();\n")),(0,c.kt)("h4",{id:"-correct-1"},"\u2705 Correct"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"const map: Map<string, number> = new Map();\nconst set: Set<string> = new Set();\nconst set = new Set();\nconst set: Set<string> = new Set<string>();\n")),(0,c.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,c.kt)("p",null,"You can turn this rule off if you don't want to enforce one kind of generic constructor style over the other."))}m.isMDXComponent=!0}}]);