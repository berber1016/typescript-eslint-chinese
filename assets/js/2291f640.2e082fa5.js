"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[3366],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=p(n),f=o,m=d["".concat(l,".").concat(f)]||d[f]||s[f]||i;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4080:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return s}});var r=n(3117),o=n(102),i=(n(7294),n(3905)),a=["components"],c={},l="method-signature-style",p={unversionedId:"method-signature-style",id:"method-signature-style",title:"method-signature-style",description:"Enforces using a particular method signature syntax.",source:"@site/rules/method-signature-style.md",sourceDirName:".",slug:"/method-signature-style",permalink:"/typescript-eslint-chinese/rules/method-signature-style",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657186506,formattedLastUpdatedAt:"2022\u5e747\u67087\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"member-ordering",permalink:"/typescript-eslint-chinese/rules/member-ordering"},next:{title:"naming-convention",permalink:"/typescript-eslint-chinese/rules/naming-convention"}},u={},s=[{value:"Options",id:"options",level:2},{value:"<code>property</code>",id:"property",level:3},{value:"\u274c Incorrect",id:"-incorrect",level:4},{value:"\u2705 Correct",id:"-correct",level:4},{value:"<code>method</code>",id:"method",level:3},{value:"\u274c Incorrect",id:"-incorrect-1",level:4},{value:"\u2705 Correct",id:"-correct-1",level:4},{value:"When Not To Use It",id:"when-not-to-use-it",level:2}],d={toc:s};function f(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"method-signature-style"},(0,i.kt)("inlineCode",{parentName:"h1"},"method-signature-style")),(0,i.kt)("p",null,"Enforces using a particular method signature syntax."),(0,i.kt)("p",null,"There are two ways to define an object/interface function property."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// method shorthand syntax\ninterface T1 {\n  func(arg: string): number;\n}\n\n// regular property with function type\ninterface T2 {\n  func: (arg: string) => number;\n}\n")),(0,i.kt)("p",null,"A good practice is to use the TypeScript's ",(0,i.kt)("inlineCode",{parentName:"p"},"strict")," option (which implies ",(0,i.kt)("inlineCode",{parentName:"p"},"strictFunctionTypes"),") which enables correct typechecking for function properties only (method signatures get old behavior)."),(0,i.kt)("p",null,"TypeScript FAQ:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"A method and a function property of the same type behave differently.\nMethods are always bivariant in their argument, while function properties are contravariant in their argument under ",(0,i.kt)("inlineCode",{parentName:"p"},"strictFunctionTypes"),".")),(0,i.kt)("p",null,"See the reasoning behind that in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/TypeScript/pull/18654"},"TypeScript PR for the compiler option"),"."),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("p",null,"This rule accepts one string option:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"property"'),": Enforce using property signature for functions. Use this to enforce maximum correctness together with TypeScript's strict mode."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"method"'),": Enforce using method signature for functions. Use this if you aren't using TypeScript's strict mode and prefer this style.")),(0,i.kt)("p",null,"The default is ",(0,i.kt)("inlineCode",{parentName:"p"},'"property"'),"."),(0,i.kt)("h3",{id:"property"},(0,i.kt)("inlineCode",{parentName:"h3"},"property")),(0,i.kt)("p",null,"Examples of code with ",(0,i.kt)("inlineCode",{parentName:"p"},"property")," option."),(0,i.kt)("h4",{id:"-incorrect"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface T1 {\n  func(arg: string): number;\n}\ntype T2 = {\n  func(arg: boolean): void;\n};\ninterface T3 {\n  func(arg: number): void;\n  func(arg: string): void;\n  func(arg: boolean): void;\n}\n")),(0,i.kt)("h4",{id:"-correct"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface T1 {\n  func: (arg: string) => number;\n}\ntype T2 = {\n  func: (arg: boolean) => void;\n};\n// this is equivalent to the overload\ninterface T3 {\n  func: ((arg: number) => void) &\n    ((arg: string) => void) &\n    ((arg: boolean) => void);\n}\n")),(0,i.kt)("h3",{id:"method"},(0,i.kt)("inlineCode",{parentName:"h3"},"method")),(0,i.kt)("p",null,"Examples of code with ",(0,i.kt)("inlineCode",{parentName:"p"},"method")," option."),(0,i.kt)("h4",{id:"-incorrect-1"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface T1 {\n  func: (arg: string) => number;\n}\ntype T2 = {\n  func: (arg: boolean) => void;\n};\n")),(0,i.kt)("h4",{id:"-correct-1"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface T1 {\n  func(arg: string): number;\n}\ntype T2 = {\n  func(arg: boolean): void;\n};\n")),(0,i.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,i.kt)("p",null,"If you don't want to enforce a particular style for object/interface function types, and/or if you don't use ",(0,i.kt)("inlineCode",{parentName:"p"},"strictFunctionTypes"),", then you don't need this rule."))}f.isMDXComponent=!0}}]);