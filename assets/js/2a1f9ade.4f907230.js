"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[6994],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,y=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(y,i(i({ref:t},p),{},{components:r})):n.createElement(y,i({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7716:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var n=r(3117),a=r(102),o=(r(7294),r(3905)),i=["components"],s={},l="require-array-sort-compare",c={unversionedId:"require-array-sort-compare",id:"require-array-sort-compare",title:"require-array-sort-compare",description:"Requires Array#sort calls to always provide a compareFunction.",source:"@site/rules/require-array-sort-compare.md",sourceDirName:".",slug:"/require-array-sort-compare",permalink:"/typescript-eslint-chinese/rules/require-array-sort-compare",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"quotes",permalink:"/typescript-eslint-chinese/rules/quotes"},next:{title:"require-await",permalink:"/typescript-eslint-chinese/rules/require-await"}},p={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"<code>ignoreStringArrays</code>",id:"ignorestringarrays",level:3},{value:"\u274c Incorrect",id:"-incorrect-1",level:4},{value:"\u2705 Correct",id:"-correct-1",level:4},{value:"When Not To Use It",id:"when-not-to-use-it",level:2}],d={toc:u};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"require-array-sort-compare"},(0,o.kt)("inlineCode",{parentName:"h1"},"require-array-sort-compare")),(0,o.kt)("p",null,"Requires ",(0,o.kt)("inlineCode",{parentName:"p"},"Array#sort")," calls to always provide a ",(0,o.kt)("inlineCode",{parentName:"p"},"compareFunction"),"."),(0,o.kt)("p",null,"This rule prevents invoking the ",(0,o.kt)("inlineCode",{parentName:"p"},"Array#sort()")," method without providing a ",(0,o.kt)("inlineCode",{parentName:"p"},"compare")," argument."),(0,o.kt)("p",null,"When called without a compare function, ",(0,o.kt)("inlineCode",{parentName:"p"},"Array#sort()")," converts all non-undefined array elements into strings and then compares said strings based off their UTF-16 code units."),(0,o.kt)("p",null,'The result is that elements are sorted alphabetically, regardless of their type.\nWhen sorting numbers, this results in the classic "10 before 2" order:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"[1, 2, 3, 10, 20, 30].sort(); //\u2192 [1, 10, 2, 20, 3, 30]\n")),(0,o.kt)("p",null,"This also means that ",(0,o.kt)("inlineCode",{parentName:"p"},"Array#sort")," does not always sort consistently, as elements may have custom ",(0,o.kt)("inlineCode",{parentName:"p"},"#toString")," implementations that are not deterministic; this trap is noted in the language specification thusly:"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Method calls performed by the ",(0,o.kt)("inlineCode",{parentName:"p"},"ToString")," abstract operations in steps 5 and 7 have the potential to cause ",(0,o.kt)("inlineCode",{parentName:"p"},"SortCompare")," to not behave as a consistent comparison function."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://www.ecma-international.org/ecma-262/9.0/#sec-sortcompare"},"https://www.ecma-international.org/ecma-262/9.0/#sec-sortcompare"))),(0,o.kt)("h2",{id:"rule-details"},"Rule Details"),(0,o.kt)("p",null,"This rule aims to ensure all calls of the native ",(0,o.kt)("inlineCode",{parentName:"p"},"Array#sort")," method provide a ",(0,o.kt)("inlineCode",{parentName:"p"},"compareFunction"),", while ignoring calls to user-defined ",(0,o.kt)("inlineCode",{parentName:"p"},"sort")," methods."),(0,o.kt)("p",null,"Examples of code for this rule:"),(0,o.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const array: any[];\nconst stringArray: string[];\n\narray.sort();\n\n// String arrays should be sorted using `String#localeCompare`.\nstringArray.sort();\n")),(0,o.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const array: any[];\nconst userDefinedType: { sort(): void };\n\narray.sort((a, b) => a - b);\narray.sort((a, b) => a.localeCompare(b));\n\nuserDefinedType.sort();\n")),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("p",null,"The rule accepts an options object with the following properties:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type Options = {\n  /**\n   * If true, an array which all elements are string is ignored.\n   */\n  ignoreStringArrays?: boolean;\n};\n\nconst defaults = {\n  ignoreStringArrays: false,\n};\n")),(0,o.kt)("h3",{id:"ignorestringarrays"},(0,o.kt)("inlineCode",{parentName:"h3"},"ignoreStringArrays")),(0,o.kt)("p",null,"Examples of code for this rule with ",(0,o.kt)("inlineCode",{parentName:"p"},"{ ignoreStringArrays: true }"),":"),(0,o.kt)("h4",{id:"-incorrect-1"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const one = 1;\nconst two = 2;\nconst three = 3;\n[one, two, three].sort();\n")),(0,o.kt)("h4",{id:"-correct-1"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const one = "1";\nconst two = "2";\nconst three = "3";\n[one, two, three].sort();\n')),(0,o.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,o.kt)("p",null,"If you understand the language specification enough, you can turn this rule off safely."))}m.isMDXComponent=!0}}]);