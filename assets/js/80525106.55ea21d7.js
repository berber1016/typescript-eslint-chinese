"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[7357],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(t),f=i,d=m["".concat(u,".").concat(f)]||m[f]||c[f]||a;return t?r.createElement(d,l(l({ref:n},p),{},{components:t})):r.createElement(d,l({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=m;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<a;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1730:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c}});var r=t(3117),i=t(102),a=(t(7294),t(3905)),l=["components"],o={},u="prefer-enum-initializers",s={unversionedId:"prefer-enum-initializers",id:"prefer-enum-initializers",title:"prefer-enum-initializers",description:"Requires each enum member value to be explicitly initialized.",source:"@site/rules/prefer-enum-initializers.md",sourceDirName:".",slug:"/prefer-enum-initializers",permalink:"/typescript-eslint-chinese/rules/prefer-enum-initializers",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"prefer-as-const",permalink:"/typescript-eslint-chinese/rules/prefer-as-const"},next:{title:"prefer-for-of",permalink:"/typescript-eslint-chinese/rules/prefer-for-of"}},p={},c=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"When Not To Use It",id:"when-not-to-use-it",level:2}],m={toc:c};function f(e){var n=e.components,t=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"prefer-enum-initializers"},(0,a.kt)("inlineCode",{parentName:"h1"},"prefer-enum-initializers")),(0,a.kt)("p",null,"Requires each enum member value to be explicitly initialized."),(0,a.kt)("p",null,"This rule recommends having each ",(0,a.kt)("inlineCode",{parentName:"p"},"enum"),"s member value explicitly initialized."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"enum"),"s are a practical way to organize semantically related constant values. However, by implicitly defining values, ",(0,a.kt)("inlineCode",{parentName:"p"},"enum"),"s can lead to unexpected bugs if it's modified without paying attention to the order of its items."),(0,a.kt)("h2",{id:"rule-details"},"Rule Details"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"enum"),"s infers sequential numbers automatically when initializers are omitted:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"enum Status {\n  Open, // infer 0\n  Closed, // infer 1\n}\n")),(0,a.kt)("p",null,"If a new member is added to the top of ",(0,a.kt)("inlineCode",{parentName:"p"},"Status"),", both ",(0,a.kt)("inlineCode",{parentName:"p"},"Open")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Closed")," would have its values altered:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"enum Status {\n  Pending, // infer 0\n  Open, // infer 1\n  Closed, // infer 2\n}\n")),(0,a.kt)("p",null,"Examples of code for this rule:"),(0,a.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"enum Status {\n  Open = 1,\n  Close,\n}\n\nenum Direction {\n  Up,\n  Down,\n}\n\nenum Color {\n  Red,\n  Green = 'Green'\n  Blue = 'Blue',\n}\n")),(0,a.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'enum Status {\n  Open = "Open",\n  Close = "Close",\n}\n\nenum Direction {\n  Up = 1,\n  Down = 2,\n}\n\nenum Color {\n  Red = "Red",\n  Green = "Green",\n  Blue = "Blue",\n}\n')),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'// .eslintrc.json\n{\n  "rules": {\n    "@typescript-eslint/prefer-enum-initializers": "warn"\n  }\n}\n')),(0,a.kt)("p",null,"This rule is not configurable."),(0,a.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,a.kt)("p",null,"If you don't care about ",(0,a.kt)("inlineCode",{parentName:"p"},"enum"),"s having implicit values you can safely disable this rule."))}f.isMDXComponent=!0}}]);