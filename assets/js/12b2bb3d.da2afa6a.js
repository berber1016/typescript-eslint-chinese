"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[735],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),m=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=m(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=m(t),d=i,f=u["".concat(s,".").concat(d)]||u[d]||c[d]||l;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,a=new Array(l);a[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var m=2;m<l;m++)a[m]=t[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9685:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return m},toc:function(){return c}});var r=t(3117),i=t(102),l=(t(7294),t(3905)),a=["components"],o={},s="member-delimiter-style",m={unversionedId:"member-delimiter-style",id:"member-delimiter-style",title:"member-delimiter-style",description:"Requires a specific member delimiter style for interfaces and type literals.",source:"@site/rules/member-delimiter-style.md",sourceDirName:".",slug:"/member-delimiter-style",permalink:"/typescript-eslint-chinese/rules/member-delimiter-style",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"lines-between-class-members",permalink:"/typescript-eslint-chinese/rules/lines-between-class-members"},next:{title:"member-ordering",permalink:"/typescript-eslint-chinese/rules/member-ordering"}},p={},c=[{value:"Rule Details",id:"rule-details",level:2},{value:"Options",id:"options",level:2},{value:"<code>delimiter</code>",id:"delimiter",level:3},{value:"<code>requireLast</code>",id:"requirelast",level:3},{value:"<code>overrides</code>",id:"overrides",level:3},{value:"Examples",id:"examples",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"When Not To Use It",id:"when-not-to-use-it",level:2}],u={toc:c};function d(e){var n=e.components,t=(0,i.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"member-delimiter-style"},(0,l.kt)("inlineCode",{parentName:"h1"},"member-delimiter-style")),(0,l.kt)("p",null,"Requires a specific member delimiter style for interfaces and type literals."),(0,l.kt)("p",null,"Enforces a consistent member delimiter style in interfaces and type literals. There are three member delimiter styles primarily used in TypeScript:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Semicolon style (default, preferred in TypeScript).")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"interface Foo {\n    name: string;\n    greet(): void;\n}\n\ntype Bar = {\n    name: string;\n    greet(): void;\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Comma style (JSON style).")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"interface Foo {\n    name: string,\n    greet(): void,\n}\n\ntype Bar = {\n    name: string,\n    greet(): void,\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Line break (none) style.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"interface Foo {\n    name: string\n    greet(): void\n}\n\ntype Bar = {\n    name: string\n    greet(): void\n}\n")),(0,l.kt)("p",null,"The rule also enforces the presence (or absence) of the delimiter in the last member of the interface and/or type literal.\nFinally, this rule can enforce separate delimiter syntax for single line declarations."),(0,l.kt)("h2",{id:"rule-details"},"Rule Details"),(0,l.kt)("p",null,"This rule aims to standardize the way interface and type literal members are delimited."),(0,l.kt)("h2",{id:"options"},"Options"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'interface BaseConfig {\n  multiline?: {\n    delimiter?: "none" | "semi" | "comma";\n    requireLast?: boolean;\n  };\n  singleline?: {\n    delimiter?: "semi" | "comma";\n    requireLast?: boolean;\n  };\n}\ntype Config = BaseConfig & {\n  overrides?: {\n    interface?: BaseConfig;\n    typeLiteral?: BaseConfig;\n  };\n  multilineDetection?: "brackets" | "last-member";\n};\n')),(0,l.kt)("p",null,"Default config:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "multiline": {\n    "delimiter": "semi",\n    "requireLast": true\n  },\n  "singleline": {\n    "delimiter": "semi",\n    "requireLast": false\n  },\n  "multilineDetection": "brackets"\n}\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"multiline")," config only applies to multiline ",(0,l.kt)("inlineCode",{parentName:"p"},"interface"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"type")," definitions.\n",(0,l.kt)("inlineCode",{parentName:"p"},"singleline")," config only applies to single line ",(0,l.kt)("inlineCode",{parentName:"p"},"interface"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"type")," definitions.\nThe two configs are entirely separate, and do not effect one another."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"multilineDetection")," determines what counts as multiline"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"brackets"')," (default) any newlines in the type or interface make it multiline."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"last-member"')," if the last member of the interface is on the same line as the last bracket, it is counted as a single line.")),(0,l.kt)("h3",{id:"delimiter"},(0,l.kt)("inlineCode",{parentName:"h3"},"delimiter")),(0,l.kt)("p",null,"Accepts three values (or two for ",(0,l.kt)("inlineCode",{parentName:"p"},"singleline"),"):"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"comma")," - each member should be delimited with a comma (",(0,l.kt)("inlineCode",{parentName:"li"},","),")."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"semi")," - each member should be delimited with a semicolon (",(0,l.kt)("inlineCode",{parentName:"li"},";"),")."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"none")," - each member should be delimited with nothing.")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"none")," is not an option for ",(0,l.kt)("inlineCode",{parentName:"p"},"singleline")," because having no delimiter between members on a single line is a syntax error in TS.")),(0,l.kt)("h3",{id:"requirelast"},(0,l.kt)("inlineCode",{parentName:"h3"},"requireLast")),(0,l.kt)("p",null,"Determines whether or not the last member in the ",(0,l.kt)("inlineCode",{parentName:"p"},"interface"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"type")," should have a delimiter:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"true")," - the last member ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("em",{parentName:"strong"},"must"))," have a delimiter."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"false")," - the last member ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("em",{parentName:"strong"},"must not"))," have a delimiter.")),(0,l.kt)("h3",{id:"overrides"},(0,l.kt)("inlineCode",{parentName:"h3"},"overrides")),(0,l.kt)("p",null,"Allows you to specify options specifically for either ",(0,l.kt)("inlineCode",{parentName:"p"},"interface"),"s or ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," definitions / inline ",(0,l.kt)("inlineCode",{parentName:"p"},"type"),"s."),(0,l.kt)("p",null,"For example, to require commas for ",(0,l.kt)("inlineCode",{parentName:"p"},"type"),"s, and semicolons for multiline ",(0,l.kt)("inlineCode",{parentName:"p"},"interface"),"s:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "multiline": {\n    "delimiter": "comma",\n    "requireLast": true\n  },\n  "singleline": {\n    "delimiter": "comma",\n    "requireLast": true\n  },\n  "overrides": {\n    "interface": {\n      "multiline": {\n        "delimiter": "semi",\n        "requireLast": true\n      }\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("p",null,"Examples of code for this rule with the default config:"),(0,l.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// missing semicolon delimiter\ninterface Foo {\n    name: string\n    greet(): string\n}\n\n// using incorrect delimiter\ninterface Bar {\n    name: string,\n    greet(): string,\n}\n\n// missing last member delimiter\ninterface Baz {\n    name: string;\n    greet(): string\n}\n\n// incorrect delimiter\ntype FooBar = { name: string, greet(): string }\n\n// last member should not have delimiter\ntype FooBar = { name: string; greet(): string; }\n")),(0,l.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"interface Foo {\n    name: string;\n    greet(): string;\n}\n\ninterface Foo { name: string }\n\ntype Bar = {\n    name: string;\n    greet(): string;\n}\n\ntype Bar = { name: string }\n\ntype FooBar = { name: string; greet(): string }\n")),(0,l.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,l.kt)("p",null,"If you don't care about enforcing a consistent member delimiter in interfaces and type literals, then you will not need this rule."))}d.isMDXComponent=!0}}]);