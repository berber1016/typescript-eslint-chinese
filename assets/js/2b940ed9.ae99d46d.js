"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[8720],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),f=p(t),d=o,m=f["".concat(l,".").concat(d)]||f[d]||c[d]||i;return t?r.createElement(m,s(s({ref:n},u),{},{components:t})):r.createElement(m,s({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=f;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var p=2;p<i;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4993:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return c}});var r=t(3117),o=t(102),i=(t(7294),t(3905)),s=["components"],a={},l="no-use-before-define",p={unversionedId:"no-use-before-define",id:"no-use-before-define",title:"no-use-before-define",description:"Disallows the use of variables before they are defined.",source:"@site/rules/no-use-before-define.md",sourceDirName:".",slug:"/no-use-before-define",permalink:"/typescript-eslint-chinese/rules/no-use-before-define",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657186506,formattedLastUpdatedAt:"2022\u5e747\u67087\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"no-unused-vars",permalink:"/typescript-eslint-chinese/rules/no-unused-vars"},next:{title:"no-useless-constructor",permalink:"/typescript-eslint-chinese/rules/no-useless-constructor"}},u={},c=[{value:"Rule Details",id:"rule-details",level:2},{value:"How to Use",id:"how-to-use",level:2},{value:"Options",id:"options",level:2},{value:"<code>enums</code>",id:"enums",level:3},{value:"\u274c Incorrect",id:"-incorrect",level:4},{value:"\u2705 Correct",id:"-correct",level:4},{value:"<code>typedefs</code>",id:"typedefs",level:3},{value:"<code>ignoreTypeReferences</code>",id:"ignoretypereferences",level:3},{value:"Other Options",id:"other-options",level:3}],f={toc:c};function d(e){var n=e.components,t=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"no-use-before-define"},(0,i.kt)("inlineCode",{parentName:"h1"},"no-use-before-define")),(0,i.kt)("p",null,"Disallows the use of variables before they are defined."),(0,i.kt)("h2",{id:"rule-details"},"Rule Details"),(0,i.kt)("p",null,"This rule extends the base ",(0,i.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-use-before-define"},(0,i.kt)("inlineCode",{parentName:"a"},"eslint/no-use-before-define"))," rule.\nIt adds support for ",(0,i.kt)("inlineCode",{parentName:"p"},"type"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"interface")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"enum")," declarations."),(0,i.kt)("h2",{id:"how-to-use"},"How to Use"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  // note you must disable the base rule as it can report incorrect errors\n  "no-use-before-define": "off",\n  "@typescript-eslint/no-use-before-define": ["error"]\n}\n')),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-use-before-define#options"},(0,i.kt)("inlineCode",{parentName:"a"},"eslint/no-use-before-define")," options"),".\nThis rule adds the following options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface Options extends BaseNoUseBeforeDefineOptions {\n  enums?: boolean;\n  typedefs?: boolean;\n  ignoreTypeReferences?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseNoUseBeforeDefineDefaultOptions,\n  enums: true,\n  typedefs: true,\n  ignoreTypeReferences: true,\n};\n")),(0,i.kt)("h3",{id:"enums"},(0,i.kt)("inlineCode",{parentName:"h3"},"enums")),(0,i.kt)("p",null,"If this is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", this rule warns every reference to a enum before the enum declaration.\nIf this is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", this rule will ignore references to enums, when the reference is in a child scope."),(0,i.kt)("p",null,"Examples of code for the ",(0,i.kt)("inlineCode",{parentName:"p"},'{ "enums": true }')," option:"),(0,i.kt)("h4",{id:"-incorrect"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'/*eslint no-use-before-define: ["error", { "enums": true }]*/\n\nconst x = Foo.FOO;\n\nenum Foo {\n  FOO,\n}\n')),(0,i.kt)("h4",{id:"-correct"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'/*eslint no-use-before-define: ["error", { "enums": false }]*/\n\nfunction foo() {\n  return Foo.FOO;\n}\n\nenum Foo {\n  FOO,\n}\n')),(0,i.kt)("h3",{id:"typedefs"},(0,i.kt)("inlineCode",{parentName:"h3"},"typedefs")),(0,i.kt)("p",null,"If this is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", this rule warns every reference to a type before the type declaration.\nIf this is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", this rule will ignore references to types."),(0,i.kt)("p",null,"Examples of ",(0,i.kt)("strong",{parentName:"p"},"correct")," code for the ",(0,i.kt)("inlineCode",{parentName:"p"},'{ "typedefs": false }')," option:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'/*eslint no-use-before-define: ["error", { "typedefs": false }]*/\n\nlet myVar: StringOrNumber;\ntype StringOrNumber = string | number;\n')),(0,i.kt)("h3",{id:"ignoretypereferences"},(0,i.kt)("inlineCode",{parentName:"h3"},"ignoreTypeReferences")),(0,i.kt)("p",null,"If this is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", this rule ignores all type references, such as in type annotations and assertions.\nIf this is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", this will will check all type references."),(0,i.kt)("p",null,"Examples of ",(0,i.kt)("strong",{parentName:"p"},"correct")," code for the ",(0,i.kt)("inlineCode",{parentName:"p"},'{ "ignoreTypeReferences": true }')," option:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'/*eslint no-use-before-define: ["error", { "ignoreTypeReferences": true }]*/\n\nlet var1: StringOrNumber;\ntype StringOrNumber = string | number;\n\nlet var2: Enum;\nenum Enum {}\n')),(0,i.kt)("h3",{id:"other-options"},"Other Options"),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-use-before-define#options"},(0,i.kt)("inlineCode",{parentName:"a"},"eslint/no-use-before-define")," options"),"."),(0,i.kt)("sup",null,(0,i.kt)("p",null,"Taken with \u2764\ufe0f ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/eslint/eslint/blob/main/docs/rules/no-use-before-define.md"},"from ESLint core"))))}d.isMDXComponent=!0}}]);