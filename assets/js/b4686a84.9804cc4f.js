"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[8897],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=l,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,a=new Array(i);a[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,a[1]=o;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},988:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p}});var r=n(3117),l=n(102),i=(n(7294),n(3905)),a=["components"],o={},s="prefer-literal-enum-member",u={unversionedId:"prefer-literal-enum-member",id:"prefer-literal-enum-member",title:"prefer-literal-enum-member",description:"Requires all enum members to be literal values.",source:"@site/rules/prefer-literal-enum-member.md",sourceDirName:".",slug:"/prefer-literal-enum-member",permalink:"/typescript-eslint-chinese/rules/prefer-literal-enum-member",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"prefer-includes",permalink:"/typescript-eslint-chinese/rules/prefer-includes"},next:{title:"prefer-namespace-keyword",permalink:"/typescript-eslint-chinese/rules/prefer-namespace-keyword"}},c={},p=[{value:"Rule Details",id:"rule-details",level:2},{value:"Options",id:"options",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"<code>allowBitwiseExpressions</code>",id:"allowbitwiseexpressions",level:3},{value:"\u274c Incorrect",id:"-incorrect-1",level:4},{value:"\u2705 Correct",id:"-correct-1",level:4},{value:"When Not To Use It",id:"when-not-to-use-it",level:2}],m={toc:p};function d(e){var t=e.components,n=(0,l.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"prefer-literal-enum-member"},(0,i.kt)("inlineCode",{parentName:"h1"},"prefer-literal-enum-member")),(0,i.kt)("p",null,"Requires all enum members to be literal values."),(0,i.kt)("p",null,"TypeScript allows the value of an enum member to be many different kinds of valid JavaScript expressions. However, because enums create their own scope whereby each enum member becomes a variable in that scope, unexpected values could be used at runtime. Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const imOutside = 2;\nconst b = 2;\nenum Foo {\n  outer = imOutside,\n  a = 1,\n  b = a,\n  c = b,\n  // does c == Foo.b == Foo.c == 1?\n  // or does c == b == 2?\n}\n")),(0,i.kt)("p",null,"The answer is that ",(0,i.kt)("inlineCode",{parentName:"p"},"Foo.c")," will be ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," at runtime. The ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/play/#src=const%20imOutside%20%3D%202%3B%0D%0Aconst%20b%20%3D%202%3B%0D%0Aenum%20Foo%20%7B%0D%0A%20%20%20%20outer%20%3D%20imOutside%2C%0D%0A%20%20%20%20a%20%3D%201%2C%0D%0A%20%20%20%20b%20%3D%20a%2C%0D%0A%20%20%20%20c%20%3D%20b%2C%0D%0A%20%20%20%20%2F%2F%20does%20c%20%3D%3D%20Foo.b%20%3D%3D%20Foo.c%20%3D%3D%201%3F%0D%0A%20%20%20%20%2F%2F%20or%20does%20c%20%3D%3D%20b%20%3D%3D%202%3F%0D%0A%7D"},"playground")," illustrates this quite nicely."),(0,i.kt)("h2",{id:"rule-details"},"Rule Details"),(0,i.kt)("p",null,"This rule is meant to prevent unexpected results in code by requiring the use of literal values as enum members to prevent unexpected runtime behavior. Template literals, arrays, objects, constructors, and all other expression types can end up using a variable from its scope or the parent scope, which can result in the same unexpected behavior at runtime."),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allowBitwiseExpressions")," set to ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," will allow you to use bitwise expressions in enum initializer (Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),").")),(0,i.kt)("p",null,"Examples of code for this rule:"),(0,i.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const str = "Test";\nenum Invalid {\n  A = str, // Variable assignment\n  B = {}, // Object assignment\n  C = `A template literal string`, // Template literal\n  D = new Set(1, 2, 3), // Constructor in assignment\n  E = 2 + 2, // Expression assignment\n}\n')),(0,i.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'enum Valid {\n  A,\n  B = "TestStr", // A regular string\n  C = 4, // A number\n  D = null,\n  E = /some_regex/,\n}\n')),(0,i.kt)("h3",{id:"allowbitwiseexpressions"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowBitwiseExpressions")),(0,i.kt)("p",null,"Examples of code for the ",(0,i.kt)("inlineCode",{parentName:"p"},'{ "allowBitwiseExpressions": true }')," option:"),(0,i.kt)("h4",{id:"-incorrect-1"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const x = 1;\nenum Foo {\n  A = x << 0,\n  B = x >> 0,\n  C = x >>> 0,\n  D = x | 0,\n  E = x & 0,\n  F = x ^ 0,\n  G = ~x,\n}\n")),(0,i.kt)("h4",{id:"-correct-1"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"enum Foo {\n  A = 1 << 0,\n  B = 1 >> 0,\n  C = 1 >>> 0,\n  D = 1 | 0,\n  E = 1 & 0,\n  F = 1 ^ 0,\n  G = ~1,\n}\n")),(0,i.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,i.kt)("p",null,"If you want use anything other than simple literals as an enum value."))}d.isMDXComponent=!0}}]);