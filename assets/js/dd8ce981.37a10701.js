"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[4353],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),f=p(n),d=i,m=f["".concat(l,".").concat(d)]||f[d]||u[d]||o;return n?r.createElement(m,s(s({ref:t},c),{},{components:n})):r.createElement(m,s({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=f;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3070:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return u}});var r=n(3117),i=n(102),o=(n(7294),n(3905)),s=["components"],a={},l="prefer-ts-expect-error",p={unversionedId:"prefer-ts-expect-error",id:"prefer-ts-expect-error",title:"prefer-ts-expect-error",description:"Enforces using @ts-expect-error over @ts-ignore.",source:"@site/rules/prefer-ts-expect-error.md",sourceDirName:".",slug:"/prefer-ts-expect-error",permalink:"/typescript-eslint-chinese/rules/prefer-ts-expect-error",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"prefer-string-starts-ends-with",permalink:"/typescript-eslint-chinese/rules/prefer-string-starts-ends-with"},next:{title:"promise-function-async",permalink:"/typescript-eslint-chinese/rules/promise-function-async"}},c={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"When Not To Use It",id:"when-not-to-use-it",level:2},{value:"Further Reading",id:"further-reading",level:2}],f={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"prefer-ts-expect-error"},(0,o.kt)("inlineCode",{parentName:"h1"},"prefer-ts-expect-error")),(0,o.kt)("p",null,"Enforces using ",(0,o.kt)("inlineCode",{parentName:"p"},"@ts-expect-error")," over ",(0,o.kt)("inlineCode",{parentName:"p"},"@ts-ignore"),"."),(0,o.kt)("p",null,"TypeScript allows you to suppress all errors on a line by placing a single-line comment or a comment block line starting with ",(0,o.kt)("inlineCode",{parentName:"p"},"@ts-ignore")," immediately before the erroring line.\nWhile powerful, there is no way to know if a ",(0,o.kt)("inlineCode",{parentName:"p"},"@ts-ignore")," is actually suppressing an error without manually investigating what happens when the ",(0,o.kt)("inlineCode",{parentName:"p"},"@ts-ignore")," is removed."),(0,o.kt)("p",null,"This means its easy for ",(0,o.kt)("inlineCode",{parentName:"p"},"@ts-ignore"),"s to be forgotten about, and remain in code even after the error they were suppressing is fixed.\nThis is dangerous, as if a new error arises on that line it'll be suppressed by the forgotten about ",(0,o.kt)("inlineCode",{parentName:"p"},"@ts-ignore"),", and so be missed."),(0,o.kt)("p",null,"To address this, TS3.9 ships with a new single-line comment directive: ",(0,o.kt)("inlineCode",{parentName:"p"},"// @ts-expect-error"),"."),(0,o.kt)("p",null,"This directive operates in the same manner as ",(0,o.kt)("inlineCode",{parentName:"p"},"@ts-ignore"),", but will error if the line it's meant to be suppressing doesn't actually contain an error, making it a lot safer."),(0,o.kt)("h2",{id:"rule-details"},"Rule Details"),(0,o.kt)("p",null,"This rule looks for usages of ",(0,o.kt)("inlineCode",{parentName:"p"},"@ts-ignore"),", and flags them to be replaced with ",(0,o.kt)("inlineCode",{parentName:"p"},"@ts-expect-error"),"."),(0,o.kt)("p",null,"Examples of code for this rule:"),(0,o.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// @ts-ignore\nconst str: string = 1;\n\n/**\n * Explaining comment\n *\n * @ts-ignore */\nconst multiLine: number = \"value\";\n\n/** @ts-ignore */\nconst block: string = 1;\n\nconst isOptionEnabled = (key: string): boolean => {\n  // @ts-ignore: if key isn't in globalOptions it'll be undefined which is false\n  return !!globalOptions[key];\n};\n")),(0,o.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// @ts-expect-error\nconst str: string = 1;\n\n/**\n * Explaining comment\n *\n * @ts-expect-error */\nconst multiLine: number = \"value\";\n\n/** @ts-expect-error */\nconst block: string = 1;\n\nconst isOptionEnabled = (key: string): boolean => {\n  // @ts-expect-error: if key isn't in globalOptions it'll be undefined which is false\n  return !!globalOptions[key];\n};\n")),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsonc"},'// .eslintrc.json\n{\n  "rules": {\n    "@typescript-eslint/prefer-ts-expect-error": "warn"\n  }\n}\n')),(0,o.kt)("p",null,"This rule is not configurable."),(0,o.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,o.kt)("p",null,"If you are ",(0,o.kt)("strong",{parentName:"p"},"NOT")," using TypeScript 3.9 (or greater), then you will not be able to use this rule, as the directive is not supported"),(0,o.kt)("h2",{id:"further-reading"},"Further Reading"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/microsoft/TypeScript/pull/36014"},"Original Implementing PR"))))}d.isMDXComponent=!0}}]);