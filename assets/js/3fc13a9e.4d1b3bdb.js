"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[637],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return c}});var l=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,l,a=function(e,n){if(null==e)return{};var t,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)t=i[l],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)t=i[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=l.createContext({}),u=function(e){var n=l.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return l.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},m=l.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),m=u(t),c=a,k=m["".concat(s,".").concat(c)]||m[c]||d[c]||i;return t?l.createElement(k,o(o({ref:n},p),{},{components:t})):l.createElement(k,o({ref:n},p))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,o[1]=r;for(var u=2;u<i;u++)o[u]=t[u];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6844:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return r},metadata:function(){return u},toc:function(){return d}});var l=t(3117),a=t(102),i=(t(7294),t(3905)),o=["components"],r={},s="strict-boolean-expressions",u={unversionedId:"strict-boolean-expressions",id:"strict-boolean-expressions",title:"strict-boolean-expressions",description:"Disallows certain types in boolean expressions.",source:"@site/rules/strict-boolean-expressions.md",sourceDirName:".",slug:"/strict-boolean-expressions",permalink:"/typescript-eslint-chinese/rules/strict-boolean-expressions",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"space-infix-ops",permalink:"/typescript-eslint-chinese/rules/space-infix-ops"},next:{title:"switch-exhaustiveness-check",permalink:"/typescript-eslint-chinese/rules/switch-exhaustiveness-check"}},p={},d=[{value:"Examples",id:"examples",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"<code>allowString</code>",id:"allowstring",level:3},{value:"<code>allowNumber</code>",id:"allownumber",level:3},{value:"<code>allowNullableObject</code>",id:"allownullableobject",level:3},{value:"<code>allowNullableBoolean</code>",id:"allownullableboolean",level:3},{value:"<code>allowNullableString</code>",id:"allownullablestring",level:3},{value:"<code>allowNullableNumber</code>",id:"allownullablenumber",level:3},{value:"<code>allowAny</code>",id:"allowany",level:3},{value:"<code>allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing</code>",id:"allowruletorunwithoutstrictnullchecksiknowwhatiamdoing",level:3},{value:"Fixes and Suggestions",id:"fixes-and-suggestions",level:2},{value:"Related To",id:"related-to",level:2}],m={toc:d};function c(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,l.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"strict-boolean-expressions"},(0,i.kt)("inlineCode",{parentName:"h1"},"strict-boolean-expressions")),(0,i.kt)("p",null,"Disallows certain types in boolean expressions."),(0,i.kt)("p",null,"Forbids usage of non-boolean types in expressions where a boolean is expected.\n",(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"never")," types are always allowed.\nAdditional types which are considered safe in a boolean context can be configured via options."),(0,i.kt)("p",null,"The following nodes are considered boolean expressions and their type is checked:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Argument to the logical negation operator (",(0,i.kt)("inlineCode",{parentName:"li"},"!arg"),")."),(0,i.kt)("li",{parentName:"ul"},"The condition in a conditional expression (",(0,i.kt)("inlineCode",{parentName:"li"},"cond ? x : y"),")."),(0,i.kt)("li",{parentName:"ul"},"Conditions for ",(0,i.kt)("inlineCode",{parentName:"li"},"if"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"for"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"while"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"do-while")," statements."),(0,i.kt)("li",{parentName:"ul"},"Operands of logical binary operators (",(0,i.kt)("inlineCode",{parentName:"li"},"lhs || rhs")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"lhs && rhs"),").",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Right-hand side operand is ignored when it's not a descendant of another boolean expression.\nThis is to allow usage of boolean operators for their short-circuiting behavior.")))),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("p",null,"Examples of code for this rule:"),(0,i.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// nullable numbers are considered unsafe by default\nlet num: number | undefined = 0;\nif (num) {\n  console.log("num is defined");\n}\n\n// nullable strings are considered unsafe by default\nlet str: string | null = null;\nif (!str) {\n  console.log("str is empty");\n}\n\n// nullable booleans are considered unsafe by default\nfunction foo(bool?: boolean) {\n  if (bool) {\n    bar();\n  }\n}\n\n// `any`, unconstrained generics and unions of more than one primitive type are disallowed\nconst foo = <T>(arg: T) => (arg ? 1 : 0);\n\n// always-truthy and always-falsy types are disallowed\nlet obj = {};\nwhile (obj) {\n  obj = getObj();\n}\n')),(0,i.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'// Using logical operator short-circuiting is allowed\nconst Component = () => {\n  const entry = map.get("foo") || {};\n  return entry && <p>Name: {entry.name}</p>;\n};\n\n// nullable values should be checked explicitly against null or undefined\nlet num: number | undefined = 0;\nif (num != null) {\n  console.log("num is defined");\n}\n\nlet str: string | null = null;\nif (str != null && !str) {\n  console.log("str is empty");\n}\n\nfunction foo(bool?: boolean) {\n  if (bool ?? false) {\n    bar();\n  }\n}\n\n// `any` types should be cast to boolean explicitly\nconst foo = (arg: any) => (Boolean(arg) ? 1 : 0);\n')),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type Options = {\n  allowString?: boolean;\n  allowNumber?: boolean;\n  allowNullableObject?: boolean;\n  allowNullableBoolean?: boolean;\n  allowNullableString?: boolean;\n  allowNullableNumber?: boolean;\n  allowAny?: boolean;\n};\n\nconst defaultOptions: Options = {\n  allowString: true,\n  allowNumber: true,\n  allowNullableObject: true,\n  allowNullableBoolean: false,\n  allowNullableString: false,\n  allowNullableNumber: false,\n  allowAny: false,\n  allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: false,\n};\n")),(0,i.kt)("h3",{id:"allowstring"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowString")),(0,i.kt)("p",null,"Allows ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," in a boolean context.\nThis is safe because strings have only one falsy value (",(0,i.kt)("inlineCode",{parentName:"p"},'""'),").\nSet this to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if you prefer the explicit ",(0,i.kt)("inlineCode",{parentName:"p"},'str != ""')," or ",(0,i.kt)("inlineCode",{parentName:"p"},"str.length > 0")," style."),(0,i.kt)("h3",{id:"allownumber"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowNumber")),(0,i.kt)("p",null,"Allows ",(0,i.kt)("inlineCode",{parentName:"p"},"number")," in a boolean context.\nThis is safe because numbers have only two falsy values (",(0,i.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"NaN"),").\nSet this to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if you prefer the explicit ",(0,i.kt)("inlineCode",{parentName:"p"},"num != 0")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"!Number.isNaN(num)")," style."),(0,i.kt)("h3",{id:"allownullableobject"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowNullableObject")),(0,i.kt)("p",null,"Allows ",(0,i.kt)("inlineCode",{parentName:"p"},"object | function | symbol | null | undefined")," in a boolean context.\nThis is safe because objects, functions and symbols don't have falsy values.\nSet this to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if you prefer the explicit ",(0,i.kt)("inlineCode",{parentName:"p"},"obj != null")," style."),(0,i.kt)("h3",{id:"allownullableboolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowNullableBoolean")),(0,i.kt)("p",null,"Allows ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean | null | undefined")," in a boolean context.\nThis is unsafe because nullable booleans can be either ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," or nullish.\nSet this to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if you want to enforce explicit ",(0,i.kt)("inlineCode",{parentName:"p"},"bool ?? false")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"bool ?? true")," style.\nSet this to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if you don't mind implicitly treating false the same as a nullish value."),(0,i.kt)("h3",{id:"allownullablestring"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowNullableString")),(0,i.kt)("p",null,"Allows ",(0,i.kt)("inlineCode",{parentName:"p"},"string | null | undefined")," in a boolean context.\nThis is unsafe because nullable strings can be either an empty string or nullish.\nSet this to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if you don't mind implicitly treating an empty string the same as a nullish value."),(0,i.kt)("h3",{id:"allownullablenumber"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowNullableNumber")),(0,i.kt)("p",null,"Allows ",(0,i.kt)("inlineCode",{parentName:"p"},"number | null | undefined")," in a boolean context.\nThis is unsafe because nullable numbers can be either a falsy number or nullish.\nSet this to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if you don't mind implicitly treating zero or NaN the same as a nullish value."),(0,i.kt)("h3",{id:"allowany"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowAny")),(0,i.kt)("p",null,"Allows ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," in a boolean context.\nThis is unsafe for obvious reasons.\nSet this to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," at your own risk."),(0,i.kt)("h3",{id:"allowruletorunwithoutstrictnullchecksiknowwhatiamdoing"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing")),(0,i.kt)("p",null,"If this is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", then the rule will error on every file whose ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," does ",(0,i.kt)("em",{parentName:"p"},"not")," have the ",(0,i.kt)("inlineCode",{parentName:"p"},"strictNullChecks")," compiler option (or ",(0,i.kt)("inlineCode",{parentName:"p"},"strict"),") set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"Without ",(0,i.kt)("inlineCode",{parentName:"p"},"strictNullChecks"),", TypeScript essentially erases ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," from the types. This means when this rule inspects the types from a variable, ",(0,i.kt)("strong",{parentName:"p"},"it will not be able to tell that the variable might be ",(0,i.kt)("inlineCode",{parentName:"strong"},"null")," or ",(0,i.kt)("inlineCode",{parentName:"strong"},"undefined")),", which essentially makes this rule a lot less useful."),(0,i.kt)("p",null,"You should be using ",(0,i.kt)("inlineCode",{parentName:"p"},"strictNullChecks")," to ensure complete type-safety in your codebase."),(0,i.kt)("p",null,"If for some reason you cannot turn on ",(0,i.kt)("inlineCode",{parentName:"p"},"strictNullChecks"),", but still want to use this rule - you can use this option to allow it - but know that the behavior of this rule is ",(0,i.kt)("em",{parentName:"p"},"undefined")," with the compiler option turned off. We will not accept bug reports if you are using this option."),(0,i.kt)("h2",{id:"fixes-and-suggestions"},"Fixes and Suggestions"),(0,i.kt)("p",null,"This rule provides following fixes and suggestions for particular types in boolean context:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"boolean")," - Always allowed - no fix needed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," - (when ",(0,i.kt)("inlineCode",{parentName:"li"},"allowString")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),") - Provides following suggestions:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Change condition to check string's length (",(0,i.kt)("inlineCode",{parentName:"li"},"str")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"str.length > 0"),")"),(0,i.kt)("li",{parentName:"ul"},"Change condition to check for empty string (",(0,i.kt)("inlineCode",{parentName:"li"},"str")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},'str !== ""'),")"),(0,i.kt)("li",{parentName:"ul"},"Explicitly cast value to a boolean (",(0,i.kt)("inlineCode",{parentName:"li"},"str")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean(str)"),")"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"number")," - (when ",(0,i.kt)("inlineCode",{parentName:"li"},"allowNumber")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),"):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For ",(0,i.kt)("inlineCode",{parentName:"li"},"array.length")," - Provides ",(0,i.kt)("strong",{parentName:"li"},"autofix"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Change condition to check for 0 (",(0,i.kt)("inlineCode",{parentName:"li"},"array.length")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"array.length > 0"),")"))),(0,i.kt)("li",{parentName:"ul"},"For other number values - Provides following suggestions:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Change condition to check for 0 (",(0,i.kt)("inlineCode",{parentName:"li"},"num")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"num !== 0"),")"),(0,i.kt)("li",{parentName:"ul"},"Change condition to check for NaN (",(0,i.kt)("inlineCode",{parentName:"li"},"num")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"!Number.isNaN(num)"),")"),(0,i.kt)("li",{parentName:"ul"},"Explicitly cast value to a boolean (",(0,i.kt)("inlineCode",{parentName:"li"},"num")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean(num)"),")"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"object | null | undefined")," - (when ",(0,i.kt)("inlineCode",{parentName:"li"},"allowNullableObject")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),") - Provides ",(0,i.kt)("strong",{parentName:"li"},"autofix"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Change condition to check for null/undefined (",(0,i.kt)("inlineCode",{parentName:"li"},"maybeObj")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"maybeObj != null"),")"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"boolean | null | undefined")," - Provides following suggestions:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Explicitly treat nullish value the same as false (",(0,i.kt)("inlineCode",{parentName:"li"},"maybeBool")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"maybeBool ?? false"),")"),(0,i.kt)("li",{parentName:"ul"},"Change condition to check for true/false (",(0,i.kt)("inlineCode",{parentName:"li"},"maybeBool")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"maybeBool === true"),")"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string | null | undefined")," - Provides following suggestions:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Change condition to check for null/undefined (",(0,i.kt)("inlineCode",{parentName:"li"},"maybeStr")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"maybeStr != null"),")"),(0,i.kt)("li",{parentName:"ul"},"Explicitly treat nullish value the same as an empty string (",(0,i.kt)("inlineCode",{parentName:"li"},"maybeStr")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},'maybeStr ?? ""'),")"),(0,i.kt)("li",{parentName:"ul"},"Explicitly cast value to a boolean (",(0,i.kt)("inlineCode",{parentName:"li"},"maybeStr")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean(maybeStr)"),")"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"number | null | undefined")," - Provides following suggestions:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Change condition to check for null/undefined (",(0,i.kt)("inlineCode",{parentName:"li"},"maybeNum")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"maybeNum != null"),")"),(0,i.kt)("li",{parentName:"ul"},"Explicitly treat nullish value the same as 0 (",(0,i.kt)("inlineCode",{parentName:"li"},"maybeNum")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"maybeNum ?? 0"),")"),(0,i.kt)("li",{parentName:"ul"},"Explicitly cast value to a boolean (",(0,i.kt)("inlineCode",{parentName:"li"},"maybeNum")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean(maybeNum)"),")"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"any")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," - Provides following suggestions:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Explicitly cast value to a boolean (",(0,i.kt)("inlineCode",{parentName:"li"},"value")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean(value)"),")")))),(0,i.kt)("h2",{id:"related-to"},"Related To"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"TSLint: ",(0,i.kt)("a",{parentName:"li",href:"https://palantir.github.io/tslint/rules/strict-boolean-expressions"},"strict-boolean-expressions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/typescript-eslint-chinese/rules/no-unnecessary-condition"},"no-unnecessary-condition")," - Similar rule which reports always-truthy and always-falsy values in conditions")))}c.isMDXComponent=!0}}]);