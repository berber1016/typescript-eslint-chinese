"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[7091],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=l,g=m["".concat(i,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:l,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},728:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=n(3117),l=n(102),a=(n(7294),n(3905)),o=["components"],s={},i="restrict-template-expressions",p={unversionedId:"restrict-template-expressions",id:"restrict-template-expressions",title:"restrict-template-expressions",description:"Enforces template literal expressions to be of string type.",source:"@site/rules/restrict-template-expressions.md",sourceDirName:".",slug:"/restrict-template-expressions",permalink:"/typescript-eslint-chinese/rules/restrict-template-expressions",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"restrict-plus-operands",permalink:"/typescript-eslint-chinese/rules/restrict-plus-operands"},next:{title:"return-await",permalink:"/typescript-eslint-chinese/rules/return-await"}},c={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"<code>allowNumber</code>",id:"allownumber",level:3},{value:"<code>allowBoolean</code>",id:"allowboolean",level:3},{value:"<code>allowAny</code>",id:"allowany",level:3},{value:"<code>allowNullish</code>",id:"allownullish",level:3},{value:"<code>allowRegExp</code>",id:"allowregexp",level:3}],m={toc:u};function d(e){var t=e.components,n=(0,l.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"restrict-template-expressions"},(0,a.kt)("inlineCode",{parentName:"h1"},"restrict-template-expressions")),(0,a.kt)("p",null,"Enforces template literal expressions to be of ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," type."),(0,a.kt)("h2",{id:"rule-details"},"Rule Details"),(0,a.kt)("p",null,"Examples of code for this rule:"),(0,a.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const arg1 = [1, 2];\nconst msg1 = `arg1 = ${arg1}`;\n\nconst arg2 = { name: "Foo" };\nconst msg2 = `arg2 = ${arg2 || null}`;\n')),(0,a.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const arg = "foo";\nconst msg1 = `arg = ${arg}`;\nconst msg2 = `arg = ${arg || "default"}`;\n\nconst stringWithKindProp: string & { _kind?: "MyString" } = "foo";\nconst msg3 = `stringWithKindProp = ${stringWithKindProp}`;\n')),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("p",null,"The rule accepts an options object with the following properties:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type Options = {\n  // if true, also allow number type in template expressions\n  allowNumber?: boolean;\n  // if true, also allow boolean type in template expressions\n  allowBoolean?: boolean;\n  // if true, also allow any in template expressions\n  allowAny?: boolean;\n  // if true, also allow null and undefined in template expressions\n  allowNullish?: boolean;\n  // if true, also allow RegExp in template expressions\n  allowRegExp?: boolean;\n};\n\nconst defaults = {\n  allowNumber: true,\n  allowBoolean: false,\n  allowAny: false,\n  allowNullish: false,\n  allowRegExp: false,\n};\n")),(0,a.kt)("h3",{id:"allownumber"},(0,a.kt)("inlineCode",{parentName:"h3"},"allowNumber")),(0,a.kt)("p",null,"Examples of additional ",(0,a.kt)("strong",{parentName:"p"},"correct")," code for this rule with ",(0,a.kt)("inlineCode",{parentName:"p"},"{ allowNumber: true }"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const arg = 123;\nconst msg1 = `arg = ${arg}`;\nconst msg2 = `arg = ${arg || "zero"}`;\n')),(0,a.kt)("h3",{id:"allowboolean"},(0,a.kt)("inlineCode",{parentName:"h3"},"allowBoolean")),(0,a.kt)("p",null,"Examples of additional ",(0,a.kt)("strong",{parentName:"p"},"correct")," code for this rule with ",(0,a.kt)("inlineCode",{parentName:"p"},"{ allowBoolean: true }"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const arg = true;\nconst msg1 = `arg = ${arg}`;\nconst msg2 = `arg = ${arg || "not truthy"}`;\n')),(0,a.kt)("h3",{id:"allowany"},(0,a.kt)("inlineCode",{parentName:"h3"},"allowAny")),(0,a.kt)("p",null,"Examples of additional ",(0,a.kt)("strong",{parentName:"p"},"correct")," code for this rule with ",(0,a.kt)("inlineCode",{parentName:"p"},"{ allowAny: true }"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const user = JSON.parse(\'{ "name": "foo" }\');\nconst msg1 = `arg = ${user.name}`;\nconst msg2 = `arg = ${user.name || "the user with no name"}`;\n')),(0,a.kt)("h3",{id:"allownullish"},(0,a.kt)("inlineCode",{parentName:"h3"},"allowNullish")),(0,a.kt)("p",null,"Examples of additional ",(0,a.kt)("strong",{parentName:"p"},"correct")," code for this rule with ",(0,a.kt)("inlineCode",{parentName:"p"},"{ allowNullish: true }"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const arg = condition ? "ok" : null;\nconst msg1 = `arg = ${arg}`;\n')),(0,a.kt)("h3",{id:"allowregexp"},(0,a.kt)("inlineCode",{parentName:"h3"},"allowRegExp")),(0,a.kt)("p",null,"Examples of additional ",(0,a.kt)("strong",{parentName:"p"},"correct")," code for this rule with ",(0,a.kt)("inlineCode",{parentName:"p"},"{ allowRegExp: true }"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const arg = new RegExp("foo");\nconst msg1 = `arg = ${arg}`;\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const arg = /foo/;\nconst msg1 = `arg = ${arg}`;\n")))}d.isMDXComponent=!0}}]);