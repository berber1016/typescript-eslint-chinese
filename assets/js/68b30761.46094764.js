"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[9337],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=c(t),f=o,h=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return t?r.createElement(h,l(l({ref:n},u),{},{components:t})):r.createElement(h,l({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=d;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2383:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return p}});var r=t(3117),o=t(102),i=(t(7294),t(3905)),l=["components"],a={},s="explicit-function-return-type",c={unversionedId:"explicit-function-return-type",id:"explicit-function-return-type",title:"explicit-function-return-type",description:"Requires explicit return types on functions and class methods.",source:"@site/rules/explicit-function-return-type.md",sourceDirName:".",slug:"/explicit-function-return-type",permalink:"/typescript-eslint-chinese/rules/explicit-function-return-type",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"dot-notation",permalink:"/typescript-eslint-chinese/rules/dot-notation"},next:{title:"explicit-member-accessibility",permalink:"/typescript-eslint-chinese/rules/explicit-member-accessibility"}},u={},p=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"Configuring in a mixed JS/TS codebase",id:"configuring-in-a-mixed-jsts-codebase",level:3},{value:"<code>allowExpressions</code>",id:"allowexpressions",level:3},{value:"\u274c Incorrect",id:"-incorrect-1",level:4},{value:"\u2705 Correct",id:"-correct-1",level:4},{value:"<code>allowTypedFunctionExpressions</code>",id:"allowtypedfunctionexpressions",level:3},{value:"\u274c Incorrect",id:"-incorrect-2",level:4},{value:"\u2705 Correct",id:"-correct-2",level:4},{value:"<code>allowHigherOrderFunctions</code>",id:"allowhigherorderfunctions",level:3},{value:"\u274c Incorrect",id:"-incorrect-3",level:4},{value:"\u2705 Correct",id:"-correct-3",level:4},{value:"<code>allowDirectConstAssertionInArrowFunctions</code>",id:"allowdirectconstassertioninarrowfunctions",level:3},{value:"\u274c Incorrect",id:"-incorrect-4",level:4},{value:"\u2705 Correct",id:"-correct-4",level:4},{value:"<code>allowConciseArrowFunctionExpressionsStartingWithVoid</code>",id:"allowconcisearrowfunctionexpressionsstartingwithvoid",level:3},{value:"\u274c Incorrect",id:"-incorrect-5",level:4},{value:"\u2705 Correct",id:"-correct-5",level:4},{value:"<code>allowedNames</code>",id:"allowednames",level:3},{value:"When Not To Use It",id:"when-not-to-use-it",level:2},{value:"Further Reading",id:"further-reading",level:2}],d={toc:p};function f(e){var n=e.components,t=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"explicit-function-return-type"},(0,i.kt)("inlineCode",{parentName:"h1"},"explicit-function-return-type")),(0,i.kt)("p",null,"Requires explicit return types on functions and class methods."),(0,i.kt)("p",null,"Explicit types for function return values makes it clear to any calling code what type is returned.\nThis ensures that the return value is assigned to a variable of the correct type; or in the case\nwhere there is no return value, that the calling code doesn't try to use the undefined value when it\nshouldn't."),(0,i.kt)("h2",{id:"rule-details"},"Rule Details"),(0,i.kt)("p",null,"This rule aims to ensure that the values returned from functions are of the expected type."),(0,i.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// Should indicate that no value is returned (void)\nfunction test() {\n  return;\n}\n\n// Should indicate that a number is returned\nvar fn = function () {\n  return 1;\n};\n\n// Should indicate that a string is returned\nvar arrowFn = () => "test";\n\nclass Test {\n  // Should indicate that no value is returned (void)\n  method() {\n    return;\n  }\n}\n')),(0,i.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// No return value should be expected (void)\nfunction test(): void {\n  return;\n}\n\n// A return value of type number\nvar fn = function (): number {\n  return 1;\n};\n\n// A return value of type string\nvar arrowFn = (): string => "test";\n\nclass Test {\n  // No return value should be expected (void)\n  method(): void {\n    return;\n  }\n}\n')),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("p",null,"The rule accepts an options object with the following properties:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type Options = {\n  // if true, only functions which are part of a declaration will be checked\n  allowExpressions?: boolean;\n  // if true, type annotations are also allowed on the variable of a function expression rather than on the function directly\n  allowTypedFunctionExpressions?: boolean;\n  // if true, functions immediately returning another function expression will not be checked\n  allowHigherOrderFunctions?: boolean;\n  // if true, arrow functions immediately returning a `as const` value will not be checked\n  allowDirectConstAssertionInArrowFunctions?: boolean;\n  // if true, concise arrow functions that start with the void keyword will not be checked\n  allowConciseArrowFunctionExpressionsStartingWithVoid?: boolean;\n  /**\n   * An array of function/method names that will not have their arguments or their return values checked.\n   */\n  allowedNames?: string[];\n};\n\nconst defaults = {\n  allowExpressions: false,\n  allowTypedFunctionExpressions: true,\n  allowHigherOrderFunctions: true,\n  allowDirectConstAssertionInArrowFunctions: true,\n  allowConciseArrowFunctionExpressionsStartingWithVoid: false,\n  allowedNames: [],\n};\n")),(0,i.kt)("h3",{id:"configuring-in-a-mixed-jsts-codebase"},"Configuring in a mixed JS/TS codebase"),(0,i.kt)("p",null,"If you are working on a codebase within which you lint non-TypeScript code (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},".js"),"/",(0,i.kt)("inlineCode",{parentName:"p"},".mjs"),"/",(0,i.kt)("inlineCode",{parentName:"p"},".cjs"),"/",(0,i.kt)("inlineCode",{parentName:"p"},".jsx"),"), you should ensure that you should use ",(0,i.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/configuring#disabling-rules-only-for-a-group-of-files"},"ESLint ",(0,i.kt)("inlineCode",{parentName:"a"},"overrides"))," to only enable the rule on ",(0,i.kt)("inlineCode",{parentName:"p"},".ts"),"/",(0,i.kt)("inlineCode",{parentName:"p"},".mts"),"/",(0,i.kt)("inlineCode",{parentName:"p"},".cts"),"/",(0,i.kt)("inlineCode",{parentName:"p"},".tsx")," files. If you don't, then you will get unfixable lint errors reported within ",(0,i.kt)("inlineCode",{parentName:"p"},".js"),"/",(0,i.kt)("inlineCode",{parentName:"p"},".mjs"),"/",(0,i.kt)("inlineCode",{parentName:"p"},".cjs"),"/",(0,i.kt)("inlineCode",{parentName:"p"},".jsx")," files."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "rules": {\n    // disable the rule for all files\n    "@typescript-eslint/explicit-function-return-type": "off"\n  },\n  "overrides": [\n    {\n      // enable the rule specifically for TypeScript files\n      "files": ["*.ts", "*.mts", "*.cts", "*.tsx"],\n      "rules": {\n        "@typescript-eslint/explicit-function-return-type": ["error"]\n      }\n    }\n  ]\n}\n')),(0,i.kt)("h3",{id:"allowexpressions"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowExpressions")),(0,i.kt)("p",null,"Examples of code for this rule with ",(0,i.kt)("inlineCode",{parentName:"p"},"{ allowExpressions: true }"),":"),(0,i.kt)("h4",{id:"-incorrect-1"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"function test() {}\n\nconst fn = () => {};\n\nexport default () => {};\n")),(0,i.kt)("h4",{id:"-correct-1"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'node.addEventListener("click", () => {});\n\nnode.addEventListener("click", function () {});\n\nconst foo = arr.map((i) => i * i);\n')),(0,i.kt)("h3",{id:"allowtypedfunctionexpressions"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowTypedFunctionExpressions")),(0,i.kt)("p",null,"Examples of code for this rule with ",(0,i.kt)("inlineCode",{parentName:"p"},"{ allowTypedFunctionExpressions: true }"),":"),(0,i.kt)("h4",{id:"-incorrect-2"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'let arrowFn = () => "test";\n\nlet funcExpr = function () {\n  return "test";\n};\n\nlet objectProp = {\n  foo: () => 1,\n};\n')),(0,i.kt)("h4",{id:"-correct-2"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type FuncType = () => string;\n\nlet arrowFn: FuncType = () => 'test';\n\nlet funcExpr: FuncType = function() {\n  return 'test';\n};\n\nlet asTyped = (() => '') as () => string;\nlet castTyped = <() => string>(() => '');\n\ninterface ObjectType {\n  foo(): number;\n}\nlet objectProp: ObjectType = {\n  foo: () => 1,\n};\nlet objectPropAs = {\n  foo: () => 1,\n} as ObjectType;\nlet objectPropCast = <ObjectType>{\n  foo: () => 1,\n};\n\ndeclare functionWithArg(arg: () => number);\nfunctionWithArg(() => 1);\n\ndeclare functionWithObjectArg(arg: { method: () => number });\nfunctionWithObjectArg({\n  method() {\n    return 1;\n  },\n});\n")),(0,i.kt)("h3",{id:"allowhigherorderfunctions"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowHigherOrderFunctions")),(0,i.kt)("p",null,"Examples of code for this rule with ",(0,i.kt)("inlineCode",{parentName:"p"},"{ allowHigherOrderFunctions: true }"),":"),(0,i.kt)("h4",{id:"-incorrect-3"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"var arrowFn = () => () => {};\n\nfunction fn() {\n  return function () {};\n}\n")),(0,i.kt)("h4",{id:"-correct-3"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"var arrowFn = () => (): void => {};\n\nfunction fn() {\n  return function (): void {};\n}\n")),(0,i.kt)("h3",{id:"allowdirectconstassertioninarrowfunctions"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowDirectConstAssertionInArrowFunctions")),(0,i.kt)("p",null,"Examples of code for this rule with ",(0,i.kt)("inlineCode",{parentName:"p"},"{ allowDirectConstAssertionInArrowFunctions: true }"),":"),(0,i.kt)("h4",{id:"-incorrect-4"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const func = (value: number) => ({ type: "X", value } as any);\nconst func = (value: number) => ({ type: "X", value } as Action);\n')),(0,i.kt)("h4",{id:"-correct-4"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const func = (value: number) => ({ foo: "bar", value } as const);\nconst func = () => x as const;\n')),(0,i.kt)("h3",{id:"allowconcisearrowfunctionexpressionsstartingwithvoid"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowConciseArrowFunctionExpressionsStartingWithVoid")),(0,i.kt)("p",null,"Examples of code for this rule with ",(0,i.kt)("inlineCode",{parentName:"p"},"{ allowConciseArrowFunctionExpressionsStartingWithVoid: true }"),":"),(0,i.kt)("h4",{id:"-incorrect-5"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"var join = (a: string, b: string) => `${a}${b}`;\n\nconst log = (message: string) => {\n  console.log(message);\n};\n")),(0,i.kt)("h4",{id:"-correct-5"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"var log = (message: string) => void console.log(message);\n")),(0,i.kt)("h3",{id:"allowednames"},(0,i.kt)("inlineCode",{parentName:"h3"},"allowedNames")),(0,i.kt)("p",null,"You may pass function/method names you would like this rule to ignore, like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "@typescript-eslint/explicit-function-return-type": [\n    "error",\n    {\n      "allowedNames": ["ignoredFunctionName", "ignoredMethodName"]\n    }\n  ]\n}\n')),(0,i.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,i.kt)("p",null,"If you don't wish to prevent calling code from using function return values in unexpected ways, then\nyou will not need this rule."),(0,i.kt)("h2",{id:"further-reading"},"Further Reading"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"TypeScript ",(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/functions.html#function-types"},"Functions"))))}f.isMDXComponent=!0}}]);