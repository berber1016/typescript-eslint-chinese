"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[1379],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),m=l(n),d=o,y=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(y,p(p({ref:t},c),{},{components:n})):r.createElement(y,p({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,p=new Array(i);p[0]=m;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,p[1]=a;for(var l=2;l<i;l++)p[l]=n[l];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7050:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return u}});var r=n(3117),o=n(102),i=(n(7294),n(3905)),p=["components"],a={},s="consistent-type-imports",l={unversionedId:"consistent-type-imports",id:"consistent-type-imports",title:"consistent-type-imports",description:"Enforces consistent usage of type imports.",source:"@site/rules/consistent-type-imports.md",sourceDirName:".",slug:"/consistent-type-imports",permalink:"/typescript-eslint-chinese/rules/consistent-type-imports",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"consistent-type-exports",permalink:"/typescript-eslint-chinese/rules/consistent-type-exports"},next:{title:"default-param-last",permalink:"/typescript-eslint-chinese/rules/default-param-last"}},c={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"Options",id:"options",level:2},{value:"<code>prefer</code>",id:"prefer",level:3},{value:"<code>disallowTypeAnnotations</code>",id:"disallowtypeannotations",level:3},{value:"When Not To Use It",id:"when-not-to-use-it",level:2}],m={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,p);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"consistent-type-imports"},(0,i.kt)("inlineCode",{parentName:"h1"},"consistent-type-imports")),(0,i.kt)("p",null,"Enforces consistent usage of type imports."),(0,i.kt)("p",null,"TypeScript 3.8 added support for type-only imports.\nType-only imports allow you to specify that an import can only be used in a type location, allowing certain optimizations within compilers."),(0,i.kt)("h2",{id:"rule-details"},"Rule Details"),(0,i.kt)("p",null,"This rule aims to standardize the use of type imports style across the codebase."),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'type Options = {\n  prefer: "type-imports" | "no-type-imports";\n  disallowTypeAnnotations: boolean;\n};\n\nconst defaultOptions: Options = {\n  prefer: "type-imports",\n  disallowTypeAnnotations: true,\n};\n')),(0,i.kt)("h3",{id:"prefer"},(0,i.kt)("inlineCode",{parentName:"h3"},"prefer")),(0,i.kt)("p",null,"This option defines the expected import kind for type-only imports. Valid values for ",(0,i.kt)("inlineCode",{parentName:"p"},"prefer")," are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type-imports")," will enforce that you always use ",(0,i.kt)("inlineCode",{parentName:"li"},"import type Foo from '...'")," except referenced by metadata of decorators. It is default."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"no-type-imports")," will enforce that you always use ",(0,i.kt)("inlineCode",{parentName:"li"},"import Foo from '...'"),".")),(0,i.kt)("p",null,"Examples of ",(0,i.kt)("strong",{parentName:"p"},"correct")," code with ",(0,i.kt)("inlineCode",{parentName:"p"},"{prefer: 'type-imports'}"),", and ",(0,i.kt)("strong",{parentName:"p"},"incorrect")," code with ",(0,i.kt)("inlineCode",{parentName:"p"},"{prefer: 'no-type-imports'}"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import type { Foo } from "Foo";\nimport type Bar from "Bar";\ntype T = Foo;\nconst x: Bar = 1;\n')),(0,i.kt)("p",null,"Examples of ",(0,i.kt)("strong",{parentName:"p"},"incorrect")," code with ",(0,i.kt)("inlineCode",{parentName:"p"},"{prefer: 'type-imports'}"),", and ",(0,i.kt)("strong",{parentName:"p"},"correct")," code with ",(0,i.kt)("inlineCode",{parentName:"p"},"{prefer: 'no-type-imports'}"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { Foo } from "Foo";\nimport Bar from "Bar";\ntype T = Foo;\nconst x: Bar = 1;\n')),(0,i.kt)("h3",{id:"disallowtypeannotations"},(0,i.kt)("inlineCode",{parentName:"h3"},"disallowTypeAnnotations")),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", type imports in type annotations (",(0,i.kt)("inlineCode",{parentName:"p"},"import()"),") is not allowed.\nDefault is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"Examples of ",(0,i.kt)("strong",{parentName:"p"},"incorrect")," code with ",(0,i.kt)("inlineCode",{parentName:"p"},"{disallowTypeAnnotations: true}"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'type T = import("Foo").Foo;\nconst x: import("Bar") = 1;\n')),(0,i.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you are not using TypeScript 3.8 (or greater), then you will not be able to use this rule, as type-only imports are not allowed."),(0,i.kt)("li",{parentName:"ul"},"If you specifically want to use both import kinds for stylistic reasons, you can disable this rule.")))}d.isMDXComponent=!0}}]);