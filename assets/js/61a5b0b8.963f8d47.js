"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[3398],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),d=o,g=u["".concat(s,".").concat(d)]||u[d]||f[d]||a;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6381:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return f}});var r=t(3117),o=t(102),a=(t(7294),t(3905)),i=["components"],l={},s="type-annotation-spacing",c={unversionedId:"type-annotation-spacing",id:"type-annotation-spacing",title:"type-annotation-spacing",description:"Requires consistent spacing around type annotations.",source:"@site/rules/type-annotation-spacing.md",sourceDirName:".",slug:"/type-annotation-spacing",permalink:"/typescript-eslint-chinese/rules/type-annotation-spacing",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657186506,formattedLastUpdatedAt:"2022\u5e747\u67087\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"triple-slash-reference",permalink:"/typescript-eslint-chinese/rules/triple-slash-reference"},next:{title:"typedef",permalink:"/typescript-eslint-chinese/rules/typedef"}},p={},f=[{value:"Rule Details",id:"rule-details",level:2},{value:"Options",id:"options",level:2},{value:"defaults",id:"defaults",level:3},{value:"\u274c Incorrect",id:"-incorrect",level:4},{value:"\u2705 Correct",id:"-correct",level:4},{value:"after",id:"after",level:3},{value:"\u274c Incorrect",id:"-incorrect-1",level:4},{value:"\u2705 Correct",id:"-correct-1",level:4},{value:"before",id:"before",level:3},{value:"\u274c Incorrect",id:"-incorrect-2",level:4},{value:"\u2705 Correct",id:"-correct-2",level:4},{value:"overrides - colon",id:"overrides---colon",level:3},{value:"\u274c Incorrect",id:"-incorrect-3",level:4},{value:"\u2705 Correct",id:"-correct-3",level:4},{value:"overrides - arrow",id:"overrides---arrow",level:3},{value:"\u274c Incorrect",id:"-incorrect-4",level:4},{value:"\u2705 Correct",id:"-correct-4",level:4},{value:"When Not To Use It",id:"when-not-to-use-it",level:2},{value:"Further Reading",id:"further-reading",level:2},{value:"Related To",id:"related-to",level:2}],u={toc:f};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"type-annotation-spacing"},(0,a.kt)("inlineCode",{parentName:"h1"},"type-annotation-spacing")),(0,a.kt)("p",null,"Requires consistent spacing around type annotations."),(0,a.kt)("p",null,"Spacing around type annotations improves readability of the code. Although the most commonly used style guideline for type annotations in TypeScript prescribes adding a space after the colon, but not before it, it is subjective to the preferences of a project. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// with space after, but not before (default if no option is specified)\nlet foo: string = "bar";\n\n// with no spaces\nlet foo:string = "bar";\n\n// with space before and after\nlet foo : string = "bar";\n\n// with space before, but not after\nlet foo :string = "bar";\n\n// with spaces before and after the fat arrow (default if no option is specified)\ntype Foo = (string: name) => string;\n\n// with no spaces between the fat arrow\ntype Foo = (string: name)=>string;\n\n// with space after, but not before the fat arrow\ntype Foo = (string: name)=> string;\n\n// with space before, but not after the fat arrow\ntype Foo = (string: name) =>string;\n')),(0,a.kt)("h2",{id:"rule-details"},"Rule Details"),(0,a.kt)("p",null,"This rule aims to enforce specific spacing patterns around type annotations and function types in type literals."),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("p",null,"This rule has an object option:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"before": false'),", (default for colon) disallows spaces before the colon/arrow."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"before": true'),", (default for arrow) requires a space before the colon/arrow."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"after": true'),", (default) requires a space after the colon/arrow."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"after": false'),", disallows spaces after the colon/arrow."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"overrides"'),", overrides the default options for type annotations with ",(0,a.kt)("inlineCode",{parentName:"li"},"colon")," (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"const foo: string"),") and function types with ",(0,a.kt)("inlineCode",{parentName:"li"},"arrow")," (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"type Foo = () => {}"),"). Additionally allows granular overrides for ",(0,a.kt)("inlineCode",{parentName:"li"},"variable")," (",(0,a.kt)("inlineCode",{parentName:"li"},"const foo: string"),"),",(0,a.kt)("inlineCode",{parentName:"li"},"parameter")," (",(0,a.kt)("inlineCode",{parentName:"li"},"function foo(bar: string) {...}"),"),",(0,a.kt)("inlineCode",{parentName:"li"},"property")," (",(0,a.kt)("inlineCode",{parentName:"li"},"interface Foo { bar: string }"),") and ",(0,a.kt)("inlineCode",{parentName:"li"},"returnType")," (",(0,a.kt)("inlineCode",{parentName:"li"},"function foo(): string {...}"),") annotations.")),(0,a.kt)("h3",{id:"defaults"},"defaults"),(0,a.kt)("p",null,"Examples of code for this rule with no options at all:"),(0,a.kt)("h4",{id:"-incorrect"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'let foo:string = "bar";\nlet foo :string = "bar";\nlet foo : string = "bar";\n\nfunction foo():string {}\nfunction foo() :string {}\nfunction foo() : string {}\n\nclass Foo {\n    name:string;\n}\n\nclass Foo {\n    name :string;\n}\n\nclass Foo {\n    name : string;\n}\n\ntype Foo = ()=>{};\ntype Foo = () =>{};\ntype Foo = ()=> {};\n')),(0,a.kt)("h4",{id:"-correct"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'let foo: string = "bar";\n\nfunction foo(): string {}\n\nclass Foo {\n    name: string;\n}\n\ntype Foo = () => {};\n')),(0,a.kt)("h3",{id:"after"},"after"),(0,a.kt)("p",null,"Examples of code for this rule with ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "before": false, "after": true }'),":"),(0,a.kt)("h4",{id:"-incorrect-1"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'let foo:string = "bar";\nlet foo :string = "bar";\nlet foo : string = "bar";\n\nfunction foo():string {}\nfunction foo() :string {}\nfunction foo() : string {}\n\nclass Foo {\n    name:string;\n}\n\nclass Foo {\n    name :string;\n}\n\nclass Foo {\n    name : string;\n}\n\ntype Foo = ()=>{};\ntype Foo = () =>{};\ntype Foo = () => {};\n')),(0,a.kt)("h4",{id:"-correct-1"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'let foo: string = "bar";\n\nfunction foo(): string {}\n\nclass Foo {\n    name: string;\n}\n\ntype Foo = ()=> {};\n')),(0,a.kt)("h3",{id:"before"},"before"),(0,a.kt)("p",null,"Examples of code for this rule with ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "before": true, "after": true }')," options:"),(0,a.kt)("h4",{id:"-incorrect-2"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'let foo: string = "bar";\nlet foo:string = "bar";\nlet foo :string = "bar";\n\nfunction foo(): string {}\nfunction foo():string {}\nfunction foo() :string {}\n\nclass Foo {\n    name: string;\n}\n\nclass Foo {\n    name:string;\n}\n\nclass Foo {\n    name :string;\n}\n\ntype Foo = ()=>{};\ntype Foo = () =>{};\ntype Foo = ()=> {};\n')),(0,a.kt)("h4",{id:"-correct-2"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'let foo : string = "bar";\n\nfunction foo() : string {}\n\nclass Foo {\n    name : string;\n}\n\ntype Foo = () => {};\n')),(0,a.kt)("h3",{id:"overrides---colon"},"overrides - colon"),(0,a.kt)("p",null,"Examples of code for this rule with ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "before": false, "after": false, overrides: { colon: { before: true, after: true }} }')," options:"),(0,a.kt)("h4",{id:"-incorrect-3"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'let foo: string = "bar";\nlet foo:string = "bar";\nlet foo :string = "bar";\n\nfunction foo(): string {}\nfunction foo():string {}\nfunction foo() :string {}\n\nclass Foo {\n    name: string;\n}\n\nclass Foo {\n    name:string;\n}\n\nclass Foo {\n    name :string;\n}\n\ntype Foo = () =>{};\ntype Foo = ()=> {};\ntype Foo = () => {};\n')),(0,a.kt)("h4",{id:"-correct-3"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'let foo : string = "bar";\n\nfunction foo() : string {}\n\nclass Foo {\n    name : string;\n}\n\ntype Foo = {\n    name: (name : string)=>string;\n}\n\ntype Foo = ()=>{};\n')),(0,a.kt)("h3",{id:"overrides---arrow"},"overrides - arrow"),(0,a.kt)("p",null,"Examples of code for this rule with ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "before": false, "after": false, overrides: { arrow: { before: true, after: true }} }')," options:"),(0,a.kt)("h4",{id:"-incorrect-4"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'let foo: string = "bar";\nlet foo : string = "bar";\nlet foo :string = "bar";\n\nfunction foo(): string {}\nfunction foo():string {}\nfunction foo() :string {}\n\nclass Foo {\n    name: string;\n}\n\nclass Foo {\n    name : string;\n}\n\nclass Foo {\n    name :string;\n}\n\ntype Foo = ()=>{};\ntype Foo = () =>{};\ntype Foo = ()=> {};\n')),(0,a.kt)("h4",{id:"-correct-4"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'let foo:string = "bar";\n\nfunction foo():string {}\n\nclass Foo {\n    name:string;\n}\n\ntype Foo = () => {};\n')),(0,a.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,a.kt)("p",null,"If you don't want to enforce spacing for your type annotations, you can safely turn this rule off."),(0,a.kt)("h2",{id:"further-reading"},"Further Reading"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://basarat.gitbooks.io/typescript/docs/types/type-system.html"},"TypeScript Type System")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/type-inference.html"},"Type Inference"))),(0,a.kt)("h2",{id:"related-to"},"Related To"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"TSLint: ",(0,a.kt)("a",{parentName:"li",href:"https://palantir.github.io/tslint/rules/typedef-whitespace/"},(0,a.kt)("inlineCode",{parentName:"a"},"typedef-whitespace")))))}d.isMDXComponent=!0}}]);