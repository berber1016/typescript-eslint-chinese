"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[7609],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),a=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=a(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=a(n),f=o,y=d["".concat(l,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(y,s(s({ref:t},c),{},{components:n})):r.createElement(y,s({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,s[1]=p;for(var a=2;a<i;a++)s[a]=n[a];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1343:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return p},metadata:function(){return a},toc:function(){return u}});var r=n(3117),o=n(102),i=(n(7294),n(3905)),s=["components"],p={},l="consistent-type-exports",a={unversionedId:"consistent-type-exports",id:"consistent-type-exports",title:"consistent-type-exports",description:"Enforces consistent usage of type exports.",source:"@site/rules/consistent-type-exports.md",sourceDirName:".",slug:"/consistent-type-exports",permalink:"/typescript-eslint-chinese/rules/consistent-type-exports",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"consistent-type-definitions",permalink:"/typescript-eslint-chinese/rules/consistent-type-definitions"},next:{title:"consistent-type-imports",permalink:"/typescript-eslint-chinese/rules/consistent-type-imports"}},c={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"<code>fixMixedExportsWithInlineTypeSpecifier</code>",id:"fixmixedexportswithinlinetypespecifier",level:3},{value:"\u274c Incorrect",id:"-incorrect-1",level:3},{value:"\u2705 Correct",id:"-correct-1",level:3},{value:"When Not To Use It",id:"when-not-to-use-it",level:2}],d={toc:u};function f(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"consistent-type-exports"},(0,i.kt)("inlineCode",{parentName:"h1"},"consistent-type-exports")),(0,i.kt)("p",null,"Enforces consistent usage of type exports."),(0,i.kt)("p",null,"TypeScript 3.8 added support for type-only exports."),(0,i.kt)("p",null,"Type-only exports allow you to specify that 1 or more named exports are exported as type-only. This allows\ntranspilers to drop exports without knowing the types of the dependencies."),(0,i.kt)("h2",{id:"rule-details"},"Rule Details"),(0,i.kt)("p",null,"This rule aims to standardize the use of type exports style across a codebase."),(0,i.kt)("p",null,"Given a class ",(0,i.kt)("inlineCode",{parentName:"p"},"Button"),", and an interface ",(0,i.kt)("inlineCode",{parentName:"p"},"ButtonProps"),", examples of code:"),(0,i.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'interface ButtonProps {\n  onClick: () => void;\n}\nclass Button implements ButtonProps {\n  onClick() {\n    console.log("button!");\n  }\n}\nexport { Button, ButtonProps };\n')),(0,i.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'interface ButtonProps {\n  onClick: () => void;\n}\nclass Button implements ButtonProps {\n  onClick() {\n    console.log("button!");\n  }\n}\nexport { Button };\nexport type { ButtonProps };\n')),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface Options {\n  fixMixedExportsWithInlineTypeSpecifier?: boolean;\n}\n\nconst defaultOptions: Options = {\n  fixMixedExportsWithInlineTypeSpecifier: false,\n};\n")),(0,i.kt)("h3",{id:"fixmixedexportswithinlinetypespecifier"},(0,i.kt)("inlineCode",{parentName:"h3"},"fixMixedExportsWithInlineTypeSpecifier")),(0,i.kt)("p",null,'When this is set to true, the rule will autofix "mixed" export cases using TS 4.5\'s "inline type specifier".\nIf you are using a TypeScript version less than 4.5, then you will not be able to use this option.'),(0,i.kt)("p",null,"For example the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const x = 1;\ntype T = number;\n\nexport { x, T };\n")),(0,i.kt)("p",null,"With ",(0,i.kt)("inlineCode",{parentName:"p"},"{fixMixedExportsWithInlineTypeSpecifier: true}")," will be fixed to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const x = 1;\ntype T = number;\n\nexport { x, type T };\n")),(0,i.kt)("p",null,"With ",(0,i.kt)("inlineCode",{parentName:"p"},"{fixMixedExportsWithInlineTypeSpecifier: false}")," will be fixed to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const x = 1;\ntype T = number;\n\nexport type { T };\nexport { x };\n")),(0,i.kt)("h3",{id:"-incorrect-1"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'export { Button } from "some-library";\nexport type { ButtonProps } from "some-library";\n')),(0,i.kt)("h3",{id:"-correct-1"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'export { Button, type ButtonProps } from "some-library";\n')),(0,i.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you are using a TypeScript version less than 3.8, then you will not be able to use this rule as type exports are not supported."),(0,i.kt)("li",{parentName:"ul"},"If you specifically want to use both export kinds for stylistic reasons, you can disable this rule."),(0,i.kt)("li",{parentName:"ul"},"If you use ",(0,i.kt)("inlineCode",{parentName:"li"},"--isolatedModules")," the compiler would error if a type is not re-exported using ",(0,i.kt)("inlineCode",{parentName:"li"},"export type"),". If you also don't wish to enforce one style over the other, you can disable this rule.")))}f.isMDXComponent=!0}}]);