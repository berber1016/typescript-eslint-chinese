"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[4578],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(t),f=a,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return t?r.createElement(m,l(l({ref:n},c),{},{components:t})):r.createElement(m,l({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1064:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p}});var r=t(3117),a=t(102),i=(t(7294),t(3905)),l=["components"],o={},s="prefer-includes",u={unversionedId:"prefer-includes",id:"prefer-includes",title:"prefer-includes",description:"Enforces includes method over indexOf method.",source:"@site/rules/prefer-includes.md",sourceDirName:".",slug:"/prefer-includes",permalink:"/typescript-eslint-chinese/rules/prefer-includes",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"prefer-function-type",permalink:"/typescript-eslint-chinese/rules/prefer-function-type"},next:{title:"prefer-literal-enum-member",permalink:"/typescript-eslint-chinese/rules/prefer-literal-enum-member"}},c={},p=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"When Not To Use It",id:"when-not-to-use-it",level:2}],d={toc:p};function f(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"prefer-includes"},(0,i.kt)("inlineCode",{parentName:"h1"},"prefer-includes")),(0,i.kt)("p",null,"Enforces ",(0,i.kt)("inlineCode",{parentName:"p"},"includes")," method over ",(0,i.kt)("inlineCode",{parentName:"p"},"indexOf")," method."),(0,i.kt)("p",null,"Until ES5, we were using ",(0,i.kt)("inlineCode",{parentName:"p"},"String#indexOf")," method to check whether a string contains an arbitrary substring or not.\nUntil ES2015, we were using ",(0,i.kt)("inlineCode",{parentName:"p"},"Array#indexOf")," method to check whether an array contains an arbitrary value or not."),(0,i.kt)("p",null,"ES2015 has added ",(0,i.kt)("inlineCode",{parentName:"p"},"String#includes")," and ES2016 has added ",(0,i.kt)("inlineCode",{parentName:"p"},"Array#includes"),".\nIt makes code more understandable if we use those ",(0,i.kt)("inlineCode",{parentName:"p"},"includes")," methods for the purpose."),(0,i.kt)("h2",{id:"rule-details"},"Rule Details"),(0,i.kt)("p",null,"This rule is aimed at suggesting ",(0,i.kt)("inlineCode",{parentName:"p"},"includes")," method if ",(0,i.kt)("inlineCode",{parentName:"p"},"indexOf")," method was used to check whether an object contains an arbitrary value or not."),(0,i.kt)("p",null,"If the receiver object of the ",(0,i.kt)("inlineCode",{parentName:"p"},"indexOf")," method call has ",(0,i.kt)("inlineCode",{parentName:"p"},"includes")," method and the two methods have the same parameters, this rule does suggestion.\nThere are such types: ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Array"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ReadonlyArray"),", and typed arrays."),(0,i.kt)("p",null,"Additionally, this rule reports the tests of simple regular expressions in favor of ",(0,i.kt)("inlineCode",{parentName:"p"},"String#includes"),"."),(0,i.kt)("p",null,"Examples of code for this rule:"),(0,i.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'let str: string;\nlet array: any[];\nlet readonlyArray: ReadonlyArray<any>;\nlet typedArray: UInt8Array;\nlet maybe: string;\nlet userDefined: {\n  indexOf(x: any): number;\n  includes(x: any): boolean;\n};\n\nstr.indexOf(value) !== -1;\narray.indexOf(value) !== -1;\nreadonlyArray.indexOf(value) === -1;\ntypedArray.indexOf(value) > -1;\nmaybe?.indexOf("") !== -1;\nuserDefined.indexOf(value) >= 0;\n\n// simple RegExp test\n/foo/.test(str);\n')),(0,i.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"let array: any[];\nlet readonlyArray: ReadonlyArray<any>;\nlet typedArray: UInt8Array;\nlet userDefined: {\n  indexOf(x: any): number;\n  includes(x: any): boolean;\n};\nlet mismatchExample: {\n  indexOf(x: any, fromIndex?: number): number;\n  includes(x: any): boolean;\n};\n\nstr.includes(value);\narray.includes(value);\nreadonlyArray.includes(value);\ntypedArray.includes(value);\nuserDefined.includes(value);\n\n// the two methods have different parameters.\nmismatchExample.indexOf(value) >= 0;\n")),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsonc"},'// .eslintrc.json\n{\n  "rules": {\n    "@typescript-eslint/prefer-includes": "warn"\n  }\n}\n')),(0,i.kt)("p",null,"This rule is not configurable."),(0,i.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,i.kt)("p",null,"If you don't want to suggest ",(0,i.kt)("inlineCode",{parentName:"p"},"includes"),", you can safely turn this rule off."))}f.isMDXComponent=!0}}]);