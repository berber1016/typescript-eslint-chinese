"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[5828],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return g}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=c(t),g=o,f=d["".concat(s,".").concat(g)]||d[g]||u[g]||i;return t?r.createElement(f,l(l({ref:n},p),{},{components:t})):r.createElement(f,l({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=d;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3480:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return u}});var r=t(3117),o=t(102),i=(t(7294),t(3905)),l=["components"],a={},s="prefer-nullish-coalescing",c={unversionedId:"prefer-nullish-coalescing",id:"prefer-nullish-coalescing",title:"prefer-nullish-coalescing",description:"Enforces using the nullish coalescing operator instead of logical chaining.",source:"@site/rules/prefer-nullish-coalescing.md",sourceDirName:".",slug:"/prefer-nullish-coalescing",permalink:"/typescript-eslint-chinese/rules/prefer-nullish-coalescing",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"prefer-namespace-keyword",permalink:"/typescript-eslint-chinese/rules/prefer-namespace-keyword"},next:{title:"prefer-optional-chain",permalink:"/typescript-eslint-chinese/rules/prefer-optional-chain"}},p={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"Options",id:"options",level:2},{value:"<code>ignoreConditionalTests</code>",id:"ignoreconditionaltests",level:3},{value:"<code>ignoreMixedLogicalExpressions</code>",id:"ignoremixedlogicalexpressions",level:3},{value:"When Not To Use It",id:"when-not-to-use-it",level:2},{value:"Further Reading",id:"further-reading",level:2}],d={toc:u};function g(e){var n=e.components,t=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"prefer-nullish-coalescing"},(0,i.kt)("inlineCode",{parentName:"h1"},"prefer-nullish-coalescing")),(0,i.kt)("p",null,"Enforces using the nullish coalescing operator instead of logical chaining."),(0,i.kt)("p",null,"TypeScript 3.7 added support for the nullish coalescing operator.\nThis operator allows you to safely cascade a value when dealing with ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'function myFunc(foo: string | null) {\n  return foo ?? "a string";\n}\n\n// is equivalent to\n\nfunction myFunc(foo: string | null) {\n  return foo !== null && foo !== undefined ? foo : "a string";\n}\n')),(0,i.kt)("p",null,"Because the nullish coalescing operator ",(0,i.kt)("em",{parentName:"p"},"only")," coalesces when the original value is ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),", it is much safer than relying upon logical OR operator chaining ",(0,i.kt)("inlineCode",{parentName:"p"},"||"),"; which coalesces on any ",(0,i.kt)("em",{parentName:"p"},"falsy")," value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const emptyString = "";\n\nconst nullish1 = emptyString ?? "unsafe";\nconst logical1 = emptyString || "unsafe";\n\n// nullish1 === \'\'\n// logical1 === \'unsafe\'\n\ndeclare const nullString: string | null;\n\nconst nullish2 = nullString ?? "safe";\nconst logical2 = nullString || "safe";\n\n// nullish2 === \'safe\'\n// logical2 === \'safe\'\n')),(0,i.kt)("h2",{id:"rule-details"},"Rule Details"),(0,i.kt)("p",null,"This rule aims enforce the usage of the safer operator."),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type Options = [\n  {\n    ignoreConditionalTests?: boolean;\n    ignoreMixedLogicalExpressions?: boolean;\n  }\n];\n\nconst defaultOptions = [\n  {\n    ignoreConditionalTests: true,\n    ignoreMixedLogicalExpressions: true,\n  },\n];\n")),(0,i.kt)("h3",{id:"ignoreconditionaltests"},(0,i.kt)("inlineCode",{parentName:"h3"},"ignoreConditionalTests")),(0,i.kt)("p",null,"Setting this option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," (the default) will cause the rule to ignore any cases that are located within a conditional test."),(0,i.kt)("p",null,"Generally expressions within conditional tests intentionally use the falsy fallthrough behavior of the logical or operator, meaning that fixing the operator to the nullish coalesce operator could cause bugs."),(0,i.kt)("p",null,"If you're looking to enforce stricter conditional tests, you should consider using the ",(0,i.kt)("inlineCode",{parentName:"p"},"strict-boolean-expressions")," rule."),(0,i.kt)("p",null,"Incorrect code for ",(0,i.kt)("inlineCode",{parentName:"p"},"ignoreConditionalTests: false"),", and correct code for ",(0,i.kt)("inlineCode",{parentName:"p"},"ignoreConditionalTests: true"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"declare const a: string | null;\ndeclare const b: string | null;\n\nif (a || b) {\n}\nwhile (a || b) {}\ndo {} while (a || b);\nfor (let i = 0; a || b; i += 1) {}\na || b ? true : false;\n")),(0,i.kt)("p",null,"Correct code for ",(0,i.kt)("inlineCode",{parentName:"p"},"ignoreConditionalTests: false"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"declare const a: string | null;\ndeclare const b: string | null;\n\nif (a ?? b) {\n}\nwhile (a ?? b) {}\ndo {} while (a ?? b);\nfor (let i = 0; a ?? b; i += 1) {}\na ?? b ? true : false;\n")),(0,i.kt)("h3",{id:"ignoremixedlogicalexpressions"},(0,i.kt)("inlineCode",{parentName:"h3"},"ignoreMixedLogicalExpressions")),(0,i.kt)("p",null,"Setting this option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," (the default) will cause the rule to ignore any logical or expressions that are part of a mixed logical expression (with ",(0,i.kt)("inlineCode",{parentName:"p"},"&&"),")."),(0,i.kt)("p",null,"Generally expressions within mixed logical expressions intentionally use the falsy fallthrough behavior of the logical or operator, meaning that fixing the operator to the nullish coalesce operator could cause bugs."),(0,i.kt)("p",null,"If you're looking to enforce stricter conditional tests, you should consider using the ",(0,i.kt)("inlineCode",{parentName:"p"},"strict-boolean-expressions")," rule."),(0,i.kt)("p",null,"Incorrect code for ",(0,i.kt)("inlineCode",{parentName:"p"},"ignoreMixedLogicalExpressions: false"),", and correct code for ",(0,i.kt)("inlineCode",{parentName:"p"},"ignoreMixedLogicalExpressions: true"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"declare const a: string | null;\ndeclare const b: string | null;\ndeclare const c: string | null;\ndeclare const d: string | null;\n\na || (b && c);\n(a && b) || c || d;\na || (b && c) || d;\na || (b && c && d);\n")),(0,i.kt)("p",null,"Correct code for ",(0,i.kt)("inlineCode",{parentName:"p"},"ignoreMixedLogicalExpressions: false"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"declare const a: string | null;\ndeclare const b: string | null;\ndeclare const c: string | null;\ndeclare const d: string | null;\n\na ?? (b && c);\n(a && b) ?? c ?? d;\na ?? (b && c) ?? d;\na ?? (b && c && d);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"NOTE:"))," Errors for this specific case will be presented as suggestions (see below), instead of fixes. This is because it is not always safe to automatically convert ",(0,i.kt)("inlineCode",{parentName:"p"},"||")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"??")," within a mixed logical expression, as we cannot tell the intended precedence of the operator. Note that by design, ",(0,i.kt)("inlineCode",{parentName:"p"},"??")," requires parentheses when used with ",(0,i.kt)("inlineCode",{parentName:"p"},"&&")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"||")," in the same expression."),(0,i.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,i.kt)("p",null,"If you are not using TypeScript 3.7 (or greater), then you will not be able to use this rule, as the operator is not supported."),(0,i.kt)("h2",{id:"further-reading"},"Further Reading"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html"},"TypeScript 3.7 Release Notes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/tc39/proposal-nullish-coalescing/"},"Nullish Coalescing Operator Proposal"))))}g.isMDXComponent=!0}}]);