"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[8847],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),y=c(n),f=o,d=y["".concat(i,".").concat(f)]||y[f]||u[f]||a;return n?r.createElement(d,s(s({ref:t},p),{},{components:n})):r.createElement(d,s({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=y;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},702:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=n(3117),o=n(102),a=(n(7294),n(3905)),s=["components"],l={},i="no-unnecessary-type-assertion",c={unversionedId:"no-unnecessary-type-assertion",id:"no-unnecessary-type-assertion",title:"no-unnecessary-type-assertion",description:"Disallows type assertions that do not change the type of an expression.",source:"@site/rules/no-unnecessary-type-assertion.md",sourceDirName:".",slug:"/no-unnecessary-type-assertion",permalink:"/typescript-eslint-chinese/rules/no-unnecessary-type-assertion",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"no-unnecessary-type-arguments",permalink:"/typescript-eslint-chinese/rules/no-unnecessary-type-arguments"},next:{title:"no-unnecessary-type-constraint",permalink:"/typescript-eslint-chinese/rules/no-unnecessary-type-constraint"}},p={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"When Not To Use It",id:"when-not-to-use-it",level:2},{value:"Related To",id:"related-to",level:2}],y={toc:u};function f(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"no-unnecessary-type-assertion"},(0,a.kt)("inlineCode",{parentName:"h1"},"no-unnecessary-type-assertion")),(0,a.kt)("p",null,"Disallows type assertions that do not change the type of an expression."),(0,a.kt)("p",null,"This rule prohibits using a type assertion that does not change the type of an expression."),(0,a.kt)("h2",{id:"rule-details"},"Rule Details"),(0,a.kt)("p",null,"This rule aims to prevent unnecessary type assertions."),(0,a.kt)("p",null,"Examples of code for this rule:"),(0,a.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const foo = 3;\nconst bar = foo!;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const foo = <3>3;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type Foo = 3;\nconst foo = <Foo>3;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type Foo = 3;\nconst foo = 3 as Foo;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function foo(x: number): number {\n  return x!; // unnecessary non-null\n}\n")),(0,a.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const foo = <number>3;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const foo = 3 as number;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const foo = "foo" as const;\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function foo(x: number | undefined): number {\n  return x!;\n}\n")),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("p",null,"This rule optionally takes an object with a single property ",(0,a.kt)("inlineCode",{parentName:"p"},"typesToIgnore"),", which can be set to a list of type names to ignore."),(0,a.kt)("p",null,"For example, with ",(0,a.kt)("inlineCode",{parentName:"p"},"@typescript-eslint/no-unnecessary-type-assertion: [\"error\", { typesToIgnore: ['Foo'] }]"),", the following is ",(0,a.kt)("strong",{parentName:"p"},"correct"),' code":'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type Foo = 3;\nconst foo: Foo = 3;\n")),(0,a.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,a.kt)("p",null,"If you don't care about having no-op type assertions in your code, then you can turn off this rule."),(0,a.kt)("h2",{id:"related-to"},"Related To"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"TSLint: ",(0,a.kt)("a",{parentName:"li",href:"https://palantir.github.io/tslint/rules/no-unnecessary-type-assertion/"},(0,a.kt)("inlineCode",{parentName:"a"},"no-unnecessary-type-assertion")))))}f.isMDXComponent=!0}}]);