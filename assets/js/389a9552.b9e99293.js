"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[2729],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return y}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),l=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=l(t),y=a,d=f["".concat(u,".").concat(y)]||f[y]||p[y]||o;return t?r.createElement(d,i(i({ref:n},c),{},{components:t})):r.createElement(d,i({ref:n},c))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4647:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return u},default:function(){return y},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=t(3117),a=t(102),o=(t(7294),t(3905)),i=["components"],s={},u="no-unsafe-return",l={unversionedId:"no-unsafe-return",id:"no-unsafe-return",title:"no-unsafe-return",description:"Disallows returning a value with type any from a function.",source:"@site/rules/no-unsafe-return.md",sourceDirName:".",slug:"/no-unsafe-return",permalink:"/typescript-eslint-chinese/rules/no-unsafe-return",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"no-unsafe-member-access",permalink:"/typescript-eslint-chinese/rules/no-unsafe-member-access"},next:{title:"no-unused-expressions",permalink:"/typescript-eslint-chinese/rules/no-unused-expressions"}},c={},p=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"Related To",id:"related-to",level:2}],f={toc:p};function y(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"no-unsafe-return"},(0,o.kt)("inlineCode",{parentName:"h1"},"no-unsafe-return")),(0,o.kt)("p",null,"Disallows returning a value with type ",(0,o.kt)("inlineCode",{parentName:"p"},"any")," from a function."),(0,o.kt)("p",null,"Despite your best intentions, the ",(0,o.kt)("inlineCode",{parentName:"p"},"any")," type can sometimes leak into your codebase.\nReturned ",(0,o.kt)("inlineCode",{parentName:"p"},"any")," typed values are not checked at all by TypeScript, so it creates a potential safety hole, and source of bugs in your codebase."),(0,o.kt)("h2",{id:"rule-details"},"Rule Details"),(0,o.kt)("p",null,"This rule disallows returning ",(0,o.kt)("inlineCode",{parentName:"p"},"any")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"any[]")," from a function.\nThis rule also compares the return type to the function's declared/inferred return type to ensure you don't return an unsafe ",(0,o.kt)("inlineCode",{parentName:"p"},"any")," in a generic position to a receiver that's expecting a specific type. For example, it will error if you return ",(0,o.kt)("inlineCode",{parentName:"p"},"Set<any>")," from a function declared as returning ",(0,o.kt)("inlineCode",{parentName:"p"},"Set<string>"),"."),(0,o.kt)("p",null,"Examples of code for this rule:"),(0,o.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function foo1() {\n  return 1 as any;\n}\nfunction foo2() {\n  return Object.create(null);\n}\nconst foo3 = () => {\n  return 1 as any;\n};\nconst foo4 = () => Object.create(null);\n\nfunction foo5() {\n  return [] as any[];\n}\nfunction foo6() {\n  return [] as Array<any>;\n}\nfunction foo7() {\n  return [] as readonly any[];\n}\nfunction foo8() {\n  return [] as Readonly<any[]>;\n}\nconst foo9 = () => {\n  return [] as any[];\n};\nconst foo10 = () => [] as any[];\n\nconst foo11 = (): string[] => [1, 2, 3] as any[];\n\n// generic position examples\nfunction assignability1(): Set<string> {\n  return new Set<any>([1]);\n}\ntype TAssign = () => Set<string>;\nconst assignability2: TAssign = () => new Set<any>([true]);\n")),(0,o.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'function foo1() {\n  return 1;\n}\nfunction foo2() {\n  return Object.create(null) as Record<string, unknown>;\n}\n\nconst foo3 = () => [];\nconst foo4 = () => ["a"];\n\nfunction assignability1(): Set<string> {\n  return new Set<string>(["foo"]);\n}\ntype TAssign = () => Set<string>;\nconst assignability2: TAssign = () => new Set(["foo"]);\n')),(0,o.kt)("p",null,"There are cases where the rule allows to return ",(0,o.kt)("inlineCode",{parentName:"p"},"any")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"unknown"),"."),(0,o.kt)("p",null,"Examples of ",(0,o.kt)("inlineCode",{parentName:"p"},"any")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"unknown")," return that are allowed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function foo1(): unknown {\n  return JSON.parse(singleObjString); // Return type for JSON.parse is any.\n}\n\nfunction foo2(): unknown[] {\n  return [] as any[];\n}\n")),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsonc"},'// .eslintrc.json\n{\n  "rules": {\n    "@typescript-eslint/no-unsafe-return": "error"\n  }\n}\n')),(0,o.kt)("p",null,"This rule is not configurable."),(0,o.kt)("h2",{id:"related-to"},"Related To"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/typescript-eslint-chinese/rules/no-explicit-any"},(0,o.kt)("inlineCode",{parentName:"a"},"no-explicit-any"))),(0,o.kt)("li",{parentName:"ul"},"TSLint: ",(0,o.kt)("a",{parentName:"li",href:"https://palantir.github.io/tslint/rules/no-unsafe-any/"},(0,o.kt)("inlineCode",{parentName:"a"},"no-unsafe-any")))))}y.isMDXComponent=!0}}]);