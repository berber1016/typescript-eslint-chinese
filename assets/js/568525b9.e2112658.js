"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[305],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=u(t),d=a,y=f["".concat(s,".").concat(d)]||f[d]||c[d]||o;return t?r.createElement(y,i(i({ref:n},p),{},{components:t})):r.createElement(y,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},1670:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var r=t(3117),a=t(102),o=(t(7294),t(3905)),i=["components"],l={},s="no-unsafe-argument",u={unversionedId:"no-unsafe-argument",id:"no-unsafe-argument",title:"no-unsafe-argument",description:"Disallows calling a function with a value with type any.",source:"@site/rules/no-unsafe-argument.md",sourceDirName:".",slug:"/no-unsafe-argument",permalink:"/typescript-eslint-chinese/rules/no-unsafe-argument",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"no-unnecessary-type-constraint",permalink:"/typescript-eslint-chinese/rules/no-unnecessary-type-constraint"},next:{title:"no-unsafe-assignment",permalink:"/typescript-eslint-chinese/rules/no-unsafe-assignment"}},p={},c=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"Related To",id:"related-to",level:2}],f={toc:c};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"no-unsafe-argument"},(0,o.kt)("inlineCode",{parentName:"h1"},"no-unsafe-argument")),(0,o.kt)("p",null,"Disallows calling a function with a value with type ",(0,o.kt)("inlineCode",{parentName:"p"},"any"),"."),(0,o.kt)("p",null,"Despite your best intentions, the ",(0,o.kt)("inlineCode",{parentName:"p"},"any")," type can sometimes leak into your codebase.\nCall a function with ",(0,o.kt)("inlineCode",{parentName:"p"},"any")," typed argument are not checked at all by TypeScript, so it creates a potential safety hole, and source of bugs in your codebase."),(0,o.kt)("h2",{id:"rule-details"},"Rule Details"),(0,o.kt)("p",null,"This rule disallows calling a function with ",(0,o.kt)("inlineCode",{parentName:"p"},"any")," in its arguments, and it will disallow spreading ",(0,o.kt)("inlineCode",{parentName:"p"},"any[]"),".\nThis rule also disallows spreading a tuple type with one of its elements typed as ",(0,o.kt)("inlineCode",{parentName:"p"},"any"),".\nThis rule also compares the argument's type to the variable's type to ensure you don't pass an unsafe ",(0,o.kt)("inlineCode",{parentName:"p"},"any")," in a generic position to a receiver that's expecting a specific type. For example, it will error if you assign ",(0,o.kt)("inlineCode",{parentName:"p"},"Set<any>")," to an argument declared as ",(0,o.kt)("inlineCode",{parentName:"p"},"Set<string>"),"."),(0,o.kt)("p",null,"Examples of code for this rule:"),(0,o.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'declare function foo(arg1: string, arg2: number, arg3: string): void;\n\nconst anyTyped = 1 as any;\n\nfoo(...anyTyped);\nfoo(anyTyped, 1, "a");\n\nconst anyArray: any[] = [];\nfoo(...anyArray);\n\nconst tuple1 = ["a", anyTyped, "b"] as const;\nfoo(...tuple1);\n\nconst tuple2 = [1] as const;\nfoo("a", ...tuple, anyTyped);\n\ndeclare function bar(arg1: string, arg2: number, ...rest: string[]): void;\nconst x = [1, 2] as [number, ...number[]];\nfoo("a", ...x, anyTyped);\n\ndeclare function baz(arg1: Set<string>, arg2: Map<string, string>): void;\nfoo(new Set<any>(), new Map<any, string>());\n')),(0,o.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'declare function foo(arg1: string, arg2: number, arg3: string): void;\n\nfoo("a", 1, "b");\n\nconst tuple1 = ["a", 1, "b"] as const;\nfoo(...tuple1);\n\ndeclare function bar(arg1: string, arg2: number, ...rest: string[]): void;\nconst array: string[] = ["a"];\nbar("a", 1, ...array);\n\ndeclare function baz(arg1: Set<string>, arg2: Map<string, string>): void;\nfoo(new Set<string>(), new Map<string, string>());\n')),(0,o.kt)("p",null,"There are cases where the rule allows passing an argument of ",(0,o.kt)("inlineCode",{parentName:"p"},"any")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"unknown"),"."),(0,o.kt)("p",null,"Example of ",(0,o.kt)("inlineCode",{parentName:"p"},"any")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"unknown")," assignment that are allowed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"declare function foo(arg1: unknown, arg2: Set<unkown>, arg3: unknown[]): void;\nfoo(1 as any, new Set<any>(), [] as any[]);\n")),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsonc"},'// .eslintrc.json\n{\n  "rules": {\n    "@typescript-eslint/no-unsafe-argument": "error"\n  }\n}\n')),(0,o.kt)("p",null,"This rule is not configurable."),(0,o.kt)("h2",{id:"related-to"},"Related To"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/typescript-eslint-chinese/rules/no-explicit-any"},(0,o.kt)("inlineCode",{parentName:"a"},"no-explicit-any"))),(0,o.kt)("li",{parentName:"ul"},"TSLint: ",(0,o.kt)("a",{parentName:"li",href:"https://palantir.github.io/tslint/rules/no-unsafe-any/"},(0,o.kt)("inlineCode",{parentName:"a"},"no-unsafe-any")))))}d.isMDXComponent=!0}}]);