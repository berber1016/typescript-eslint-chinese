"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[5381],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),f=a,y=d["".concat(s,".").concat(f)]||d[f]||u[f]||l;return t?r.createElement(y,o(o({ref:n},p),{},{components:t})):r.createElement(y,o({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8946:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=t(3117),a=t(102),l=(t(7294),t(3905)),o=["components"],i={},s="no-unsafe-call",c={unversionedId:"no-unsafe-call",id:"no-unsafe-call",title:"no-unsafe-call",description:"Disallows calling a value with type any.",source:"@site/rules/no-unsafe-call.md",sourceDirName:".",slug:"/no-unsafe-call",permalink:"/typescript-eslint-chinese/rules/no-unsafe-call",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"no-unsafe-assignment",permalink:"/typescript-eslint-chinese/rules/no-unsafe-assignment"},next:{title:"no-unsafe-member-access",permalink:"/typescript-eslint-chinese/rules/no-unsafe-member-access"}},p={},u=[{value:"Rule Details",id:"rule-details",level:2},{value:"\u274c Incorrect",id:"-incorrect",level:3},{value:"\u2705 Correct",id:"-correct",level:3},{value:"Options",id:"options",level:2},{value:"Related To",id:"related-to",level:2}],d={toc:u};function f(e){var n=e.components,t=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"no-unsafe-call"},(0,l.kt)("inlineCode",{parentName:"h1"},"no-unsafe-call")),(0,l.kt)("p",null,"Disallows calling a value with type ",(0,l.kt)("inlineCode",{parentName:"p"},"any"),"."),(0,l.kt)("p",null,"Despite your best intentions, the ",(0,l.kt)("inlineCode",{parentName:"p"},"any")," type can sometimes leak into your codebase.\nThe arguments to, and return value of calling an ",(0,l.kt)("inlineCode",{parentName:"p"},"any")," typed variable are not checked at all by TypeScript, so it creates a potential safety hole, and source of bugs in your codebase."),(0,l.kt)("h2",{id:"rule-details"},"Rule Details"),(0,l.kt)("p",null,"This rule disallows calling any variable that is typed as ",(0,l.kt)("inlineCode",{parentName:"p"},"any"),"."),(0,l.kt)("p",null,"Examples of code for this rule:"),(0,l.kt)("h3",{id:"-incorrect"},"\u274c Incorrect"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'declare const anyVar: any;\ndeclare const nestedAny: { prop: any };\n\nanyVar();\nanyVar.a.b();\n\nnestedAny.prop();\nnestedAny.prop["a"]();\n\nnew anyVar();\nnew nestedAny.prop();\n\nanyVar`foo`;\nnestedAny.prop`foo`;\n')),(0,l.kt)("h3",{id:"-correct"},"\u2705 Correct"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"declare const typedVar: () => void;\ndeclare const typedNested: { prop: { a: () => void } };\n\ntypedVar();\ntypedNested.prop.a();\n\n(() => {})();\n\nnew Map();\n\nString.raw`foo`;\n")),(0,l.kt)("h2",{id:"options"},"Options"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsonc"},'// .eslintrc.json\n{\n  "rules": {\n    "@typescript-eslint/no-unsafe-call": "error"\n  }\n}\n')),(0,l.kt)("p",null,"This rule is not configurable."),(0,l.kt)("h2",{id:"related-to"},"Related To"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/typescript-eslint-chinese/rules/no-explicit-any"},(0,l.kt)("inlineCode",{parentName:"a"},"no-explicit-any"))),(0,l.kt)("li",{parentName:"ul"},"TSLint: ",(0,l.kt)("a",{parentName:"li",href:"https://palantir.github.io/tslint/rules/no-unsafe-any/"},(0,l.kt)("inlineCode",{parentName:"a"},"no-unsafe-any")))))}f.isMDXComponent=!0}}]);