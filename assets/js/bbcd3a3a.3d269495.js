"use strict";(self.webpackChunktypescript_eslint_chinese=self.webpackChunktypescript_eslint_chinese||[]).push([[2921],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||o;return n?r.createElement(m,s(s({ref:t},u),{},{components:n})):r.createElement(m,s({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7512:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return c}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),s=["components"],i={},l="no-shadow",p={unversionedId:"no-shadow",id:"no-shadow",title:"no-shadow",description:"Disallows variable declarations from shadowing variables declared in the outer scope.",source:"@site/rules/no-shadow.md",sourceDirName:".",slug:"/no-shadow",permalink:"/typescript-eslint-chinese/rules/no-shadow",draft:!1,tags:[],version:"current",lastUpdatedBy:"GEARLESS JOE",lastUpdatedAt:1657247748,formattedLastUpdatedAt:"2022\u5e747\u67088\u65e5",frontMatter:{},sidebar:"rules",previous:{title:"no-restricted-imports",permalink:"/typescript-eslint-chinese/rules/no-restricted-imports"},next:{title:"no-this-alias",permalink:"/typescript-eslint-chinese/rules/no-this-alias"}},u={},c=[{value:"Rule Details",id:"rule-details",level:2},{value:"How to Use",id:"how-to-use",level:2},{value:"Options",id:"options",level:2},{value:"<code>ignoreTypeValueShadow</code>",id:"ignoretypevalueshadow",level:3},{value:"<code>ignoreFunctionTypeParameterNameValueShadow</code>",id:"ignorefunctiontypeparameternamevalueshadow",level:3}],d={toc:c};function h(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"no-shadow"},(0,o.kt)("inlineCode",{parentName:"h1"},"no-shadow")),(0,o.kt)("p",null,"Disallows variable declarations from shadowing variables declared in the outer scope."),(0,o.kt)("h2",{id:"rule-details"},"Rule Details"),(0,o.kt)("p",null,"This rule extends the base ",(0,o.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-shadow"},(0,o.kt)("inlineCode",{parentName:"a"},"eslint/no-shadow"))," rule.\nIt adds support for TypeScript's ",(0,o.kt)("inlineCode",{parentName:"p"},"this")," parameters and global augmentation, and adds options for TypeScript features."),(0,o.kt)("h2",{id:"how-to-use"},"How to Use"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  // note you must disable the base rule as it can report incorrect errors\n  "no-shadow": "off",\n  "@typescript-eslint/no-shadow": ["error"]\n}\n')),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-shadow#options"},(0,o.kt)("inlineCode",{parentName:"a"},"eslint/no-shadow")," options"),".\nThis rule adds the following options:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface Options extends BaseNoShadowOptions {\n  ignoreTypeValueShadow?: boolean;\n  ignoreFunctionTypeParameterNameValueShadow?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseNoShadowDefaultOptions,\n  ignoreTypeValueShadow: true,\n  ignoreFunctionTypeParameterNameValueShadow: true,\n};\n")),(0,o.kt)("h3",{id:"ignoretypevalueshadow"},(0,o.kt)("inlineCode",{parentName:"h3"},"ignoreTypeValueShadow")),(0,o.kt)("p",null,"When set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", the rule will ignore the case when you name a type the same as a variable."),(0,o.kt)("p",null,"TypeScript allows types and variables to shadow one-another. This is generally safe because you cannot use variables in type locations without a ",(0,o.kt)("inlineCode",{parentName:"p"},"typeof")," operator, so there's little risk of confusion."),(0,o.kt)("p",null,"Examples of ",(0,o.kt)("strong",{parentName:"p"},"correct")," code with ",(0,o.kt)("inlineCode",{parentName:"p"},"{ ignoreTypeValueShadow: true }"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'type Foo = number;\nconst Foo = 1;\n\ninterface Bar {\n  prop: number;\n}\nconst Bar = "test";\n')),(0,o.kt)("h3",{id:"ignorefunctiontypeparameternamevalueshadow"},(0,o.kt)("inlineCode",{parentName:"h3"},"ignoreFunctionTypeParameterNameValueShadow")),(0,o.kt)("p",null,"When set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", the rule will ignore the case when you name a function type argument the same as a variable."),(0,o.kt)("p",null,"Each of a function type's arguments creates a value variable within the scope of the function type. This is done so that you can reference the type later using the ",(0,o.kt)("inlineCode",{parentName:"p"},"typeof")," operator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'type Func = (test: string) => typeof test;\n\ndeclare const fn: Func;\nconst result = fn("str"); // typeof result === string\n')),(0,o.kt)("p",null,"This means that function type arguments shadow value variable names in parent scopes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'let test = 1;\ntype TestType = typeof test; // === number\ntype Func = (test: string) => typeof test; // this "test" references the argument, not the variable\n\ndeclare const fn: Func;\nconst result = fn("str"); // typeof result === string\n')),(0,o.kt)("p",null,"If you do not use the ",(0,o.kt)("inlineCode",{parentName:"p"},"typeof")," operator in a function type return type position, you can safely turn this option on."),(0,o.kt)("p",null,"Examples of ",(0,o.kt)("strong",{parentName:"p"},"correct")," code with ",(0,o.kt)("inlineCode",{parentName:"p"},"{ ignoreFunctionTypeParameterNameValueShadow: true }"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const test = 1;\ntype Func = (test: string) => typeof test;\n")),(0,o.kt)("sup",null,(0,o.kt)("p",null,"Taken with \u2764\ufe0f ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/eslint/eslint/blob/main/docs/rules/no-shadow.md"},"from ESLint core"))))}h.isMDXComponent=!0}}]);